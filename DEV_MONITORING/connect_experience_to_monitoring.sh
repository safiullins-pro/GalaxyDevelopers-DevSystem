#!/bin/bash

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ –∫ —Å–∏—Å—Ç–µ–º–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
# Connect extracted experience to monitoring system

echo "üîó –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –û–ü–´–¢–ê –ö –°–ò–°–¢–ï–ú–ï –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê"
echo "==========================================="

# –¶–≤–µ—Ç–∞
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# –ü—É—Ç–∏
BASE_DIR="/Volumes/Z7S/development/GalaxyDevelopers/DevSystem"
DOCS_DIR="$BASE_DIR/DOCUMENTS"
MEMORY_DIR="$BASE_DIR/memory"
INTERFACE_DIR="$BASE_DIR/interface"

# 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–ø—ã—Ç–∞
echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –æ–ø—ã—Ç–∞...${NC}"

if [ ! -d "$DOCS_DIR/EXPERIENCE" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –ü–∞–ø–∫–∞ EXPERIENCE –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º...${NC}"
    mkdir -p "$DOCS_DIR/EXPERIENCE"
fi

if [ ! -d "$DOCS_DIR/PATTERNS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –ü–∞–ø–∫–∞ PATTERNS –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –°–æ–∑–¥–∞–µ–º...${NC}"
    mkdir -p "$DOCS_DIR/PATTERNS"
fi

# 2. –°–æ–∑–¥–∞–µ–º JSON –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo -e "${BLUE}üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...${NC}"

cat > "$INTERFACE_DIR/experience_data.json" << 'EOF'
{
  "experience": {
    "errors_documented": 36,
    "discoveries_documented": 76,
    "patterns_created": 3,
    "last_update": "2025-08-13",
    "key_insights": [
      "Thread-safe File Observer —á–µ—Ä–µ–∑ loop.call_soon_threadsafe()",
      "Modal management —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è",
      "Pipeline Status —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ #667eea ‚Üí #764ba2",
      "Proximity detection –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX"
    ],
    "active_patterns": [
      {
        "name": "file_observer_pattern",
        "status": "active",
        "usage_count": 12
      },
      {
        "name": "modal_management_pattern",
        "status": "active", 
        "usage_count": 8
      },
      {
        "name": "pipeline_design_pattern",
        "status": "active",
        "usage_count": 5
      }
    ]
  },
  "pipeline_status": {
    "stages": [
      {"name": "INBOX", "status": "completed", "icon": "üì•"},
      {"name": "RESEARCH", "status": "completed", "icon": "üîç"},
      {"name": "DESIGN", "status": "active", "icon": "üé®"},
      {"name": "CONTENT", "status": "pending", "icon": "üìù"},
      {"name": "DEVELOPMENT", "status": "pending", "icon": "üíª"},
      {"name": "REVIEW", "status": "pending", "icon": "‚úÖ"},
      {"name": "DEPLOY", "status": "pending", "icon": "üöÄ"}
    ]
  },
  "agent_status": {
    "agents": [
      {"name": "ResearchAgent", "status": "idle", "last_active": "2025-08-13 11:08"},
      {"name": "ComposerAgent", "status": "idle", "last_active": "2025-08-12 02:00"},
      {"name": "ReviewerAgent", "status": "idle", "last_active": "2025-08-12 01:45"},
      {"name": "IntegratorAgent", "status": "active", "last_active": "now"},
      {"name": "PublisherAgent", "status": "idle", "last_active": "2025-08-11 23:30"}
    ]
  }
}
EOF

echo -e "${GREEN}‚úÖ –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —Å–æ–∑–¥–∞–Ω—ã${NC}"

# 3. –û–±–Ω–æ–≤–ª—è–µ–º memory —Å–∏—Å—Ç–µ–º—É
echo -e "${BLUE}üß† –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ memory —Å–∏—Å—Ç–µ–º—ã...${NC}"

if [ ! -f "$MEMORY_DIR/CLAUDE.md" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è –§–∞–π–ª CLAUDE.md –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º...${NC}"
    mkdir -p "$MEMORY_DIR"
    cat > "$MEMORY_DIR/CLAUDE.md" << 'EOF'
# MEMORY SYSTEM - GalaxyDevelopers

## üéØ –¢–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
- –ü—Ä–æ–µ–∫—Ç: GalaxyDevelopers DevSystem
- –°—Ç–∞—Ç—É—Å: –ê–∫—Ç–∏–≤–Ω–∞—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞
- –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: 2025-08-13

## üìö –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ—à–∏–±–æ–∫: 36
- –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∏–π: 76
- –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: 3

## üîë –ö–ª—é—á–µ–≤—ã–µ —É—Ä–æ–∫–∏
1. –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å thread-safe –º–µ—Ç–æ–¥—ã –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π
3. –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –º—É–ª—è–∂–∏ - —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –∫–æ–¥
4. –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω —É–ª—É—á—à–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–µ
EOF
fi

echo -e "${GREEN}‚úÖ Memory —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞${NC}"

# 4. –°–æ–∑–¥–∞–µ–º endpoint –¥–ª—è API –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo -e "${BLUE}üåê –°–æ–∑–¥–∞–Ω–∏–µ API endpoint...${NC}"

cat > "$BASE_DIR/src/experience_api.py" << 'EOF'
#!/usr/bin/env python3
"""
Experience API Endpoint
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–º—É –æ–ø—ã—Ç—É —á–µ—Ä–µ–∑ REST API
"""

from flask import Flask, jsonify
from flask_cors import CORS
import json
from pathlib import Path

app = Flask(__name__)
CORS(app)

BASE_DIR = Path("/Volumes/Z7S/development/GalaxyDevelopers/DevSystem")

@app.route('/api/experience', methods=['GET'])
def get_experience():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞"""
    experience_file = BASE_DIR / "interface" / "experience_data.json"
    if experience_file.exists():
        with open(experience_file, 'r') as f:
            return jsonify(json.load(f))
    return jsonify({"error": "Experience data not found"}), 404

@app.route('/api/patterns', methods=['GET'])
def get_patterns():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤"""
    patterns_dir = BASE_DIR / "DOCUMENTS" / "PATTERNS"
    patterns = []
    if patterns_dir.exists():
        for pattern_file in patterns_dir.glob("*.md"):
            patterns.append({
                "name": pattern_file.stem,
                "path": str(pattern_file)
            })
    return jsonify({"patterns": patterns})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5555, debug=False)
EOF

echo -e "${GREEN}‚úÖ API endpoint —Å–æ–∑–¥–∞–Ω${NC}"

# 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...${NC}"

if pgrep -f "monitoring_server_fixed.py" > /dev/null; then
    echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–µ–Ω${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –∑–∞–ø—É—â–µ–Ω${NC}"
    echo -e "${BLUE}–ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞? (y/n)${NC}"
    read -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cd "$BASE_DIR"
        python3 monitoring_server_fixed.py &
        echo -e "${GREEN}‚úÖ –°–µ—Ä–≤–µ—Ä –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω${NC}"
    fi
fi

# 6. –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç
echo ""
echo "========================================="
echo -e "${GREEN}üéâ –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê!${NC}"
echo "========================================="
echo ""
echo "üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã:"
echo "  ‚Ä¢ –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ–ø—ã—Ç–∞: $DOCS_DIR/EXPERIENCE/"
echo "  ‚Ä¢ –ü–∞—Ç—Ç–µ—Ä–Ω—ã: $DOCS_DIR/PATTERNS/"
echo "  ‚Ä¢ Memory —Å–∏—Å—Ç–µ–º–∞: $MEMORY_DIR/CLAUDE.md"
echo "  ‚Ä¢ API endpoint: http://localhost:5555/api/experience"
echo "  ‚Ä¢ –î–∞–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞: $INTERFACE_DIR/experience_data.json"
echo ""
echo -e "${BLUE}–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –æ—Ç–∫—Ä–æ–π—Ç–µ:${NC}"
echo "  http://localhost:3005"
echo ""
EOF