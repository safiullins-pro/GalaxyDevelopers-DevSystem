#!/usr/bin/env python3
"""
GALAXY FILE PROTECTION WITH AI
–°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–æ–≤ —Å AI –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
"""

import os
import stat
import hashlib
import json
import time
from pathlib import Path
from typing import Dict, List, Tuple, Optional
import subprocess
import re
from datetime import datetime
import sqlite3

class AIFileProtection:
    """AI-powered —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–æ–≤"""
    
    def __init__(self):
        self.protected_paths = [
            '/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/',
            '/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/'
        ]
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã - –ù–ò–ö–¢–û –Ω–µ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω—è—Ç—å
        self.critical_files = [
            'monitoring_server_fixed.py',
            'file_protection_ai.py',
            'monitoring_config.json',
            '.env',
            'credentials.json'
        ]
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ–ø–∞—Å–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        self.danger_patterns = [
            r'rm\s+-rf\s+/',  # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            r'chmod\s+777',   # –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø—Ä–∞–≤
            r'eval\(',         # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
            r'exec\(',         # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥
            r'__import__',     # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç
            r'os\.system',     # –°–∏—Å—Ç–µ–º–Ω—ã–µ –≤—ã–∑–æ–≤—ã
            r'subprocess\.',   # –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
            r'open\(.*[\'"]w', # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª—ã
        ]
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ö–µ—à–µ–π –∏ –ø—Ä–∞–≤
        self.db_path = Path(__file__).parent / 'file_protection.db'
        self.init_database()
        
        # AI –º–æ–¥–µ–ª—å –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ (—ç–º—É–ª—è—Ü–∏—è)
        self.ai_threat_levels = {
            'safe': 0,
            'low': 25,
            'medium': 50,
            'high': 75,
            'critical': 100
        }
        
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞—â–∏—Ç—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS file_hashes (
                path TEXT PRIMARY KEY,
                hash TEXT NOT NULL,
                permissions TEXT NOT NULL,
                owner TEXT NOT NULL,
                last_check REAL NOT NULL,
                threat_level INTEGER DEFAULT 0,
                locked BOOLEAN DEFAULT 0
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS access_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp REAL NOT NULL,
                path TEXT NOT NULL,
                action TEXT NOT NULL,
                user TEXT NOT NULL,
                allowed BOOLEAN NOT NULL,
                threat_level INTEGER,
                reason TEXT
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS ai_decisions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                timestamp REAL NOT NULL,
                file_path TEXT NOT NULL,
                operation TEXT NOT NULL,
                risk_score INTEGER NOT NULL,
                decision TEXT NOT NULL,
                factors TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def calculate_file_hash(self, filepath: str) -> str:
        """–í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ö–µ—à–∞ —Ñ–∞–π–ª–∞"""
        sha256_hash = hashlib.sha256()
        try:
            with open(filepath, "rb") as f:
                for byte_block in iter(lambda: f.read(4096), b""):
                    sha256_hash.update(byte_block)
            return sha256_hash.hexdigest()
        except:
            return ""
    
    def get_file_permissions(self, filepath: str) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª—É"""
        try:
            st = os.stat(filepath)
            return {
                'mode': oct(st.st_mode),
                'owner': st.st_uid,
                'group': st.st_gid,
                'size': st.st_size,
                'modified': st.st_mtime,
                'permissions': {
                    'owner': {
                        'read': bool(st.st_mode & stat.S_IRUSR),
                        'write': bool(st.st_mode & stat.S_IWUSR),
                        'execute': bool(st.st_mode & stat.S_IXUSR)
                    },
                    'group': {
                        'read': bool(st.st_mode & stat.S_IRGRP),
                        'write': bool(st.st_mode & stat.S_IWGRP),
                        'execute': bool(st.st_mode & stat.S_IXGRP)
                    },
                    'others': {
                        'read': bool(st.st_mode & stat.S_IROTH),
                        'write': bool(st.st_mode & stat.S_IWOTH),
                        'execute': bool(st.st_mode & stat.S_IXOTH)
                    }
                }
            }
        except:
            return {}
    
    def ai_analyze_threat(self, filepath: str, operation: str, content: str = None) -> Tuple[int, str, Dict]:
        """
        AI –∞–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑—ã –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Ñ–∞–π–ª–æ–º
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç: (—É—Ä–æ–≤–µ–Ω—å_—É–≥—Ä–æ–∑—ã, —Ä–µ—à–µ–Ω–∏–µ, —Ñ–∞–∫—Ç–æ—Ä—ã)
        """
        threat_score = 0
        factors = []
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–π–ª–æ–≤
        filename = Path(filepath).name
        if filename in self.critical_files:
            threat_score += 50
            factors.append("CRITICAL_FILE")
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        ext = Path(filepath).suffix
        dangerous_extensions = ['.sh', '.py', '.js', '.exe', '.dll', '.so']
        if ext in dangerous_extensions:
            threat_score += 20
            factors.append(f"DANGEROUS_EXT:{ext}")
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏
        dangerous_operations = {
            'delete': 30,
            'chmod': 25,
            'write': 15,
            'execute': 35,
            'move': 20
        }
        if operation in dangerous_operations:
            threat_score += dangerous_operations[operation]
            factors.append(f"DANGEROUS_OP:{operation}")
        
        # 4. –ê–Ω–∞–ª–∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if content:
            for pattern in self.danger_patterns:
                if re.search(pattern, content, re.IGNORECASE):
                    threat_score += 30
                    factors.append(f"DANGEROUS_PATTERN:{pattern}")
        
        # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
        perms = self.get_file_permissions(filepath)
        if perms and perms.get('permissions', {}).get('others', {}).get('write'):
            threat_score += 25
            factors.append("WORLD_WRITABLE")
        
        # 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ (–µ—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è)
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        cursor.execute('SELECT hash FROM file_hashes WHERE path = ?', (filepath,))
        row = cursor.fetchone()
        if row:
            current_hash = self.calculate_file_hash(filepath)
            if current_hash and row[0] != current_hash:
                threat_score += 40
                factors.append("INTEGRITY_VIOLATION")
        conn.close()
        
        # AI —Ä–µ—à–µ–Ω–∏–µ
        if threat_score >= 80:
            decision = "BLOCK"
        elif threat_score >= 50:
            decision = "REQUIRE_CONFIRMATION"
        elif threat_score >= 25:
            decision = "WARN"
        else:
            decision = "ALLOW"
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ—à–µ–Ω–∏–µ AI
        self.log_ai_decision(filepath, operation, threat_score, decision, factors)
        
        return threat_score, decision, {
            'factors': factors,
            'score': threat_score,
            'recommendation': self.get_recommendation(threat_score)
        }
    
    def get_recommendation(self, threat_score: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω—è —É–≥—Ä–æ–∑—ã"""
        if threat_score >= 80:
            return "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –£–ì–†–û–ó–ê! –û–ø–µ—Ä–∞—Ü–∏—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
        elif threat_score >= 50:
            return "‚ö†Ô∏è –í–´–°–û–ö–ò–ô –†–ò–°–ö! –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."
        elif threat_score >= 25:
            return "‚ö° –°–†–ï–î–ù–ò–ô –†–ò–°–ö. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é."
        else:
            return "‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–∞."
    
    def check_permission(self, filepath: str, operation: str, user: str = None) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏—é —Å —Ñ–∞–π–ª–æ–º
        """
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if not user:
            user = os.environ.get('USER', 'unknown')
        
        # AI –∞–Ω–∞–ª–∏–∑
        threat_score, decision, analysis = self.ai_analyze_threat(filepath, operation)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ø—ã—Ç–∫—É –¥–æ—Å—Ç—É–ø–∞
        allowed = decision in ['ALLOW', 'WARN']
        reason = f"{decision}: {analysis['recommendation']}"
        
        self.log_access(filepath, operation, user, allowed, threat_score, reason)
        
        return allowed, reason
    
    def protect_file(self, filepath: str, lock: bool = False) -> bool:
        """
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –ø–æ–¥ –∑–∞—â–∏—Ç—É
        """
        try:
            # –í—ã—á–∏—Å–ª—è–µ–º —Ö–µ—à
            file_hash = self.calculate_file_hash(filepath)
            if not file_hash:
                return False
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∞
            perms = self.get_file_permissions(filepath)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            conn = sqlite3.connect(self.db_path)
            cursor = conn.cursor()
            
            cursor.execute('''
                INSERT OR REPLACE INTO file_hashes 
                (path, hash, permissions, owner, last_check, locked)
                VALUES (?, ?, ?, ?, ?, ?)
            ''', (
                filepath,
                file_hash,
                json.dumps(perms),
                os.environ.get('USER', 'unknown'),
                time.time(),
                lock
            ))
            
            conn.commit()
            conn.close()
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–µ –ø—Ä–∞–≤–∞ (–µ—Å–ª–∏ lock=True)
            if lock:
                os.chmod(filepath, 0o600)  # –¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –º–æ–∂–µ—Ç —á–∏—Ç–∞—Ç—å/–ø–∏—Å–∞—Ç—å
            
            return True
        except Exception as e:
            print(f"Error protecting file: {e}")
            return False
    
    def verify_integrity(self, filepath: str) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞
        """
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT hash, permissions FROM file_hashes WHERE path = ?', (filepath,))
        row = cursor.fetchone()
        conn.close()
        
        if not row:
            return False, "File not protected"
        
        stored_hash = row[0]
        current_hash = self.calculate_file_hash(filepath)
        
        if current_hash != stored_hash:
            return False, f"INTEGRITY VIOLATION! Hash mismatch"
        
        return True, "File integrity verified"
    
    def scan_directory(self, directory: str) -> Dict:
        """
        –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –Ω–∞ —É–≥—Ä–æ–∑—ã
        """
        results = {
            'total_files': 0,
            'protected_files': 0,
            'threats_found': [],
            'integrity_violations': [],
            'permission_issues': []
        }
        
        for root, dirs, files in os.walk(directory):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            dirs[:] = [d for d in dirs if not d.startswith('.') and d not in ['__pycache__', 'node_modules']]
            
            for file in files:
                if file.startswith('.'):
                    continue
                    
                filepath = os.path.join(root, file)
                results['total_files'] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å
                is_valid, message = self.verify_integrity(filepath)
                if not is_valid and "INTEGRITY VIOLATION" in message:
                    results['integrity_violations'].append(filepath)
                
                # AI –∞–Ω–∞–ª–∏–∑ —É–≥—Ä–æ–∑
                threat_score, decision, analysis = self.ai_analyze_threat(filepath, 'scan')
                if threat_score >= 50:
                    results['threats_found'].append({
                        'file': filepath,
                        'score': threat_score,
                        'factors': analysis['factors']
                    })
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
                perms = self.get_file_permissions(filepath)
                if perms and perms.get('permissions', {}).get('others', {}).get('write'):
                    results['permission_issues'].append({
                        'file': filepath,
                        'issue': 'World writable'
                    })
        
        return results
    
    def log_access(self, filepath: str, action: str, user: str, allowed: bool, threat_level: int, reason: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫ –¥–æ—Å—Ç—É–ø–∞"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO access_log 
            (timestamp, path, action, user, allowed, threat_level, reason)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (time.time(), filepath, action, user, allowed, threat_level, reason))
        
        conn.commit()
        conn.close()
    
    def log_ai_decision(self, filepath: str, operation: str, risk_score: int, decision: str, factors: List):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ—à–µ–Ω–∏–π AI"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO ai_decisions 
            (timestamp, file_path, operation, risk_score, decision, factors)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (time.time(), filepath, operation, risk_score, decision, json.dumps(factors)))
        
        conn.commit()
        conn.close()
    
    def get_protection_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—â–∏—Ç—ã"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        cursor.execute('SELECT COUNT(*) FROM file_hashes')
        protected_count = cursor.fetchone()[0]
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        cursor.execute('SELECT COUNT(*) FROM file_hashes WHERE locked = 1')
        locked_count = cursor.fetchone()[0]
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ–ø—ã—Ç–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        cursor.execute('''
            SELECT timestamp, path, action, user, allowed, threat_level 
            FROM access_log 
            ORDER BY timestamp DESC 
            LIMIT 10
        ''')
        recent_access = cursor.fetchall()
        
        # –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–µ—à–µ–Ω–∏—è AI
        cursor.execute('''
            SELECT timestamp, file_path, risk_score, decision 
            FROM ai_decisions 
            ORDER BY timestamp DESC 
            LIMIT 10
        ''')
        recent_decisions = cursor.fetchall()
        
        conn.close()
        
        return {
            'protected_files': protected_count,
            'locked_files': locked_count,
            'recent_access_attempts': [
                {
                    'time': datetime.fromtimestamp(r[0]).isoformat(),
                    'file': r[1],
                    'action': r[2],
                    'user': r[3],
                    'allowed': r[4],
                    'threat_level': r[5]
                } for r in recent_access
            ],
            'recent_ai_decisions': [
                {
                    'time': datetime.fromtimestamp(r[0]).isoformat(),
                    'file': r[1],
                    'risk_score': r[2],
                    'decision': r[3]
                } for r in recent_decisions
            ]
        }
    
    def quarantine_file(self, filepath: str) -> bool:
        """
        –ö–∞—Ä–∞–Ω—Ç–∏–Ω –æ–ø–∞—Å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        """
        try:
            quarantine_dir = Path(__file__).parent / 'quarantine'
            quarantine_dir.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = Path(filepath).name
            quarantine_path = quarantine_dir / f"{timestamp}_{filename}"
            
            # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª
            import shutil
            shutil.move(filepath, quarantine_path)
            
            # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –ø—Ä–∞–≤–∞
            os.chmod(quarantine_path, 0o000)
            
            # –õ–æ–≥–∏—Ä—É–µ–º
            self.log_access(
                filepath, 
                'QUARANTINE', 
                os.environ.get('USER', 'unknown'),
                True,
                100,
                f"File quarantined to {quarantine_path}"
            )
            
            return True
        except Exception as e:
            print(f"Quarantine failed: {e}")
            return False


# API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º
class FileProtectionAPI:
    """API –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Å–∏—Å—Ç–µ–º–æ–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    
    def __init__(self):
        self.protection = AIFileProtection()
    
    async def check_file_operation(self, filepath: str, operation: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ —Ñ–∞–π–ª–æ–º"""
        allowed, reason = self.protection.check_permission(filepath, operation)
        
        return {
            'allowed': allowed,
            'reason': reason,
            'timestamp': datetime.now().isoformat()
        }
    
    async def protect_files(self, files: List[str], lock: bool = False) -> Dict:
        """–ó–∞—â–∏—Ç–∞ —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤"""
        results = []
        for filepath in files:
            success = self.protection.protect_file(filepath, lock)
            results.append({
                'file': filepath,
                'protected': success,
                'locked': lock
            })
        
        return {
            'protected_count': sum(1 for r in results if r['protected']),
            'results': results
        }
    
    async def scan_for_threats(self, directory: str) -> Dict:
        """–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É–≥—Ä–æ–∑—ã"""
        return self.protection.scan_directory(directory)
    
    async def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—â–∏—Ç—ã"""
        return self.protection.get_protection_status()
    
    async def verify_file(self, filepath: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–∞"""
        is_valid, message = self.protection.verify_integrity(filepath)
        
        return {
            'file': filepath,
            'valid': is_valid,
            'message': message,
            'timestamp': datetime.now().isoformat()
        }


if __name__ == '__main__':
    # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    protection = AIFileProtection()
    
    print("üõ°Ô∏è GALAXY FILE PROTECTION WITH AI")
    print("=" * 50)
    
    # –ó–∞—â–∏—â–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
    critical_files = [
        'monitoring_server_fixed.py',
        'monitoring_config.json'
    ]
    
    for file in critical_files:
        if Path(file).exists():
            if protection.protect_file(file, lock=False):
                print(f"‚úÖ Protected: {file}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–ø–µ—Ä–∞—Ü–∏—é
    test_file = "test.txt"
    allowed, reason = protection.check_permission(test_file, 'write')
    print(f"\nüìù Write to {test_file}: {'‚úÖ Allowed' if allowed else '‚ùå Blocked'}")
    print(f"   Reason: {reason}")
    
    # –°—Ç–∞—Ç—É—Å –∑–∞—â–∏—Ç—ã
    status = protection.get_protection_status()
    print(f"\nüìä Protection Status:")
    print(f"   Protected files: {status['protected_files']}")
    print(f"   Locked files: {status['locked_files']}")