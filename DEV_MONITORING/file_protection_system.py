#!/usr/bin/env python3
"""
üîê GALAXY FILE PROTECTION SYSTEM
–ó–∞—â–∏—Ç–∞ —Ñ–∞–π–ª–æ–≤ –æ—Ç –Ω–µ—Å–∞–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é: –ó–ê–ü–ò–°–¨ –ó–ê–ü–†–ï–©–ï–ù–ê
–¢–æ–ª—å–∫–æ —Å –¢–ó –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –†–ê–ó–†–ï–®–ï–ù–ò–ï –ù–ê –ó–ê–ü–ò–°–¨
"""

import os
import stat
import json
import sqlite3
import hashlib
from pathlib import Path
from datetime import datetime
from typing import Dict, Set, Optional, List
import threading
import time

class FileProtectionSystem:
    """
    –°–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã —Ñ–∞–π–ª–æ–≤ Galaxy
    - –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—Å–µ —Ñ–∞–π–ª—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
    - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—ã–¥–∞–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¢–ó
    - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏ –ø–∞–¥–µ–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    
    def __init__(self, config_path: str = "monitoring_config.json"):
        self.config_path = config_path
        self.load_config()
        
        # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π
        self.db_path = Path(__file__).parent / "permissions.db"
        self.init_database()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è (–≤ –ø–∞–º—è—Ç–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞)
        self.active_permissions: Dict[str, Dict] = {}
        self.permission_lock = threading.Lock()
        
        # –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.protected_dirs: Set[Path] = set()
        self.init_protected_dirs()
        
        # –§–ª–∞–≥ —Å—Ç–∞—Ç—É—Å–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring_active = False
        self.last_heartbeat = time.time()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É heartbeat
        self.heartbeat_thread = threading.Thread(target=self._heartbeat_monitor, daemon=True)
        self.heartbeat_thread.start()
    
    def load_config(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
        try:
            with open(self.config_path, 'r') as f:
                self.config = json.load(f)
        except:
            self.config = {
                "monitoring": {
                    "file_watcher": {
                        "paths": [
                            "/Volumes/Z7S/development/GalaxyDevelopers/DEVELOPER_SYSTEM/",
                            "/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem/"
                        ]
                    }
                }
            }
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS permissions (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_path TEXT NOT NULL,
                task_id TEXT NOT NULL,
                granted_at TIMESTAMP,
                expires_at TIMESTAMP,
                agent_name TEXT,
                permission_type TEXT,
                status TEXT DEFAULT 'active',
                UNIQUE(file_path, task_id)
            )
        ''')
        
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS access_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                file_path TEXT NOT NULL,
                action TEXT NOT NULL,
                task_id TEXT,
                timestamp TIMESTAMP,
                success BOOLEAN,
                error_msg TEXT
            )
        ''')
        
        conn.commit()
        conn.close()
    
    def init_protected_dirs(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π"""
        paths = self.config.get('monitoring', {}).get('file_watcher', {}).get('paths', [])
        for path in paths:
            if os.path.exists(path):
                self.protected_dirs.add(Path(path))
                # –ë–õ–û–ö–ò–†–£–ï–ú –í–°–ï –§–ê–ô–õ–´ –í –î–ò–†–ï–ö–¢–û–†–ò–ò –ü–û –£–ú–û–õ–ß–ê–ù–ò–Æ
                self._lock_all_files_in_directory(Path(path))
    
    def _heartbeat_monitor(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ heartbeat –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        while True:
            time.sleep(5)
            # –ï—Å–ª–∏ heartbeat –Ω–µ –ø–æ–ª—É—á–µ–Ω –±–æ–ª—å—à–µ 30 —Å–µ–∫—É–Ω–¥ - –±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å—ë
            if time.time() - self.last_heartbeat > 30:
                if self.monitoring_active:
                    print("‚ùå –ú–û–ù–ò–¢–û–†–ò–ù–ì –£–ü–ê–õ - –ë–õ–û–ö–ò–†–û–í–ö–ê –í–°–ï–• –§–ê–ô–õ–û–í")
                    self.monitoring_active = False
                    self.emergency_lockdown()
    
    def heartbeat(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ heartbeat –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        self.last_heartbeat = time.time()
        if not self.monitoring_active:
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω - —Å–∏—Å—Ç–µ–º–∞ –∑–∞—â–∏—Ç—ã –≤–∫–ª—é—á–µ–Ω–∞")
            self.monitoring_active = True
    
    def emergency_lockdown(self):
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤"""
        with self.permission_lock:
            # –û—á–∏—â–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
            self.active_permissions.clear()
            
            # –ë–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –≤ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
            for dir_path in self.protected_dirs:
                self._lock_directory(dir_path)
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
            self.log_access("SYSTEM", "EMERGENCY_LOCKDOWN", None, True, 
                          "Monitoring system down - all files locked")
    
    def _lock_directory(self, dir_path: Path):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–∞—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏"""
        try:
            for root, dirs, files in os.walk(dir_path):
                for file in files:
                    file_path = Path(root) / file
                    self._set_readonly(file_path)
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {dir_path}: {e}")
    
    def _set_readonly(self, file_path: Path):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ñ–∞–π–ª–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è"""
        try:
            current = file_path.stat().st_mode
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≤—Å–µ—Ö
            readonly = current & ~(stat.S_IWUSR | stat.S_IWGRP | stat.S_IWOTH)
            os.chmod(file_path, readonly)
        except:
            pass
    
    def _set_writable(self, file_path: Path):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞"""
        try:
            current = file_path.stat().st_mode
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞
            writable = current | stat.S_IWUSR
            os.chmod(file_path, writable)
        except:
            pass
    
    def _lock_all_files_in_directory(self, directory: Path):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ"""
        try:
            for root, dirs, files in os.walk(directory):
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
                if any(skip in root for skip in ['.git', '__pycache__', 'node_modules', '.venv', 'venv']):
                    continue
                    
                for file in files:
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ —Ñ–∞–π–ª—ã
                    if file.startswith('.') or file.endswith('.pyc'):
                        continue
                    
                    file_path = Path(root) / file
                    if file_path.exists() and file_path.is_file():
                        self._set_readonly(file_path)
                        
            print(f"üîí –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ {directory}: {e}")
    
    def grant_permission(self, file_path: str, task_id: str, agent_name: str, 
                        duration_seconds: int = 300) -> bool:
        """
        –í—ã–¥–∞—á–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞
        –¢–æ–ª—å–∫–æ –æ—Ç —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å –≤–∞–ª–∏–¥–Ω—ã–º –¢–ó
        """
        if not self.monitoring_active:
            print(f"‚ùå –û—Ç–∫–∞–∑–∞–Ω–æ: –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
            return False
        
        file_path = Path(file_path).resolve()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∑–æ–Ω–µ
        if not self._is_protected(file_path):
            print(f"‚ö†Ô∏è –§–∞–π–ª {file_path} –Ω–µ –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∑–æ–Ω–µ")
            return True  # –†–∞–∑—Ä–µ—à–∞–µ–º, –Ω–æ –Ω–µ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º
        
        with self.permission_lock:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ
            permission = {
                'file_path': str(file_path),
                'task_id': task_id,
                'agent_name': agent_name,
                'granted_at': datetime.now(),
                'expires_at': datetime.fromtimestamp(time.time() + duration_seconds),
                'status': 'active'
            }
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç–∏
            self.active_permissions[str(file_path)] = permission
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
            self._save_permission(permission)
            
            # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º —Ñ–∞–π–ª
            self._set_writable(file_path)
            
            print(f"‚úÖ –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ: {file_path} –¥–ª—è {agent_name} (–¢–ó: {task_id})")
            self.log_access(str(file_path), "PERMISSION_GRANTED", task_id, True)
            
            return True
    
    def revoke_permission(self, file_path: str, task_id: Optional[str] = None):
        """–û—Ç–∑—ã–≤ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å"""
        file_path = str(Path(file_path).resolve())
        
        with self.permission_lock:
            if file_path in self.active_permissions:
                if task_id and self.active_permissions[file_path]['task_id'] != task_id:
                    return False
                
                del self.active_permissions[file_path]
                self._set_readonly(Path(file_path))
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
                conn = sqlite3.connect(self.db_path)
                cursor = conn.cursor()
                cursor.execute(
                    "UPDATE permissions SET status = 'revoked' WHERE file_path = ? AND status = 'active'",
                    (file_path,)
                )
                conn.commit()
                conn.close()
                
                print(f"üîí –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –æ—Ç–æ–∑–≤–∞–Ω–æ: {file_path}")
                self.log_access(file_path, "PERMISSION_REVOKED", task_id, True)
                return True
        
        return False
    
    def check_permission(self, file_path: str) -> Dict:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∑–∞–ø–∏—Å—å"""
        file_path = str(Path(file_path).resolve())
        
        with self.permission_lock:
            if file_path in self.active_permissions:
                perm = self.active_permissions[file_path]
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
                if datetime.now() < perm['expires_at']:
                    return {
                        'allowed': True,
                        'task_id': perm['task_id'],
                        'agent': perm['agent_name'],
                        'expires_in': (perm['expires_at'] - datetime.now()).seconds
                    }
                else:
                    # –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∏—Å—Ç–µ–∫–ª–æ
                    self.revoke_permission(file_path)
        
        return {
            'allowed': False,
            'reason': 'No active permission or monitoring is down'
        }
    
    def _is_protected(self, file_path: Path) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ —Ñ–∞–π–ª –≤ –∑–∞—â–∏—â–µ–Ω–Ω–æ–π –∑–æ–Ω–µ"""
        file_path = file_path.resolve()
        for protected_dir in self.protected_dirs:
            try:
                file_path.relative_to(protected_dir)
                return True
            except ValueError:
                continue
        return False
    
    def _save_permission(self, permission: Dict):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –≤ –ë–î"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO permissions 
            (file_path, task_id, granted_at, expires_at, agent_name, permission_type, status)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        ''', (
            permission['file_path'],
            permission['task_id'],
            permission['granted_at'],
            permission['expires_at'],
            permission['agent_name'],
            'write',
            permission['status']
        ))
        
        conn.commit()
        conn.close()
    
    def log_access(self, file_path: str, action: str, task_id: Optional[str], 
                   success: bool, error_msg: Optional[str] = None):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO access_log (file_path, action, task_id, timestamp, success, error_msg)
            VALUES (?, ?, ?, ?, ?, ?)
        ''', (file_path, action, task_id, datetime.now(), success, error_msg))
        
        conn.commit()
        conn.close()
    
    def cleanup_expired(self):
        """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π"""
        with self.permission_lock:
            expired = []
            for file_path, perm in self.active_permissions.items():
                if datetime.now() >= perm['expires_at']:
                    expired.append(file_path)
            
            for file_path in expired:
                self.revoke_permission(file_path)
    
    def get_status(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã"""
        with self.permission_lock:
            return {
                'monitoring_active': self.monitoring_active,
                'protected_dirs': [str(d) for d in self.protected_dirs],
                'active_permissions': len(self.active_permissions),
                'last_heartbeat': self.last_heartbeat,
                'permissions': [
                    {
                        'file': p['file_path'],
                        'agent': p['agent_name'],
                        'task': p['task_id'],
                        'expires_in': (p['expires_at'] - datetime.now()).seconds
                    }
                    for p in self.active_permissions.values()
                ]
            }

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
protection_system = None

def init_protection():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞—â–∏—Ç—ã"""
    global protection_system
    if not protection_system:
        protection_system = FileProtectionSystem()
    return protection_system

if __name__ == "__main__":
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫
    system = init_protection()
    print("üîê File Protection System initialized")
    print(f"Status: {json.dumps(system.get_status(), indent=2, default=str)}")