#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
"""

import asyncio
import aiohttp
import websockets
import json
import time
from pathlib import Path

async def test_websocket():
    """–¢–µ—Å—Ç WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ WebSocket...")
    
    try:
        async with websockets.connect('ws://localhost:8765/monitoring') as websocket:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message = await websocket.recv()
            data = json.loads(message)
            print(f"‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω: {data['message']}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ping
            await websocket.send(json.dumps({'type': 'ping'}))
            response = await websocket.recv()
            pong = json.loads(response)
            print(f"‚úÖ Ping-Pong: {pong['type']}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å
            await websocket.send(json.dumps({'type': 'get_status'}))
            status = await websocket.recv()
            status_data = json.loads(status)
            print(f"‚úÖ –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã: {status_data['type']}")
            
            return True
    except Exception as e:
        print(f"‚ùå WebSocket –æ—à–∏–±–∫–∞: {e}")
        return False

async def test_rest_api():
    """–¢–µ—Å—Ç REST API endpoints"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ REST API...")
    
    endpoints = [
        ('GET', '/api/monitoring/file-changes', None),
        ('GET', '/api/monitoring/syntax-check', None),
        ('GET', '/api/monitoring/security-scan', None),
        ('GET', '/api/monitoring/compliance/ISO27001', None),
        ('GET', '/api/monitoring/compliance/ITIL4', None),
        ('GET', '/api/monitoring/compliance/COBIT', None),
        ('GET', '/api/monitoring/integration-test', None),
        ('GET', '/api/monitoring/status', None),
        ('GET', '/api/monitoring/metrics', None),
    ]
    
    async with aiohttp.ClientSession() as session:
        for method, endpoint, data in endpoints:
            url = f'http://localhost:8766{endpoint}'
            try:
                if method == 'GET':
                    async with session.get(url) as response:
                        if response.status == 200:
                            if endpoint != '/api/monitoring/metrics':
                                result = await response.json()
                                print(f"‚úÖ {endpoint}: OK")
                            else:
                                result = await response.text()
                                print(f"‚úÖ {endpoint}: Metrics available")
                        else:
                            print(f"‚ùå {endpoint}: Status {response.status}")
                elif method == 'POST':
                    async with session.post(url, json=data) as response:
                        if response.status == 200:
                            result = await response.json()
                            print(f"‚úÖ {endpoint}: OK")
                        else:
                            print(f"‚ùå {endpoint}: Status {response.status}")
            except Exception as e:
                print(f"‚ùå {endpoint}: {e}")

async def test_file_watcher():
    """–¢–µ—Å—Ç —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ File Watcher...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    test_file = Path('/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/test_monitoring_file.txt')
    
    async with aiohttp.ClientSession() as session:
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
        await session.get('http://localhost:8766/api/monitoring/file-changes')
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª
        test_file.write_text('Test content')
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: {test_file}")
        
        # –ñ–¥–µ–º –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await asyncio.sleep(2)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        async with session.get('http://localhost:8766/api/monitoring/file-changes') as response:
            changes = await response.json()
            if changes:
                print(f"‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(changes)} –∏–∑–º–µ–Ω–µ–Ω–∏–π")
                for change in changes[:3]:
                    print(f"   - {change['type']}: {Path(change['path']).name}")
            else:
                print("‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —Ñ–∞–π–ª –≤ –∏–≥–Ω–æ—Ä-–ª–∏—Å—Ç–µ)")
        
        # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
        if test_file.exists():
            test_file.unlink()
            print(f"‚úÖ –£–¥–∞–ª–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª")

async def test_agent_integration():
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å –∞–≥–µ–Ω—Ç–∞–º–∏...")
    
    async with aiohttp.ClientSession() as session:
        # –¢–µ—Å—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        validation_data = {
            'agents': ['ResearchAgent', 'ReviewerAgent'],
            'context': {'test': True}
        }
        
        async with session.post('http://localhost:8766/api/agents/validate', 
                               json=validation_data) as response:
            if response.status == 200:
                result = await response.json()
                print(f"‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤: Score {result['score']}%")
            else:
                print(f"‚ùå –í–∞–ª–∏–¥–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤: Status {response.status}")
        
        # –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–¥–∞—á–∏
        process_data = {
            'agent': 'ComposerAgent',
            'file': '/test/file.md',
            'action': 'created'
        }
        
        async with session.post('http://localhost:8766/api/agents/process', 
                               json=process_data) as response:
            if response.status == 200:
                result = await response.json()
                print(f"‚úÖ –ó–∞–¥–∞—á–∞ –∞–≥–µ–Ω—Ç–∞: {result['taskId']} ({result['status']})")
            else:
                print(f"‚ùå –ó–∞–¥–∞—á–∞ –∞–≥–µ–Ω—Ç–∞: Status {response.status}")

async def test_compliance():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Compliance Checker...")
    
    standards = ['ISO27001', 'ITIL4', 'COBIT']
    
    async with aiohttp.ClientSession() as session:
        for standard in standards:
            url = f'http://localhost:8766/api/monitoring/compliance/{standard}'
            async with session.get(url) as response:
                if response.status == 200:
                    result = await response.json()
                    status = "‚úÖ" if result['compliant'] else "‚ö†Ô∏è"
                    print(f"{status} {standard}: Score {result['score']:.1f}%")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –ø—Ä–æ–≤–µ—Ä–æ–∫
                    if 'checks' in result:
                        for check, passed in result['checks'].items():
                            check_status = "‚úì" if passed else "‚úó"
                            print(f"    {check_status} {check}")
                else:
                    print(f"‚ùå {standard}: Status {response.status}")

async def test_security_scan():
    """–¢–µ—Å—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Security Scanner...")
    
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8766/api/monitoring/security-scan') as response:
            if response.status == 200:
                result = await response.json()
                if result['vulnerabilities']:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {result['total']} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π:")
                    for vuln in result['vulnerabilities'][:5]:
                        print(f"   - {vuln.get('severity', 'UNKNOWN')}: {vuln['message']}")
                        print(f"     –§–∞–π–ª: {Path(vuln['file']).name}:{vuln.get('line', '?')}")
                else:
                    print("‚úÖ –£—è–∑–≤–∏–º–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚ùå Security scan: Status {response.status}")

async def test_syntax_check():
    """–¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Syntax Checker...")
    
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8766/api/monitoring/syntax-check') as response:
            if response.status == 200:
                result = await response.json()
                if result['errors']:
                    print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω–æ {result['total']} —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫:")
                    for error in result['errors'][:5]:
                        print(f"   - {Path(error['file']).name}:{error.get('line', '?')}")
                        print(f"     {error['message']}")
                else:
                    print("‚úÖ –°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            else:
                print(f"‚ùå Syntax check: Status {response.status}")

async def test_metrics():
    """–¢–µ—Å—Ç Prometheus –º–µ—Ç—Ä–∏–∫"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Prometheus –º–µ—Ç—Ä–∏–∫...")
    
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8766/api/monitoring/metrics') as response:
            if response.status == 200:
                metrics = await response.text()
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
                key_metrics = [
                    'galaxy_file_changes_total',
                    'galaxy_syntax_errors',
                    'galaxy_security_issues',
                    'galaxy_compliance_score',
                    'galaxy_websocket_connections',
                    'galaxy_api_requests_total',
                    'galaxy_check_duration_seconds'
                ]
                
                for metric in key_metrics:
                    if metric in metrics:
                        print(f"‚úÖ {metric}: –î–æ—Å—Ç—É–ø–Ω–∞")
                    else:
                        print(f"‚ùå {metric}: –ù–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                print(f"‚ùå Metrics: Status {response.status}")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë    GALAXY MONITORING SYSTEM TEST       ‚ïë
    ‚ïë    –ü–æ–ª–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤     ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    # –î–∞–µ–º —Å–µ—Ä–≤–µ—Ä—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞...")
    await asyncio.sleep(2)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    await test_websocket()
    await test_rest_api()
    await test_file_watcher()
    await test_agent_integration()
    await test_compliance()
    await test_security_scan()
    await test_syntax_check()
    await test_metrics()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    async with aiohttp.ClientSession() as session:
        async with session.get('http://localhost:8766/api/monitoring/status') as response:
            if response.status == 200:
                status = await response.json()
                print("\nüìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã:")
                print(f"   WebSocket –∫–ª–∏–µ–Ω—Ç—ã: {status['websocket_clients']}")
                print(f"   File Observer: {'–ê–∫—Ç–∏–≤–µ–Ω' if status['file_observer_active'] else '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}")
                print(f"   –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –ø—É—Ç–∏: {len(status['watched_paths'])}")
                print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: {status['recent_changes']}")

if __name__ == '__main__':
    asyncio.run(main())