#!/usr/bin/env python3
"""
üî• –†–ï–ê–õ–¨–ù–ê–Ø –°–ò–°–¢–ï–ú–ê –ü–ê–ú–Ø–¢–ò - –ù–ï –ó–ê–ì–õ–£–®–ö–ê!
–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –í–°–Å –º–µ–∂–¥—É —Å–µ—Å—Å–∏—è–º–∏ –ò–ò
"""

import json
import time
import hashlib
import sqlite3
from pathlib import Path
from datetime import datetime

class RealMemorySystem:
    def __init__(self):
        self.memory_dir = Path.home() / '.claude' / 'real_memory'
        self.memory_dir.mkdir(exist_ok=True, parents=True)
        
        self.db_path = self.memory_dir / 'memory.db'
        self.context_file = self.memory_dir / 'current_context.json'
        self.session_file = self.memory_dir / 'session_data.json'
        
        self.init_database()
        self.session_id = self.generate_session_id()
        
    def init_database(self):
        """–°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–∞–º—è—Ç–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS conversations (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                session_id TEXT,
                timestamp REAL,
                user_message TEXT,
                ai_response TEXT,
                context_data TEXT
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —Ñ–∞–∫—Ç–æ–≤ –∏ –∑–Ω–∞–Ω–∏–π
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS knowledge (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                key TEXT UNIQUE,
                value TEXT,
                importance INTEGER DEFAULT 5,
                last_updated REAL,
                access_count INTEGER DEFAULT 0
            )
        ''')
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤ –∏ –∑–∞–¥–∞—á
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS projects (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                name TEXT,
                description TEXT,
                status TEXT,
                files TEXT,
                last_activity REAL
            )
        ''')
        
        conn.commit()
        conn.close()
        
    def generate_session_id(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID —Å–µ—Å—Å–∏–∏"""
        timestamp = str(time.time())
        return hashlib.md5(timestamp.encode()).hexdigest()[:8]
        
    def save_conversation(self, user_msg, ai_response):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT INTO conversations (session_id, timestamp, user_message, ai_response)
            VALUES (?, ?, ?, ?)
        ''', (self.session_id, time.time(), user_msg, ai_response))
        
        conn.commit()
        conn.close()
        
    def save_knowledge(self, key, value, importance=5):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–Ω–∞–Ω–∏–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO knowledge 
            (key, value, importance, last_updated, access_count)
            VALUES (?, ?, ?, ?, COALESCE((SELECT access_count FROM knowledge WHERE key = ?), 0))
        ''', (key, value, importance, time.time(), key))
        
        conn.commit()
        conn.close()
        
    def get_knowledge(self, key):
        """–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞–Ω–∏–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('SELECT value FROM knowledge WHERE key = ?', (key,))
        result = cursor.fetchone()
        
        if result:
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –¥–æ—Å—Ç—É–ø–∞
            cursor.execute('''
                UPDATE knowledge SET access_count = access_count + 1 
                WHERE key = ?
            ''', (key,))
            conn.commit()
            
        conn.close()
        return result[0] if result else None
        
    def save_context(self, context_data):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        context = {
            'session_id': self.session_id,
            'timestamp': time.time(),
            'datetime': datetime.now().isoformat(),
            'data': context_data
        }
        
        with open(self.context_file, 'w') as f:
            json.dump(context, f, indent=2)
            
    def load_context(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç"""
        if self.context_file.exists():
            with open(self.context_file, 'r') as f:
                return json.load(f)
        return None
        
    def get_recent_conversations(self, limit=10):
        """–ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∏"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT user_message, ai_response, timestamp 
            FROM conversations 
            ORDER BY timestamp DESC 
            LIMIT ?
        ''', (limit,))
        
        results = cursor.fetchall()
        conn.close()
        
        return results
        
    def search_knowledge(self, query):
        """–ü–æ–∏—Å–∫ –ø–æ –∑–Ω–∞–Ω–∏—è–º"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            SELECT key, value, importance 
            FROM knowledge 
            WHERE key LIKE ? OR value LIKE ?
            ORDER BY importance DESC, access_count DESC
        ''', (f'%{query}%', f'%{query}%'))
        
        results = cursor.fetchall()
        conn.close()
        
        return results
        
    def save_project_info(self, name, description, files, status='active'):
        """–°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–µ–∫—Ç–µ"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()
        
        cursor.execute('''
            INSERT OR REPLACE INTO projects 
            (name, description, status, files, last_activity)
            VALUES (?, ?, ?, ?, ?)
        ''', (name, description, status, json.dumps(files), time.time()))
        
        conn.commit()
        conn.close()
        
    def load_everything(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –í–°–Å –∏–∑ –ø–∞–º—è—Ç–∏ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"""
        data = {
            'context': self.load_context(),
            'recent_conversations': self.get_recent_conversations(20),
            'key_knowledge': self.search_knowledge('Galaxy'),
            'session_id': self.session_id
        }
        
        return data

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
memory = RealMemorySystem()

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –∑–Ω–∞–Ω–∏—è
memory.save_knowledge('user_name', '–ê–ª—å–±–µ—Ä—Ç', 10)
memory.save_knowledge('main_project', 'Galaxy Developers AI Chat interface', 10)
memory.save_knowledge('backend_api', 'Gemini API –≤ GalaxyDevelopersAI-backend.js', 9)
memory.save_knowledge('design_principle', '–ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –º—É–ª—è–∂–∏, —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª', 10)
memory.save_knowledge('interface_path', '/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/interface/', 9)
memory.save_knowledge('current_state', 'Generation Settings –ø–∞–Ω–µ–ª—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞ —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏', 8)

print("üî• –†–ï–ê–õ–¨–ù–ê–Ø –ü–ê–ú–Ø–¢–¨ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ò–†–û–í–ê–ù–ê!")
print(f"Session ID: {memory.session_id}")
print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {memory.db_path}")