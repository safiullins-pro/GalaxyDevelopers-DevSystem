#!/bin/bash

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–µ—Ä–µ–∑ Gemini –∏–∑ –∫–æ–Ω—Ç—É—Ä–∞ GalaxyDevelopers
# –ê–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã –∏–∑ –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã

# –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
source "$(dirname "$0")/config.sh"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -lt 2 ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 <—Ñ–∞–π–ª_–∏–ª–∏_–ø–∞–ø–∫–∞> <–ø—Ä–æ–º–ø—Ç>"
    echo "–ü—Ä–∏–º–µ—Ä: $0 /path/to/file.txt '–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç –∫–æ–¥'"
    exit 1
fi

INPUT_PATH="$1"
PROMPT="$2"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
if ! check_gemini_api; then
    echo "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ GEMINI_API_KEY:"
    echo "export GEMINI_API_KEY='your-api-key'"
    exit 1
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –≤—ã—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
OUTPUT_FILE="$GEMINI_OUTPUTS/gemini_${TIMESTAMP}.md"

gemini_log "üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–µ—Ä–µ–∑ Gemini"
gemini_log "üìÅ –í—Ö–æ–¥: $INPUT_PATH"
gemini_log "üí¨ –ü—Ä–æ–º–ø—Ç: $PROMPT"

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ Gemini
process_with_gemini() {
    local content="$1"
    local prompt="$2"
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (30KB –¥–ª—è Gemini)
    content=$(echo "$content" | head -c 30000)
    
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    content=$(echo "$content" | sed 's/"/\\"/g' | tr '\n' ' ')
    prompt=$(echo "$prompt" | sed 's/"/\\"/g')
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ Gemini
    response=$(curl -s \
        -H "Content-Type: application/json" \
        -d "{
            \"contents\": [{
                \"parts\": [{
                    \"text\": \"${prompt}\\n\\n${content}\"
                }]
            }]
        }" \
        "https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=$GEMINI_API_KEY")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –æ—Ç–≤–µ—Ç–∞
    echo "$response" | python3 -c "
import sys, json
try:
    data = json.load(sys.stdin)
    text = data.get('candidates', [{}])[0].get('content', {}).get('parts', [{}])[0].get('text', 'No response')
    print(text)
except:
    print('Error parsing response')
"
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –≤—Ö–æ–¥–∞
if [ -f "$INPUT_PATH" ]; then
    # –≠—Ç–æ —Ñ–∞–π–ª
    gemini_log "üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: $(basename "$INPUT_PATH")"
    
    content=$(cat "$INPUT_PATH")
    result=$(process_with_gemini "$content" "$PROMPT")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    cat > "$OUTPUT_FILE" << EOF
# Gemini Analysis Result
**Date**: $(date)
**File**: $INPUT_PATH
**Prompt**: $PROMPT

---

## Result:

$result

---
*Generated by GalaxyDevelopers Gemini System*
EOF
    
elif [ -d "$INPUT_PATH" ]; then
    # –≠—Ç–æ –ø–∞–ø–∫–∞
    gemini_log "üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏: $INPUT_PATH"
    
    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã
    combined_content=""
    file_count=0
    
    for file in "$INPUT_PATH"/*.{txt,md,py,js,sh,json} 2>/dev/null; do
        if [ -f "$file" ]; then
            ((file_count++))
            filename=$(basename "$file")
            gemini_log "  ‚Ä¢ –î–æ–±–∞–≤–ª—è—é: $filename"
            
            combined_content+="\\n\\n=== FILE: $filename ===\\n"
            combined_content+=$(cat "$file" | head -c 5000)  # –õ–∏–º–∏—Ç –Ω–∞ —Ñ–∞–π–ª
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
            if [ ${#combined_content} -gt 25000 ]; then
                gemini_log "‚ö†Ô∏è –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —Ä–∞–∑–º–µ—Ä–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é..."
                break
            fi
        fi
    done
    
    gemini_log "üìä –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: $file_count"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Gemini
    result=$(process_with_gemini "$combined_content" "$PROMPT")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    cat > "$OUTPUT_FILE" << EOF
# Gemini Analysis Result
**Date**: $(date)
**Directory**: $INPUT_PATH
**Files processed**: $file_count
**Prompt**: $PROMPT

---

## Result:

$result

---
*Generated by GalaxyDevelopers Gemini System*
EOF

else
    gemini_log "‚ùå –ü—É—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω: $INPUT_PATH"
    exit 1
fi

# –†–µ–∑—É–ª—å—Ç–∞—Ç
gemini_log "‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
gemini_log "üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: $OUTPUT_FILE"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
echo ""
echo "Preview:"
echo "--------"
head -20 "$OUTPUT_FILE"
echo "..."
echo ""
echo "Full result: $OUTPUT_FILE"

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
echo ""
echo "–û—Ç–∫—Ä—ã—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç? (y/n)"
read -n 1 -r
echo ""
if [[ $REPLY =~ ^[Yy]$ ]]; then
    open "$OUTPUT_FILE"
fi