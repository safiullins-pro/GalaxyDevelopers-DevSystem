#!/usr/bin/env python3
"""
üé≠ WORKFLOW ORCHESTRATOR - –î–∏—Ä–∏–∂—ë—Ä —Å–ª–æ–∂–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
–£–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–≥–æ—à–∞–≥–æ–≤—ã–º–∏ workflow –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏
by FORGE-2267
"""

import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, List, Any, Optional, Callable
from enum import Enum
from dataclasses import dataclass, field
import logging

from unified_agent_registry import get_registry, AgentCapability

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('WORKFLOW_ORCHESTRATOR')


class WorkflowStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã workflow"""
    PENDING = "pending"
    RUNNING = "running"
    COMPLETED = "completed"
    FAILED = "failed"
    CANCELLED = "cancelled"
    ROLLBACK = "rollback"


class StepStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —à–∞–≥–æ–≤"""
    PENDING = "pending"
    RUNNING = "running"
    SUCCESS = "success"
    FAILED = "failed"
    SKIPPED = "skipped"
    ROLLED_BACK = "rolled_back"


@dataclass
class WorkflowStep:
    """–®–∞–≥ workflow"""
    id: str
    name: str
    capability: AgentCapability
    task: Dict[str, Any]
    status: StepStatus = StepStatus.PENDING
    result: Optional[Dict[str, Any]] = None
    error: Optional[str] = None
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    dependencies: List[str] = field(default_factory=list)
    rollback_task: Optional[Dict[str, Any]] = None


@dataclass
class Workflow:
    """–û–ø–∏—Å–∞–Ω–∏–µ workflow"""
    id: str
    name: str
    type: str
    status: WorkflowStatus
    steps: List[WorkflowStep]
    context: Dict[str, Any]
    created_at: datetime
    started_at: Optional[datetime] = None
    completed_at: Optional[datetime] = None
    error: Optional[str] = None
    results: Dict[str, Any] = field(default_factory=dict)


class WorkflowOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä workflow"""
    
    def __init__(self):
        self.workflows: Dict[str, Workflow] = {}
        self.running_workflows: Dict[str, asyncio.Task] = {}
        self.workflow_templates = self._init_templates()
        self.registry = None
        
        logger.info("üé≠ Workflow Orchestrator initialized")
    
    def _init_templates(self) -> Dict[str, Callable]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–æ–≤ workflow"""
        return {
            'full_document_pipeline': self._create_full_document_pipeline,
            'error_analysis_and_fix': self._create_error_analysis_workflow,
            'code_review_and_improve': self._create_code_review_workflow,
            'monitoring_to_docs': self._create_monitoring_to_docs_workflow,
            'emergency_fix': self._create_emergency_fix_workflow
        }
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        self.registry = await get_registry()
        logger.info("‚úÖ Orchestrator initialized with agent registry")
    
    async def create_workflow(
        self,
        workflow_type: str,
        context: Dict[str, Any]
    ) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ workflow"""
        if workflow_type not in self.workflow_templates:
            raise ValueError(f"Unknown workflow type: {workflow_type}")
        
        # –°–æ–∑–¥–∞—ë–º workflow –∏–∑ —à–∞–±–ª–æ–Ω–∞
        workflow = self.workflow_templates[workflow_type](context)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º workflow
        self.workflows[workflow.id] = workflow
        
        logger.info(f"üìã Created workflow {workflow.id} ({workflow_type})")
        return workflow.id
    
    async def start_workflow(self, workflow_id: str) -> bool:
        """–ó–∞–ø—É—Å–∫ workflow"""
        if workflow_id not in self.workflows:
            logger.error(f"Workflow {workflow_id} not found")
            return False
        
        workflow = self.workflows[workflow_id]
        
        if workflow.status != WorkflowStatus.PENDING:
            logger.warning(f"Workflow {workflow_id} already started")
            return False
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –∑–∞–¥–∞—á–µ
        task = asyncio.create_task(self._execute_workflow(workflow))
        self.running_workflows[workflow_id] = task
        
        workflow.status = WorkflowStatus.RUNNING
        workflow.started_at = datetime.now()
        
        logger.info(f"üöÄ Started workflow {workflow_id}")
        return True
    
    async def _execute_workflow(self, workflow: Workflow):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow"""
        try:
            # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥–∏ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –∏–ª–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            for step in workflow.steps:
                if step.status != StepStatus.PENDING:
                    continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
                if not self._check_dependencies(workflow, step):
                    step.status = StepStatus.SKIPPED
                    continue
                
                # –í—ã–ø–æ–ª–Ω—è–µ–º —à–∞–≥
                await self._execute_step(workflow, step)
                
                # –ï—Å–ª–∏ —à–∞–≥ –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è –∏ –Ω–µ—Ç rollback - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                if step.status == StepStatus.FAILED:
                    if not await self._handle_step_failure(workflow, step):
                        workflow.status = WorkflowStatus.FAILED
                        workflow.error = f"Step {step.name} failed: {step.error}"
                        break
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
            if workflow.status == WorkflowStatus.RUNNING:
                if all(s.status in [StepStatus.SUCCESS, StepStatus.SKIPPED] for s in workflow.steps):
                    workflow.status = WorkflowStatus.COMPLETED
                else:
                    workflow.status = WorkflowStatus.FAILED
            
            workflow.completed_at = datetime.now()
            
            logger.info(f"‚úÖ Workflow {workflow.id} completed with status {workflow.status}")
            
        except Exception as e:
            workflow.status = WorkflowStatus.FAILED
            workflow.error = str(e)
            logger.error(f"‚ùå Workflow {workflow.id} failed: {e}")
        
        finally:
            # –£–¥–∞–ª—è–µ–º –∏–∑ running
            if workflow.id in self.running_workflows:
                del self.running_workflows[workflow.id]
    
    async def _execute_step(self, workflow: Workflow, step: WorkflowStep):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —à–∞–≥–∞ workflow"""
        logger.info(f"‚ñ∂Ô∏è Executing step {step.name}")
        
        step.status = StepStatus.RUNNING
        step.started_at = datetime.now()
        
        try:
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç workflow –≤ –∑–∞–¥–∞—á—É
            task = {
                **step.task,
                'workflow_id': workflow.id,
                'step_id': step.id,
                'context': workflow.context
            }
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —á–µ—Ä–µ–∑ —Ä–µ–µ—Å—Ç—Ä –∞–≥–µ–Ω—Ç–æ–≤
            result = await self.registry.execute_task(
                step.capability,
                task
            )
            
            if result['success']:
                step.status = StepStatus.SUCCESS
                step.result = result
                workflow.results[step.id] = result['result']
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤
                if 'context_update' in result.get('result', {}):
                    workflow.context.update(result['result']['context_update'])
                
                logger.info(f"‚úÖ Step {step.name} completed successfully")
            else:
                step.status = StepStatus.FAILED
                step.error = result.get('error', 'Unknown error')
                logger.error(f"‚ùå Step {step.name} failed: {step.error}")
            
        except Exception as e:
            step.status = StepStatus.FAILED
            step.error = str(e)
            logger.error(f"‚ùå Step {step.name} error: {e}")
        
        finally:
            step.completed_at = datetime.now()
    
    def _check_dependencies(self, workflow: Workflow, step: WorkflowStep) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π —à–∞–≥–∞"""
        for dep_id in step.dependencies:
            dep_step = next((s for s in workflow.steps if s.id == dep_id), None)
            if not dep_step or dep_step.status != StepStatus.SUCCESS:
                return False
        return True
    
    async def _handle_step_failure(self, workflow: Workflow, step: WorkflowStep) -> bool:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–≤–∞–ª–∞ —à–∞–≥–∞"""
        if step.rollback_task:
            logger.info(f"üîÑ Rolling back step {step.name}")
            
            try:
                # –í—ã–ø–æ–ª–Ω—è–µ–º rollback
                result = await self.registry.execute_task(
                    step.capability,
                    step.rollback_task
                )
                
                if result['success']:
                    step.status = StepStatus.ROLLED_BACK
                    logger.info(f"‚úÖ Rollback successful for {step.name}")
                    return True
                else:
                    logger.error(f"‚ùå Rollback failed for {step.name}")
                    return False
                    
            except Exception as e:
                logger.error(f"‚ùå Rollback error for {step.name}: {e}")
                return False
        
        return False
    
    # –®–∞–±–ª–æ–Ω—ã workflow
    
    def _create_full_document_pipeline(self, context: Dict[str, Any]) -> Workflow:
        """–ü–æ–ª–Ω—ã–π pipeline —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        workflow_id = str(uuid.uuid4())
        
        steps = [
            WorkflowStep(
                id="research",
                name="Research Topic",
                capability=AgentCapability.RESEARCH,
                task={
                    'type': 'research',
                    'query': context.get('topic', 'Documentation topic')
                }
            ),
            WorkflowStep(
                id="compose",
                name="Compose Document",
                capability=AgentCapability.COMPOSE,
                task={
                    'type': 'compose',
                    'template': context.get('template', 'default')
                },
                dependencies=["research"]
            ),
            WorkflowStep(
                id="review",
                name="Review Document",
                capability=AgentCapability.REVIEW,
                task={
                    'type': 'review',
                    'standards': context.get('standards', ['ISO27001'])
                },
                dependencies=["compose"]
            ),
            WorkflowStep(
                id="publish",
                name="Publish Document",
                capability=AgentCapability.PUBLISH,
                task={
                    'type': 'publish',
                    'channels': context.get('channels', ['local'])
                },
                dependencies=["review"]
            )
        ]
        
        return Workflow(
            id=workflow_id,
            name="Full Document Pipeline",
            type="full_document_pipeline",
            status=WorkflowStatus.PENDING,
            steps=steps,
            context=context,
            created_at=datetime.now()
        )
    
    def _create_error_analysis_workflow(self, context: Dict[str, Any]) -> Workflow:
        """Workflow –∞–Ω–∞–ª–∏–∑–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫"""
        workflow_id = str(uuid.uuid4())
        
        steps = [
            WorkflowStep(
                id="analyze_error",
                name="Analyze Error",
                capability=AgentCapability.ANALYZE,
                task={
                    'type': 'analyze',
                    'error': context.get('error'),
                    'file_path': context.get('file_path')
                }
            ),
            WorkflowStep(
                id="research_fix",
                name="Research Fix",
                capability=AgentCapability.RESEARCH,
                task={
                    'type': 'research',
                    'query': 'fix for error'
                },
                dependencies=["analyze_error"]
            ),
            WorkflowStep(
                id="compose_fix",
                name="Compose Fix",
                capability=AgentCapability.COMPOSE,
                task={
                    'type': 'compose',
                    'template': 'code_fix'
                },
                dependencies=["research_fix"]
            ),
            WorkflowStep(
                id="review_fix",
                name="Review Fix",
                capability=AgentCapability.REVIEW,
                task={
                    'type': 'review',
                    'check_type': 'code_quality'
                },
                dependencies=["compose_fix"]
            )
        ]
        
        return Workflow(
            id=workflow_id,
            name="Error Analysis and Fix",
            type="error_analysis_and_fix",
            status=WorkflowStatus.PENDING,
            steps=steps,
            context=context,
            created_at=datetime.now()
        )
    
    def _create_code_review_workflow(self, context: Dict[str, Any]) -> Workflow:
        """Workflow review –∏ —É–ª—É—á—à–µ–Ω–∏—è –∫–æ–¥–∞"""
        workflow_id = str(uuid.uuid4())
        
        steps = [
            WorkflowStep(
                id="analyze_code",
                name="Analyze Code",
                capability=AgentCapability.ANALYZE,
                task={
                    'type': 'analyze',
                    'file_path': context.get('file_path'),
                    'analysis_type': 'quality'
                }
            ),
            WorkflowStep(
                id="review_security",
                name="Security Review",
                capability=AgentCapability.REVIEW,
                task={
                    'type': 'review',
                    'check_type': 'security'
                },
                dependencies=["analyze_code"]
            ),
            WorkflowStep(
                id="compose_improvements",
                name="Compose Improvements",
                capability=AgentCapability.COMPOSE,
                task={
                    'type': 'compose',
                    'template': 'code_improvements'
                },
                dependencies=["review_security"]
            )
        ]
        
        return Workflow(
            id=workflow_id,
            name="Code Review and Improve",
            type="code_review_and_improve",
            status=WorkflowStatus.PENDING,
            steps=steps,
            context=context,
            created_at=datetime.now()
        )
    
    def _create_monitoring_to_docs_workflow(self, context: Dict[str, Any]) -> Workflow:
        """Workflow –æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
        workflow_id = str(uuid.uuid4())
        
        steps = [
            WorkflowStep(
                id="analyze_metrics",
                name="Analyze Metrics",
                capability=AgentCapability.ANALYZE,
                task={
                    'type': 'analyze',
                    'metrics': context.get('metrics'),
                    'analysis_type': 'performance'
                }
            ),
            WorkflowStep(
                id="compose_report",
                name="Compose Report",
                capability=AgentCapability.COMPOSE,
                task={
                    'type': 'compose',
                    'template': 'monitoring_report'
                },
                dependencies=["analyze_metrics"]
            ),
            WorkflowStep(
                id="publish_report",
                name="Publish Report",
                capability=AgentCapability.PUBLISH,
                task={
                    'type': 'publish',
                    'channels': ['git', 'slack']
                },
                dependencies=["compose_report"]
            )
        ]
        
        return Workflow(
            id=workflow_id,
            name="Monitoring to Documentation",
            type="monitoring_to_docs",
            status=WorkflowStatus.PENDING,
            steps=steps,
            context=context,
            created_at=datetime.now()
        )
    
    def _create_emergency_fix_workflow(self, context: Dict[str, Any]) -> Workflow:
        """–≠–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π workflow –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        workflow_id = str(uuid.uuid4())
        
        steps = [
            WorkflowStep(
                id="emergency_analysis",
                name="Emergency Analysis",
                capability=AgentCapability.ANALYZE,
                task={
                    'type': 'analyze',
                    'priority': 'critical',
                    'issue': context.get('issue')
                }
            ),
            WorkflowStep(
                id="quick_fix",
                name="Apply Quick Fix",
                capability=AgentCapability.COMPOSE,
                task={
                    'type': 'compose',
                    'template': 'emergency_fix'
                },
                dependencies=["emergency_analysis"],
                rollback_task={
                    'type': 'rollback',
                    'restore_point': context.get('backup_id')
                }
            )
        ]
        
        return Workflow(
            id=workflow_id,
            name="Emergency Fix",
            type="emergency_fix",
            status=WorkflowStatus.PENDING,
            steps=steps,
            context=context,
            created_at=datetime.now()
        )
    
    def get_workflow_status(self, workflow_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—É—Å workflow"""
        if workflow_id not in self.workflows:
            return None
        
        workflow = self.workflows[workflow_id]
        
        return {
            'id': workflow.id,
            'name': workflow.name,
            'type': workflow.type,
            'status': workflow.status.value,
            'created_at': workflow.created_at.isoformat(),
            'started_at': workflow.started_at.isoformat() if workflow.started_at else None,
            'completed_at': workflow.completed_at.isoformat() if workflow.completed_at else None,
            'steps': [
                {
                    'id': step.id,
                    'name': step.name,
                    'status': step.status.value,
                    'error': step.error
                }
                for step in workflow.steps
            ],
            'results': workflow.results,
            'error': workflow.error
        }
    
    async def cancel_workflow(self, workflow_id: str) -> bool:
        """–û—Ç–º–µ–Ω–∞ workflow"""
        if workflow_id in self.running_workflows:
            task = self.running_workflows[workflow_id]
            task.cancel()
            
            workflow = self.workflows[workflow_id]
            workflow.status = WorkflowStatus.CANCELLED
            workflow.completed_at = datetime.now()
            
            logger.info(f"üõë Cancelled workflow {workflow_id}")
            return True
        
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
orchestrator = None


async def get_orchestrator() -> WorkflowOrchestrator:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä"""
    global orchestrator
    if orchestrator is None:
        orchestrator = WorkflowOrchestrator()
        await orchestrator.initialize()
    return orchestrator


if __name__ == '__main__':
    async def test():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        orch = await get_orchestrator()
        
        # –°–æ–∑–¥–∞—ë–º workflow
        workflow_id = await orch.create_workflow(
            'full_document_pipeline',
            {'topic': 'Test Documentation'}
        )
        
        print(f"Created workflow: {workflow_id}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º workflow
        await orch.start_workflow(workflow_id)
        
        # –ñ–¥—ë–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.sleep(5)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
        status = orch.get_workflow_status(workflow_id)
        print(f"Workflow status: {json.dumps(status, indent=2)}")
    
    asyncio.run(test())