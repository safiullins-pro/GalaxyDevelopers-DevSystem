#!/usr/bin/env python3
"""
üîß ERROR PIPELINE - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç, –∏—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ—Ç –æ—à–∏–±–∫–∏
by FORGE-2267
"""

import asyncio
import json
import re
from datetime import datetime
from typing import Dict, List, Any, Optional, Tuple
from pathlib import Path
import logging
from enum import Enum
from dataclasses import dataclass

from workflow_orchestrator import get_orchestrator
from unified_agent_registry import get_registry, AgentCapability
from context_manager import get_context_manager

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('ERROR_PIPELINE')


class ErrorType(Enum):
    """–¢–∏–ø—ã –æ—à–∏–±–æ–∫"""
    SYNTAX = "syntax"
    RUNTIME = "runtime"
    IMPORT = "import"
    TYPE = "type"
    SECURITY = "security"
    PERFORMANCE = "performance"
    LOGIC = "logic"
    CONFIGURATION = "configuration"
    DEPENDENCY = "dependency"
    UNKNOWN = "unknown"


class ErrorSeverity(Enum):
    """–°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å –æ—à–∏–±–æ–∫"""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"


@dataclass
class ErrorContext:
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏"""
    type: ErrorType
    severity: ErrorSeverity
    file_path: Optional[str]
    line_number: Optional[int]
    error_message: str
    stack_trace: Optional[str]
    timestamp: datetime
    source_system: str
    additional_info: Dict[str, Any]


@dataclass
class ErrorFix:
    """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é"""
    fix_type: str  # 'code', 'config', 'dependency', 'documentation'
    description: str
    code_changes: Optional[Dict[str, str]]  # old -> new
    file_patches: Optional[List[Dict[str, Any]]]
    confidence: float  # 0.0 - 1.0
    estimated_impact: str
    rollback_plan: Optional[Dict[str, Any]]


class ErrorPipeline:
    """Pipeline –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    
    def __init__(self):
        self.orchestrator = None
        self.registry = None
        self.context_manager = None
        
        # –ò—Å—Ç–æ—Ä–∏—è –æ—à–∏–±–æ–∫ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
        self.error_history: List[ErrorContext] = []
        self.fix_history: List[Tuple[ErrorContext, ErrorFix, bool]] = []
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
        self.error_patterns = self._init_error_patterns()
        
        logger.info("üîß Error Pipeline initialized")
    
    async def initialize(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pipeline"""
        self.orchestrator = await get_orchestrator()
        self.registry = await get_registry()
        self.context_manager = get_context_manager()
        
        logger.info("‚úÖ Error Pipeline ready")
    
    def _init_error_patterns(self) -> Dict[ErrorType, List[re.Pattern]]:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–æ–≤ –æ—à–∏–±–æ–∫"""
        return {
            ErrorType.SYNTAX: [
                re.compile(r"SyntaxError:"),
                re.compile(r"unexpected EOF"),
                re.compile(r"invalid syntax"),
                re.compile(r"unexpected indent")
            ],
            ErrorType.IMPORT: [
                re.compile(r"ImportError:"),
                re.compile(r"ModuleNotFoundError:"),
                re.compile(r"cannot import name"),
                re.compile(r"No module named")
            ],
            ErrorType.TYPE: [
                re.compile(r"TypeError:"),
                re.compile(r"AttributeError:"),
                re.compile(r"object has no attribute"),
                re.compile(r"not subscriptable")
            ],
            ErrorType.RUNTIME: [
                re.compile(r"RuntimeError:"),
                re.compile(r"ValueError:"),
                re.compile(r"KeyError:"),
                re.compile(r"IndexError:")
            ],
            ErrorType.SECURITY: [
                re.compile(r"SecurityError:"),
                re.compile(r"PermissionError:"),
                re.compile(r"sql injection", re.I),
                re.compile(r"XSS vulnerability", re.I)
            ],
            ErrorType.PERFORMANCE: [
                re.compile(r"TimeoutError:"),
                re.compile(r"MemoryError:"),
                re.compile(r"maximum recursion depth"),
                re.compile(r"performance degradation", re.I)
            ]
        }
    
    async def process_error(
        self,
        error_data: Dict[str, Any],
        auto_fix: bool = True
    ) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏"""
        logger.info(f"üîç Processing error: {error_data.get('type', 'unknown')}")
        
        # –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
        error_context = self._create_error_context(error_data)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.error_history.append(error_context)
        
        # –°–æ–∑–¥–∞—ë–º memory snapshot
        snapshot = self.context_manager.create_memory_snapshot(
            f"error_{error_context.type.value}",
            f"severity_{error_context.severity.value}"
        )
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
        analysis = await self._analyze_error(error_context)
        
        # –ò—â–µ–º –ø–æ—Ö–æ–∂–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏
        similar_fixes = self._find_similar_fixes(error_context)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        fix = await self._generate_fix(error_context, analysis, similar_fixes)
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –µ—Å–ª–∏ auto_fix
        if auto_fix and fix.confidence > 0.7:
            success = await self._apply_fix(error_context, fix)
        else:
            success = False
            logger.info(f"Auto-fix disabled or low confidence ({fix.confidence})")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.fix_history.append((error_context, fix, success))
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        if success:
            await self._update_documentation(error_context, fix)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        return {
            'error_context': self._error_context_to_dict(error_context),
            'analysis': analysis,
            'fix': self._fix_to_dict(fix),
            'applied': success,
            'snapshot_id': snapshot['id']
        }
    
    def _create_error_context(self, error_data: Dict[str, Any]) -> ErrorContext:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –æ—à–∏–±–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—à–∏–±–∫–∏
        error_type = self._detect_error_type(error_data.get('message', ''))
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å
        severity = self._assess_severity(error_type, error_data)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø—É—Ç—å –∏ –Ω–æ–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        file_path, line_number = self._extract_location(error_data)
        
        return ErrorContext(
            type=error_type,
            severity=severity,
            file_path=file_path,
            line_number=line_number,
            error_message=error_data.get('message', 'Unknown error'),
            stack_trace=error_data.get('stack_trace'),
            timestamp=datetime.now(),
            source_system=error_data.get('source', 'unknown'),
            additional_info=error_data.get('additional_info', {})
        )
    
    def _detect_error_type(self, error_message: str) -> ErrorType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏ –ø–æ —Å–æ–æ–±—â–µ–Ω–∏—é"""
        for error_type, patterns in self.error_patterns.items():
            for pattern in patterns:
                if pattern.search(error_message):
                    return error_type
        return ErrorType.UNKNOWN
    
    def _assess_severity(
        self,
        error_type: ErrorType,
        error_data: Dict[str, Any]
    ) -> ErrorSeverity:
        """–û—Ü–µ–Ω–∫–∞ —Å–µ—Ä—å—ë–∑–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏"""
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∏–ø—ã
        if error_type in [ErrorType.SECURITY, ErrorType.RUNTIME]:
            return ErrorSeverity.CRITICAL
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        message = error_data.get('message', '').lower()
        if any(word in message for word in ['critical', 'fatal', 'emergency']):
            return ErrorSeverity.CRITICAL
        elif any(word in message for word in ['high', 'important', 'major']):
            return ErrorSeverity.HIGH
        elif any(word in message for word in ['medium', 'moderate', 'warning']):
            return ErrorSeverity.MEDIUM
        elif any(word in message for word in ['low', 'minor', 'info']):
            return ErrorSeverity.LOW
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
        return ErrorSeverity.MEDIUM
    
    def _extract_location(
        self,
        error_data: Dict[str, Any]
    ) -> Tuple[Optional[str], Optional[int]]:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ —Ñ–∞–π–ª—É –∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–æ–∫–∏"""
        file_path = error_data.get('file_path')
        line_number = error_data.get('line_number')
        
        # –ü—Ä–æ–±—É–µ–º –∏–∑–≤–ª–µ—á—å –∏–∑ stack trace
        if not file_path and error_data.get('stack_trace'):
            match = re.search(
                r'File "([^"]+)", line (\d+)',
                error_data['stack_trace']
            )
            if match:
                file_path = match.group(1)
                line_number = int(match.group(2))
        
        return file_path, line_number
    
    async def _analyze_error(self, error_context: ErrorContext) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤"""
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ ResearchAgent
        result = await self.registry.execute_task(
            AgentCapability.ANALYZE,
            {
                'type': 'analyze',
                'error_type': error_context.type.value,
                'error_message': error_context.error_message,
                'file_path': error_context.file_path,
                'line_number': error_context.line_number,
                'stack_trace': error_context.stack_trace
            }
        )
        
        if result['success']:
            return result['result']
        
        # Fallback –∞–Ω–∞–ª–∏–∑
        return {
            'cause': 'Unable to determine exact cause',
            'impact': 'Unknown impact',
            'suggestions': ['Manual review required']
        }
    
    def _find_similar_fixes(self, error_context: ErrorContext) -> List[ErrorFix]:
        """–ü–æ–∏—Å–∫ –ø–æ—Ö–æ–∂–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏"""
        similar_fixes = []
        
        for past_error, past_fix, success in self.fix_history:
            if not success:
                continue
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
            if past_error.type == error_context.type:
                similarity = self._calculate_similarity(past_error, error_context)
                if similarity > 0.7:
                    similar_fixes.append(past_fix)
        
        return similar_fixes[:3]  # –¢–æ–ø-3 –ø–æ—Ö–æ–∂–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    
    def _calculate_similarity(
        self,
        error1: ErrorContext,
        error2: ErrorContext
    ) -> float:
        """–†–∞—Å—á—ë—Ç –ø–æ—Ö–æ–∂–µ—Å—Ç–∏ –¥–≤—É—Ö –æ—à–∏–±–æ–∫"""
        score = 0.0
        
        # –¢–∏–ø –æ—à–∏–±–∫–∏
        if error1.type == error2.type:
            score += 0.3
        
        # –§–∞–π–ª
        if error1.file_path == error2.file_path:
            score += 0.2
        
        # –ü–æ—Ö–æ–∂–µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–π
        if error1.error_message and error2.error_message:
            # –ü—Ä–æ—Å—Ç–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –ø–æ —Å–ª–æ–≤–∞–º
            words1 = set(error1.error_message.lower().split())
            words2 = set(error2.error_message.lower().split())
            if words1 and words2:
                jaccard = len(words1 & words2) / len(words1 | words2)
                score += 0.5 * jaccard
        
        return min(score, 1.0)
    
    async def _generate_fix(
        self,
        error_context: ErrorContext,
        analysis: Dict[str, Any],
        similar_fixes: List[ErrorFix]
    ) -> ErrorFix:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º ComposerAgent –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ fix
        result = await self.registry.execute_task(
            AgentCapability.COMPOSE,
            {
                'type': 'compose',
                'template': 'error_fix',
                'error_context': self._error_context_to_dict(error_context),
                'analysis': analysis,
                'similar_fixes': [self._fix_to_dict(f) for f in similar_fixes]
            }
        )
        
        if result['success'] and 'fix' in result['result']:
            fix_data = result['result']['fix']
            return ErrorFix(
                fix_type=fix_data.get('type', 'code'),
                description=fix_data.get('description', 'Generated fix'),
                code_changes=fix_data.get('code_changes'),
                file_patches=fix_data.get('file_patches'),
                confidence=fix_data.get('confidence', 0.5),
                estimated_impact=fix_data.get('impact', 'unknown'),
                rollback_plan=fix_data.get('rollback_plan')
            )
        
        # Fallback fix
        return ErrorFix(
            fix_type='manual',
            description='Manual intervention required',
            code_changes=None,
            file_patches=None,
            confidence=0.0,
            estimated_impact='unknown',
            rollback_plan=None
        )
    
    async def _apply_fix(
        self,
        error_context: ErrorContext,
        fix: ErrorFix
    ) -> bool:
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        logger.info(f"üî® Applying fix: {fix.description}")
        
        try:
            if fix.fix_type == 'code' and fix.file_patches:
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞—Ç—á–∏ –∫ —Ñ–∞–π–ª–∞–º
                for patch in fix.file_patches:
                    file_path = Path(patch['file'])
                    if file_path.exists():
                        # –°–æ–∑–¥–∞—ë–º backup
                        backup_path = file_path.with_suffix(f'.backup.{datetime.now().strftime("%Y%m%d_%H%M%S")}')
                        file_path.rename(backup_path)
                        
                        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
                        with open(file_path, 'w') as f:
                            f.write(patch['content'])
                        
                        logger.info(f"‚úÖ Patched {file_path}")
            
            elif fix.fix_type == 'config' and fix.code_changes:
                # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
                for config_key, new_value in fix.code_changes.items():
                    logger.info(f"Config update: {config_key} = {new_value}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ ReviewAgent
            review_result = await self.registry.execute_task(
                AgentCapability.REVIEW,
                {
                    'type': 'review',
                    'fix_applied': True,
                    'error_context': self._error_context_to_dict(error_context),
                    'fix': self._fix_to_dict(fix)
                }
            )
            
            if review_result['success']:
                logger.info("‚úÖ Fix applied and validated")
                return True
            else:
                logger.warning("Fix applied but validation failed")
                return False
                
        except Exception as e:
            logger.error(f"Failed to apply fix: {e}")
            
            # –ü—Ä–æ–±—É–µ–º rollback
            if fix.rollback_plan:
                await self._execute_rollback(fix.rollback_plan)
            
            return False
    
    async def _execute_rollback(self, rollback_plan: Dict[str, Any]):
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç–∫–∞—Ç–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π"""
        logger.info("üîÑ Executing rollback")
        
        try:
            if 'restore_files' in rollback_plan:
                for file_info in rollback_plan['restore_files']:
                    backup_path = Path(file_info['backup'])
                    original_path = Path(file_info['original'])
                    
                    if backup_path.exists():
                        original_path.unlink(missing_ok=True)
                        backup_path.rename(original_path)
                        logger.info(f"Restored {original_path}")
            
            logger.info("‚úÖ Rollback completed")
            
        except Exception as e:
            logger.error(f"Rollback failed: {e}")
    
    async def _update_documentation(
        self,
        error_context: ErrorContext,
        fix: ErrorFix
    ):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        # –°–æ–∑–¥–∞—ë–º –∑–∞–ø–∏—Å—å –æ–± –æ—à–∏–±–∫–µ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏
        doc_content = f"""
## Error Fix Report

**Date:** {error_context.timestamp.isoformat()}
**Error Type:** {error_context.type.value}
**Severity:** {error_context.severity.value}

### Error Details
- **Message:** {error_context.error_message}
- **File:** {error_context.file_path}
- **Line:** {error_context.line_number}

### Fix Applied
- **Type:** {fix.fix_type}
- **Description:** {fix.description}
- **Confidence:** {fix.confidence}
- **Impact:** {fix.estimated_impact}

### Lessons Learned
This error was automatically detected and fixed by the Error Pipeline.
"""
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º PublisherAgent –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await self.registry.execute_task(
            AgentCapability.PUBLISH,
            {
                'type': 'publish',
                'content': doc_content,
                'filename': f"error_fix_{datetime.now().strftime('%Y%m%d_%H%M%S')}.md",
                'channels': ['local', 'git']
            }
        )
    
    def _error_context_to_dict(self, error_context: ErrorContext) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ErrorContext –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'type': error_context.type.value,
            'severity': error_context.severity.value,
            'file_path': error_context.file_path,
            'line_number': error_context.line_number,
            'error_message': error_context.error_message,
            'stack_trace': error_context.stack_trace,
            'timestamp': error_context.timestamp.isoformat(),
            'source_system': error_context.source_system,
            'additional_info': error_context.additional_info
        }
    
    def _fix_to_dict(self, fix: ErrorFix) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è ErrorFix –≤ —Å–ª–æ–≤–∞—Ä—å"""
        return {
            'fix_type': fix.fix_type,
            'description': fix.description,
            'code_changes': fix.code_changes,
            'file_patches': fix.file_patches,
            'confidence': fix.confidence,
            'estimated_impact': fix.estimated_impact,
            'rollback_plan': fix.rollback_plan
        }
    
    def get_error_statistics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—à–∏–±–æ–∫"""
        total_errors = len(self.error_history)
        total_fixes = len(self.fix_history)
        successful_fixes = sum(1 for _, _, success in self.fix_history if success)
        
        error_by_type = {}
        for error in self.error_history:
            error_by_type[error.type.value] = error_by_type.get(error.type.value, 0) + 1
        
        error_by_severity = {}
        for error in self.error_history:
            error_by_severity[error.severity.value] = error_by_severity.get(error.severity.value, 0) + 1
        
        return {
            'total_errors': total_errors,
            'total_fixes': total_fixes,
            'successful_fixes': successful_fixes,
            'fix_success_rate': successful_fixes / total_fixes if total_fixes > 0 else 0,
            'errors_by_type': error_by_type,
            'errors_by_severity': error_by_severity
        }


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π error pipeline
error_pipeline = None


async def get_error_pipeline() -> ErrorPipeline:
    """–ü–æ–ª—É—á–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—ã–π error pipeline"""
    global error_pipeline
    if error_pipeline is None:
        error_pipeline = ErrorPipeline()
        await error_pipeline.initialize()
    return error_pipeline


if __name__ == '__main__':
    async def test():
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ error pipeline"""
        pipeline = await get_error_pipeline()
        
        # –¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞
        test_error = {
            'type': 'syntax_error',
            'message': 'SyntaxError: unexpected EOF while parsing',
            'file_path': '/test/file.py',
            'line_number': 42,
            'stack_trace': 'File "/test/file.py", line 42\n    def test(\n           ^\nSyntaxError: unexpected EOF while parsing',
            'source': 'galaxy_monitoring'
        }
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        result = await pipeline.process_error(test_error, auto_fix=False)
        
        print(json.dumps(result, indent=2))
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = pipeline.get_error_statistics()
        print(f"\nError Statistics: {json.dumps(stats, indent=2)}")
    
    asyncio.run(test())