#!/usr/bin/env python3
"""
üî• FORGE BRIDGE - –ú–æ—Å—Ç –º–µ–∂–¥—É Galaxy –∏ DocumentsSystem
–°–æ–µ–¥–∏–Ω—è–µ—Ç –¥–≤–µ —Å–∏—Å—Ç–µ–º—ã –≤ –µ–¥–∏–Ω—ã–π –∂–∏–≤–æ–π –æ—Ä–≥–∞–Ω–∏–∑–º
by FORGE-2267
"""

import asyncio
import json
import websockets
import redis
from datetime import datetime
from typing import Dict, Any, Optional, Set
from pathlib import Path
import logging
import sys
import uuid

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ —Å–∏—Å—Ç–µ–º–∞–º
sys.path.append('/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem')
sys.path.append('/Volumes/Z7S/development/GalaxyDevelopers/DEVELOPER_SYSTEM')

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger('FORGE_BRIDGE')

class ForgeBridge:
    """–ú–æ—Å—Ç –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏ - –¥–µ–ª–∞–µ—Ç –∏—Ö –û–î–ù–ò–ú"""
    
    def __init__(self):
        # WebSocket –¥–ª—è Galaxy
        self.galaxy_ws: Optional[websockets.WebSocketClientProtocol] = None
        self.galaxy_host = 'localhost'
        self.galaxy_port = 8765
        
        # Redis –¥–ª—è DocumentsSystem
        self.redis_client = redis.Redis(
            host='localhost',
            port=6379,
            db=0,
            decode_responses=True
        )
        self.redis_pubsub = self.redis_client.pubsub()
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –º–æ—Å—Ç–∞
        self.active = False
        self.connected_systems = set()
        self.active_workflows = {}
        self.message_queue = asyncio.Queue()
        
        # –ö–∞–Ω–∞–ª—ã Redis
        self.GALAXY_CHANNEL = 'galaxy:events'
        self.DOCUMENTS_CHANNEL = 'documents:events'
        self.BRIDGE_CHANNEL = 'bridge:control'
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.stats = {
            'messages_routed': 0,
            'galaxy_events': 0,
            'documents_events': 0,
            'errors': 0,
            'workflows_started': 0
        }
        
        logger.info("üî• FORGE BRIDGE initialized")
    
    async def connect_galaxy(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Galaxy Monitoring —á–µ—Ä–µ–∑ WebSocket"""
        try:
            uri = f"ws://{self.galaxy_host}:{self.galaxy_port}"
            self.galaxy_ws = await websockets.connect(uri)
            self.connected_systems.add('galaxy')
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é
            await self.galaxy_ws.send(json.dumps({
                'type': 'identify',
                'client': 'FORGE_BRIDGE',
                'capabilities': ['routing', 'workflow', 'memory'],
                'timestamp': datetime.now().isoformat()
            }))
            
            logger.info(f"‚úÖ Connected to Galaxy Monitoring at {uri}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to connect to Galaxy: {e}")
            return False
    
    async def connect_redis(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis –¥–ª—è DocumentsSystem"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.redis_client.ping()
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∫–∞–Ω–∞–ª—ã
            self.redis_pubsub.subscribe(
                self.DOCUMENTS_CHANNEL,
                self.BRIDGE_CHANNEL
            )
            
            self.connected_systems.add('documents')
            logger.info("‚úÖ Connected to Redis for DocumentsSystem")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Failed to connect to Redis: {e}")
            return False
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –º–æ—Å—Ç–∞"""
        logger.info("üöÄ Starting FORGE BRIDGE...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–∏—Å—Ç–µ–º–∞–º
        galaxy_ok = await self.connect_galaxy()
        redis_ok = await self.connect_redis()
        
        if not galaxy_ok or not redis_ok:
            logger.error("Failed to connect to required systems")
            return False
        
        self.active = True
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        tasks = [
            asyncio.create_task(self.galaxy_listener()),
            asyncio.create_task(self.redis_listener()),
            asyncio.create_task(self.message_router()),
            asyncio.create_task(self.heartbeat_sender())
        ]
        
        logger.info("‚úÖ FORGE BRIDGE is active")
        
        try:
            await asyncio.gather(*tasks)
        except Exception as e:
            logger.error(f"Bridge error: {e}")
        finally:
            await self.stop()
    
    async def galaxy_listener(self):
        """–°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç Galaxy"""
        while self.active and self.galaxy_ws:
            try:
                message = await self.galaxy_ws.recv()
                data = json.loads(message)
                
                self.stats['galaxy_events'] += 1
                
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                unified_msg = self.convert_galaxy_message(data)
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
                await self.message_queue.put(unified_msg)
                
                logger.debug(f"üì• Galaxy event: {data.get('type')}")
                
            except websockets.ConnectionClosed:
                logger.warning("Galaxy WebSocket connection closed")
                break
            except Exception as e:
                logger.error(f"Error in galaxy_listener: {e}")
                self.stats['errors'] += 1
    
    async def redis_listener(self):
        """–°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –æ—Ç DocumentsSystem —á–µ—Ä–µ–∑ Redis"""
        while self.active:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Redis (–Ω–µ–±–ª–æ–∫–∏—Ä—É—é—â–µ)
                message = self.redis_pubsub.get_message(timeout=0.1)
                
                if message and message['type'] == 'message':
                    data = json.loads(message['data'])
                    self.stats['documents_events'] += 1
                    
                    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    unified_msg = self.convert_documents_message(data)
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
                    await self.message_queue.put(unified_msg)
                    
                    logger.debug(f"üì• Documents event: {data.get('type')}")
                
                await asyncio.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                
            except Exception as e:
                logger.error(f"Error in redis_listener: {e}")
                self.stats['errors'] += 1
    
    async def message_router(self):
        """–ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É —Å–∏—Å—Ç–µ–º–∞–º–∏"""
        while self.active:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                message = await self.message_queue.get()
                
                self.stats['messages_routed'] += 1
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å
                target = self.determine_target(message)
                
                if target == 'galaxy':
                    await self.send_to_galaxy(message)
                elif target == 'documents':
                    await self.send_to_documents(message)
                elif target == 'both':
                    await self.send_to_galaxy(message)
                    await self.send_to_documents(message)
                elif target == 'workflow':
                    await self.start_workflow(message)
                
                logger.debug(f"üîÄ Routed message to {target}")
                
            except Exception as e:
                logger.error(f"Error in message_router: {e}")
                self.stats['errors'] += 1
    
    def convert_galaxy_message(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ Galaxy –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        return {
            'id': str(uuid.uuid4()),
            'source_system': 'galaxy',
            'type': data.get('type', 'event'),
            'agent': data.get('source', 'monitoring'),
            'payload': data,
            'context': {
                'workflow_id': data.get('workflow_id'),
                'correlation_id': data.get('correlation_id'),
                'memory_snapshot': {}
            },
            'timestamp': data.get('timestamp', datetime.now().isoformat())
        }
    
    def convert_documents_message(self, data: Dict[str, Any]) -> Dict[str, Any]:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ DocumentsSystem –≤ –µ–¥–∏–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç"""
        return {
            'id': data.get('id', str(uuid.uuid4())),
            'source_system': 'documents',
            'type': data.get('type', 'event'),
            'agent': data.get('sender', 'unknown'),
            'payload': data.get('payload', data),
            'context': {
                'workflow_id': data.get('correlation_id'),
                'correlation_id': data.get('correlation_id'),
                'memory_snapshot': {}
            },
            'timestamp': data.get('timestamp', datetime.now().isoformat())
        }
    
    def determine_target(self, message: Dict[str, Any]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –∫—É–¥–∞ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        msg_type = message.get('type')
        source = message.get('source_system')
        
        # –õ–æ–≥–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏
        if msg_type == 'file_change' and source == 'galaxy':
            return 'documents'  # –§–∞–π–ª–æ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–¥—É—Ç –≤ DocumentsSystem
        elif msg_type == 'analysis_result' and source == 'documents':
            return 'galaxy'  # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –∏–¥—É—Ç –≤ Galaxy
        elif msg_type == 'error':
            return 'workflow'  # –û—à–∏–±–∫–∏ –∑–∞–ø—É—Å–∫–∞—é—Ç workflow
        elif msg_type == 'broadcast':
            return 'both'  # Broadcast –∏–¥—ë—Ç –≤—Å–µ–º
        else:
            # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–ª–æ–∂–Ω—É—é —Å–∏—Å—Ç–µ–º—É
            return 'documents' if source == 'galaxy' else 'galaxy'
    
    async def send_to_galaxy(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Galaxy"""
        if self.galaxy_ws:
            try:
                await self.galaxy_ws.send(json.dumps(message))
                logger.debug(f"‚û°Ô∏è Sent to Galaxy: {message['type']}")
            except Exception as e:
                logger.error(f"Failed to send to Galaxy: {e}")
    
    async def send_to_documents(self, message: Dict[str, Any]):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ DocumentsSystem —á–µ—Ä–µ–∑ Redis"""
        try:
            self.redis_client.publish(
                self.GALAXY_CHANNEL,
                json.dumps(message)
            )
            logger.debug(f"‚û°Ô∏è Sent to Documents: {message['type']}")
        except Exception as e:
            logger.error(f"Failed to send to Documents: {e}")
    
    async def start_workflow(self, message: Dict[str, Any]):
        """–ó–∞–ø—É—Å–∫ workflow –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è"""
        workflow_id = str(uuid.uuid4())
        self.stats['workflows_started'] += 1
        
        workflow = {
            'id': workflow_id,
            'trigger': message,
            'status': 'started',
            'started_at': datetime.now().isoformat()
        }
        
        self.active_workflows[workflow_id] = workflow
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø workflow
        if message['type'] == 'error':
            # –ó–∞–ø—É—Å–∫–∞–µ–º error handling workflow
            await self.run_error_workflow(workflow_id, message)
        
        logger.info(f"üîÑ Started workflow {workflow_id}")
    
    async def run_error_workflow(self, workflow_id: str, error_message: Dict[str, Any]):
        """Workflow –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
        # –≠—Ç–æ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ error_pipeline.py
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        logger.info(f"üîß Running error workflow for {workflow_id}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ DocumentsSystem –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        analysis_request = {
            'id': str(uuid.uuid4()),
            'source_system': 'bridge',
            'type': 'command',
            'agent': 'ResearchAgent',
            'payload': {
                'task': 'analyze_error',
                'error': error_message['payload']
            },
            'context': {
                'workflow_id': workflow_id
            },
            'timestamp': datetime.now().isoformat()
        }
        
        await self.send_to_documents(analysis_request)
    
    async def heartbeat_sender(self):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ heartbeat –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        while self.active:
            try:
                # Heartbeat –¥–ª—è Galaxy
                if self.galaxy_ws:
                    await self.galaxy_ws.send(json.dumps({
                        'type': 'heartbeat',
                        'client': 'FORGE_BRIDGE',
                        'stats': self.stats,
                        'timestamp': datetime.now().isoformat()
                    }))
                
                # Heartbeat –≤ Redis
                self.redis_client.publish(self.BRIDGE_CHANNEL, json.dumps({
                    'type': 'heartbeat',
                    'bridge': 'FORGE',
                    'stats': self.stats,
                    'timestamp': datetime.now().isoformat()
                }))
                
                await asyncio.sleep(30)  # –ö–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                logger.error(f"Heartbeat error: {e}")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ—Å—Ç–∞"""
        logger.info("üõë Stopping FORGE BRIDGE...")
        self.active = False
        
        if self.galaxy_ws:
            await self.galaxy_ws.close()
        
        self.redis_pubsub.close()
        
        logger.info("‚úÖ FORGE BRIDGE stopped")
    
    def get_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–æ—Å—Ç–∞"""
        return {
            'active': self.active,
            'connected_systems': list(self.connected_systems),
            'active_workflows': len(self.active_workflows),
            'stats': self.stats,
            'timestamp': datetime.now().isoformat()
        }


async def main():
    """–ó–∞–ø—É—Å–∫ FORGE BRIDGE"""
    bridge = ForgeBridge()
    
    try:
        await bridge.start()
    except KeyboardInterrupt:
        logger.info("Received interrupt signal")
    except Exception as e:
        logger.error(f"Fatal error: {e}")
    finally:
        await bridge.stop()


if __name__ == '__main__':
    print("""
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë        üî• FORGE BRIDGE üî•            ‚ïë
    ‚ïë   Connecting Galaxy & Documents      ‚ïë
    ‚ïë         Making them ONE               ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
    """)
    
    asyncio.run(main())