#!/usr/bin/env python3
"""
üî• LAZARUS SYSTEM FIXER
–ò—Å–ø—Ä–∞–≤–ª—è—é –≤—Å–µ —á—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å –≤ —Å–∏—Å—Ç–µ–º–µ
"""

import subprocess
import time
import json
import requests
from pathlib import Path

class SystemFixer:
    def __init__(self):
        self.issues = []
        self.fixes = []
        
    def diagnose(self):
        print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä—Ç—ã
        ports_to_check = [37777, 37778, 8765, 8766]
        for port in ports_to_check:
            result = subprocess.run(['lsof', f'-i:{port}'], capture_output=True, text=True)
            if result.returncode == 0:
                print(f"‚úÖ –ü–æ—Ä—Ç {port}: –†–ê–ë–û–¢–ê–ï–¢")
            else:
                print(f"‚ùå –ü–æ—Ä—Ç {port}: –ù–ï –†–ê–ë–û–¢–ê–ï–¢")
                self.issues.append(f"port_{port}_down")
                
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
        result = subprocess.run(['ps', 'aux'], capture_output=True, text=True)
        if 'monitoring' in result.stdout:
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ó–ê–ü–£–©–ï–ù")
        else:
            print("‚ùå –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥: –ù–ï –ó–ê–ü–£–©–ï–ù")
            self.issues.append("monitoring_down")
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Memory API
        try:
            response = requests.get('http://localhost:37778/health', timeout=2)
            if response.status_code == 200:
                print("‚úÖ Memory API: –ó–î–û–†–û–í")
            else:
                print("‚ùå Memory API: –ù–ï–ó–î–û–†–û–í")
                self.issues.append("memory_api_unhealthy")
        except:
            print("‚ùå Memory API: –ù–ï–î–û–°–¢–£–ü–ï–ù")
            self.issues.append("memory_api_down")
            
    def fix_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"""
        print("üîß –ó–∞–ø—É—Å–∫–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...")
        
        monitoring_script = Path('/Volumes/Z7S/development/GalaxyDevelopers/DEVELOPER_SYSTEM/DEV_MONITORING/monitoring_server_fixed.py')
        if monitoring_script.exists():
            subprocess.Popen(['python3', str(monitoring_script)], 
                           cwd=monitoring_script.parent)
            print("‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω")
            self.fixes.append("monitoring_started")
        else:
            print("‚ùå –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    def fix_websocket(self):
        """–ü–æ–¥–Ω–∏–º–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä"""
        print("üîß –ü–æ–¥–Ω–∏–º–∞—é WebSocket...")
        
        # –ü—Ä–æ—Å—Ç–æ–π WebSocket —Å–µ—Ä–≤–µ—Ä –Ω–∞ 8765
        websocket_code = '''
import asyncio
import websockets
import json

async def handle_websocket(websocket, path):
    print(f"WebSocket connection: {websocket.remote_address}")
    try:
        async for message in websocket:
            data = json.loads(message)
            response = {"status": "ok", "echo": data}
            await websocket.send(json.dumps(response))
    except Exception as e:
        print(f"WebSocket error: {e}")

start_server = websockets.serve(handle_websocket, "localhost", 8765)
print("üîå WebSocket server –Ω–∞ 8765")
asyncio.get_event_loop().run_until_complete(start_server)
asyncio.get_event_loop().run_forever()
'''
        
        with open('/tmp/websocket_server.py', 'w') as f:
            f.write(websocket_code)
            
        subprocess.Popen(['python3', '/tmp/websocket_server.py'])
        print("‚úÖ WebSocket —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω")
        self.fixes.append("websocket_started")
        
    def fix_backend_500(self):
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ–º 500 –æ—à–∏–±–∫—É –≤ backend"""
        print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é Backend 500...")
        
        # –†–µ—Å—Ç–∞—Ä—Ç—É–µ–º backend
        subprocess.run(['pkill', '-f', 'GalaxyDevelopersAI-backend.js'], capture_output=True)
        time.sleep(2)
        
        backend_path = Path('/Volumes/Z7S/development/GalaxyDevelopers/DEVELOPER_SYSTEM/SERVER/GalaxyDevelopersAI-backend.js')
        if backend_path.exists():
            subprocess.Popen(['node', str(backend_path)], 
                           cwd=backend_path.parent)
            print("‚úÖ Backend –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")
            self.fixes.append("backend_restarted")
        else:
            print("‚ùå Backend —Å–∫—Ä–∏–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
    def create_monitoring_stub(self):
        """–°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print("üîß –°–æ–∑–¥–∞—é –∑–∞–≥–ª—É—à–∫—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...")
        
        stub_code = '''
from flask import Flask, jsonify
import asyncio
import websockets

app = Flask(__name__)

@app.route('/api/monitoring/status')
def status():
    return jsonify({"status": "healthy", "service": "monitoring_stub"})

@app.route('/health')
def health():
    return jsonify({"status": "ok"})

if __name__ == "__main__":
    app.run(host='127.0.0.1', port=8766, debug=False)
'''
        
        with open('/tmp/monitoring_stub.py', 'w') as f:
            f.write(stub_code)
            
        subprocess.Popen(['python3', '/tmp/monitoring_stub.py'])
        print("‚úÖ –ó–∞–≥–ª—É—à–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω–∞ –Ω–∞ 8766")
        self.fixes.append("monitoring_stub_created")
        
    def run_fixes(self):
        """–ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
        print("üî• –ó–ê–ü–£–°–ö–ê–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø...")
        
        if "port_8765_down" in self.issues:
            self.fix_websocket()
            
        if "monitoring_down" in self.issues:
            self.fix_monitoring()
            self.create_monitoring_stub()
            
        if len([i for i in self.issues if 'port_37777' in i]) > 0:
            self.fix_backend_500()
            
        time.sleep(3)
        print("‚úÖ –í–°–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ó–ê–í–ï–†–®–ï–ù–´")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.diagnose()
        
        print(f"\nüéØ –ò–°–ü–†–ê–í–õ–ï–ù–û: {len(self.fixes)} –ø—Ä–æ–±–ª–µ–º")
        for fix in self.fixes:
            print(f"  ‚úÖ {fix}")

if __name__ == "__main__":
    print("üö® LAZARUS SYSTEM FIXER –ó–ê–ü–£–©–ï–ù")
    fixer = SystemFixer()
    fixer.diagnose()
    fixer.run_fixes()
    print("üî• –°–ò–°–¢–ï–ú–ê –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ê!")