#!/usr/bin/env node

/**
 * –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê –í–°–ï–• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ô –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø–æ—Å–ª–µ Perplexity –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–π
 */

const fs = require('fs');
const path = require('path');
const { Pool } = require('pg');
const redis = require('redis');

console.log('üîç –ü–†–û–í–ï–†–ö–ê –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò –°–ò–°–¢–ï–ú–´\n');

let passedTests = 0;
let failedTests = 0;

async function check(name, testFn) {
    try {
        await testFn();
        console.log(`‚úÖ ${name}`);
        passedTests++;
    } catch (error) {
        console.log(`‚ùå ${name}: ${error.message}`);
        failedTests++;
    }
}

async function runChecks() {
    // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ Command Execution
    await check('SecureCommandExecutor —Å—É—â–µ—Å—Ç–≤—É–µ—Ç', () => {
        const filePath = path.join(__dirname, 'McKinsey_Transformation/Horizon_1_Simplify/SecureCommandExecutor.js');
        if (!fs.existsSync(filePath)) throw new Error('–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω');
        const content = fs.readFileSync(filePath, 'utf8');
        if (!content.includes('shell: false')) throw new Error('shell: false –Ω–µ –Ω–∞–π–¥–µ–Ω');
        if (content.includes("spawn('sh', ['-c']")) throw new Error('–û–ø–∞—Å–Ω—ã–π spawn –Ω–∞–π–¥–µ–Ω!');
    });

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Password Manager
    await check('PasswordManager —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —Å–æ–ª—è–º–∏', () => {
        const filePath = path.join(__dirname, 'SERVER/PasswordManager.js');
        if (!fs.existsSync(filePath)) throw new Error('PasswordManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        const content = fs.readFileSync(filePath, 'utf8');
        if (!content.includes('crypto.randomBytes(32)')) throw new Error('–ù–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–ª–∏');
        if (!content.includes('timingSafeEqual')) throw new Error('–ù–µ—Ç timing-safe —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
        if (content.includes("'salt'")) throw new Error('–°—Ç–∞—Ç–∏—á–µ—Å–∫–∞—è —Å–æ–ª—å –Ω–∞–π–¥–µ–Ω–∞!');
    });

    // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT Manager
    await check('JWTAuthManager —Å Redis blacklist', () => {
        const filePath = path.join(__dirname, 'SERVER/JWTAuthManager.js');
        if (!fs.existsSync(filePath)) throw new Error('JWTAuthManager –Ω–µ –Ω–∞–π–¥–µ–Ω');
        const content = fs.readFileSync(filePath, 'utf8');
        if (!content.includes('ACCESS_TOKEN_EXPIRY')) throw new Error('–ù–µ—Ç expiry –Ω–∞—Å—Ç—Ä–æ–µ–∫');
        if (!content.includes('blacklistToken')) throw new Error('–ù–µ—Ç blacklist —Ñ—É–Ω–∫—Ü–∏–∏');
        if (!content.includes('rotateRefreshToken')) throw new Error('–ù–µ—Ç token rotation');
        if (!content.includes('httpOnly: true')) throw new Error('–ù–µ—Ç httpOnly cookies');
    });

    // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ JWT Config
    await check('JWT –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –±–µ–∑ fallback', () => {
        const filePath = path.join(__dirname, 'config/jwt.config.js');
        if (!fs.existsSync(filePath)) throw new Error('jwt.config.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
        const content = fs.readFileSync(filePath, 'utf8');
        if (content.includes("|| 'secret'")) throw new Error('Fallback –Ω–∞ secret –Ω–∞–π–¥–µ–Ω!');
        if (!content.includes('crypto.randomBytes(64)')) throw new Error('–ù–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–∞');
    });

    // 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Database Config
    await check('Database –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–∞', () => {
        const filePath = path.join(__dirname, 'config/database-config.js');
        if (!fs.existsSync(filePath)) throw new Error('database-config.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
        const content = fs.readFileSync(filePath, 'utf8');
        if (!content.includes('getPostgresPool')) throw new Error('–ù–µ—Ç pool management');
        if (!content.includes('getRedisClient')) throw new Error('–ù–µ—Ç Redis client');
    });

    // 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ PostgreSQL
    await check('PostgreSQL –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ç–∞–±–ª–∏—Ü—ã', async () => {
        const pool = new Pool({
            host: 'localhost',
            port: 5432,
            database: 'galaxydevelopers',
            user: 'postgres',
            password: 'postgres'
        });
        
        try {
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–±–ª–∏—Ü
            const tables = await pool.query(`
                SELECT table_name FROM information_schema.tables 
                WHERE table_schema = 'public' 
                AND table_name IN ('users', 'refresh_tokens', 'user_sessions')
            `);
            
            if (tables.rows.length < 3) {
                throw new Error(`–ù–∞–π–¥–µ–Ω–æ —Ç–æ–ª—å–∫–æ ${tables.rows.length} –∏–∑ 3 —Ç–∞–±–ª–∏—Ü`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–æ–Ω–∫–∏ salt
            const saltColumn = await pool.query(`
                SELECT column_name FROM information_schema.columns 
                WHERE table_name = 'users' AND column_name = 'password_salt'
            `);
            
            if (saltColumn.rows.length === 0) {
                throw new Error('–ö–æ–ª–æ–Ω–∫–∞ password_salt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
            }
        } finally {
            await pool.end();
        }
    });

    // 7. –ü—Ä–æ–≤–µ—Ä–∫–∞ Redis
    await check('Redis –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ', async () => {
        const client = redis.createClient({
            url: 'redis://localhost:6379'
        });
        
        await client.connect();
        
        try {
            await client.set('test_key', 'test_value');
            const value = await client.get('test_key');
            if (value !== 'test_value') throw new Error('Redis –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
            await client.del('test_key');
        } finally {
            await client.disconnect();
        }
    });

    // 8. –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
    await check('–ù–µ—Ç execSync –≤ backend', () => {
        const filePath = path.join(__dirname, 'SERVER/GalaxyDevelopersAI-backend.js');
        if (fs.existsSync(filePath)) {
            const content = fs.readFileSync(filePath, 'utf8');
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ execSync —É–¥–∞–ª–µ–Ω –∏–∑ –∏–º–ø–æ—Ä—Ç–æ–≤
            const importLine = content.match(/const\s*{\s*([^}]+)\s*}\s*=\s*require\(['"]child_process['"]\)/);
            if (importLine && importLine[1].includes('execSync')) {
                throw new Error('execSync –Ω–∞–π–¥–µ–Ω –≤ –∏–º–ø–æ—Ä—Ç–∞—Ö!');
            }
        }
    });

    // 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ auth-v2
    await check('Auth-v2 —Å –ø–æ–ª–Ω–æ–π JWT —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–µ–π', () => {
        const filePath = path.join(__dirname, 'SERVER/auth-v2.js');
        if (!fs.existsSync(filePath)) throw new Error('auth-v2.js –Ω–µ –Ω–∞–π–¥–µ–Ω');
        const content = fs.readFileSync(filePath, 'utf8');
        if (!content.includes('refreshToken')) throw new Error('–ù–µ—Ç refresh token');
        if (!content.includes('blacklistToken')) throw new Error('–ù–µ—Ç blacklist');
        if (!content.includes('httpOnly')) throw new Error('–ù–µ—Ç httpOnly cookies');
        if (!content.includes('failed_login_attempts')) throw new Error('–ù–µ—Ç rate limiting');
    });

    // 10. –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–π
    await check('–ú–∏–≥—Ä–∞—Ü–∏–∏ –ë–î —Å–æ–∑–¥–∞–Ω—ã', () => {
        const saltMigration = path.join(__dirname, 'database_migration_salt.sql');
        const jwtMigration = path.join(__dirname, 'database_migration_jwt.sql');
        
        if (!fs.existsSync(saltMigration)) throw new Error('–ú–∏–≥—Ä–∞—Ü–∏—è salt –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
        if (!fs.existsSync(jwtMigration)) throw new Error('–ú–∏–≥—Ä–∞—Ü–∏—è JWT –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    });
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–æ–∫
runChecks().then(() => {
    console.log('\n' + '='.repeat(50));
    console.log(`–†–ï–ó–£–õ–¨–¢–ê–¢: ${passedTests} ‚úÖ / ${failedTests} ‚ùå`);
    
    if (failedTests === 0) {
        console.log('\nüéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –°–ò–°–¢–ï–ú–ê –ó–ê–©–ò–©–ï–ù–ê!');
        process.exit(0);
    } else {
        console.log('\n‚ö†Ô∏è  –ï—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ failed —Ç–µ—Å—Ç—ã.');
        process.exit(1);
    }
}).catch(error => {
    console.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
    process.exit(1);
});