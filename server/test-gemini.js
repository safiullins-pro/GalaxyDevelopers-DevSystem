#!/usr/bin/env node

/**
 * –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï GEMINI –§–£–ù–ö–¶–ò–ô
 * –ó–∞–ø—É—Å–∫: node test-gemini.js
 */

const GeminiFunctions = require('./gemini-functions');
const KeyRotator = require('./GalaxyDevelopersAI-key-rotator'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—Ç–∞—Ç–æ—Ä

async function testGemini() {
  // --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á —á–µ—Ä–µ–∑ —Ä–æ—Ç–∞—Ç–æ—Ä ---
  let apiKey;
  try {
    const keyRotator = new KeyRotator();
    apiKey = keyRotator.getNextValidKey();
    console.log(`üîë Using API key from rotator: ${apiKey.substring(0, 10)}...\n`);
  } catch (e) {
    console.error('‚ùå ERROR: Could not get API key from rotator. Make sure .galaxydevelopers-ai-keys file exists.');
    console.error(e.message);
    process.exit(1);
  }
  // --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–Ø ---
  
  if (!apiKey) {
    console.error('‚ùå ERROR: No API key available!');
    process.exit(1);
  }
  
  console.log('üöÄ Starting Gemini Functions Test...\n');
  
  const gemini = new GeminiFunctions(apiKey);
  
  // –¢–µ—Å—Ç 1: Forge Mode (–¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
  console.log('üìù Test 1: FORGE MODE (temperature=0)');
  console.log('=========================================');
  
  const forgePrompt = 'What is 2+2? Answer with only the number.';
  
  try {
    const response1 = await gemini.generateForgeMode(forgePrompt);
    console.log('Response 1:', response1);
    
    const response2 = await gemini.generateForgeMode(forgePrompt);
    console.log('Response 2:', response2);
    
    const match = response1 === response2;
    console.log(`Deterministic match: ${match ? '‚úÖ YES' : '‚ùå NO'}\n`);
  } catch (error) {
    console.error('Error:', error.message);
  }
  
  // –¢–µ—Å—Ç 2: Custom –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
  console.log('üìù Test 2: CUSTOM SETTINGS');
  console.log('=========================================');
  
  try {
    const customResponse = await gemini.generateCustom(
      'Write one word: the capital of France',
      {
        temperature: 0.0,
        topK: 1,
        topP: 1.0,
        maxOutputTokens: 10
      }
    );
    console.log('Custom response:', customResponse, '\n');
  } catch (error) {
    console.error('Error:', error.message);
  }
  
  // –¢–µ—Å—Ç 3: –ü–æ–¥—Å—á–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤
  console.log('üìù Test 3: TOKEN COUNTING');
  console.log('=========================================');
  
  try {
    const text = 'This is a test prompt to count tokens.';
    const tokens = await gemini.countTokens(text);
    console.log(`Text: "${text}"`);
    console.log(`Tokens: ${tokens}\n`);
  } catch (error) {
    console.error('Error:', error.message);
  }
  
  // –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–µ–π
  console.log('üìù Test 4: MODEL AVAILABILITY');
  console.log('=========================================');
  
  const modelsToTest = [
    'gemini-2.5-flash',
    'gemini-2.5-pro',
    'gemini-2.0-flash',
    'gemini-1.5-flash'
  ];
  
  for (const model of modelsToTest) {
    await gemini.testModel(model);
  }
  
  console.log('\n');
  
  // –¢–µ—Å—Ç 5: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏
  console.log('üìù Test 5: SESSION REPRODUCIBILITY');
  console.log('=========================================');
  
  try {
    const sessionPrompt = 'What is the first letter of alphabet? Answer with one letter only.';
    const sessionId = `test-${Date.now()}`;
    
    const response = await gemini.generateForgeMode(sessionPrompt);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é
    gemini.saveSession(sessionId, sessionPrompt, response, {
      temperature: 0.0,
      topK: 1,
      topP: 1.0
    });
    
    // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º
    const replay = await gemini.replaySession(sessionId);
    
    console.log('Original:', replay.original);
    console.log('Replay:', replay.replay);
    console.log(`Match: ${replay.match ? '‚úÖ EXACT' : '‚ùå DIFFERENT'}\n`);
  } catch (error) {
    console.error('Error:', error.message);
  }

  // –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ Seed
  console.log('üìù Test 6: SEED PARAMETER CHECK');
  console.log('=========================================');
  
  try {
    const seedPrompt = 'Generate a random short story about a robot who discovers music.';
    const seedValue = 42; // Static seed for reproducibility
    
    console.log(`Using static seed: ${seedValue} and temperature: 0.9`);

    const response1 = await gemini.generateCustom(
      seedPrompt,
      {
        temperature: 0.9,
        seed: seedValue,
        maxOutputTokens: 100
      }
    );
    
    const response2 = await gemini.generateCustom(
      seedPrompt,
      {
        temperature: 0.9,
        seed: seedValue,
        maxOutputTokens: 100
      }
    );
    
    console.log('Response 1:', response1.substring(0, 90) + '...');
    console.log('Response 2:', response2.substring(0, 90) + '...');

    const seedMatch = response1 === response2;
    console.log(`Responses with the same seed match: ${seedMatch ? '‚úÖ YES' : '‚ùå NO'}\n`);

  } catch (error) {
    console.error('Error during seed test:', error.message);
  }
  
  console.log('‚úÖ Tests completed!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
testGemini().catch(console.error);