#!/usr/bin/env python3
"""
–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤ —á–µ—Ä–µ–∑ MD5
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç, —á—Ç–æ —Ñ–∞–π–ª—ã –Ω–µ –∏–∑–º–µ–Ω–µ–Ω—ã –±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
"""

import hashlib
import json
import time
import os
from datetime import datetime
from pathlib import Path

BASE_PATH = "/Volumes/Z7S/development/GalaxyDevelopers/DevSystem"
FILES_STRUCTURE_PATH = f"{BASE_PATH}/DOCUMENTS/FILES_STRUCTURE"
CHECK_INTERVAL = 300  # 5 –º–∏–Ω—É—Ç

def calculate_md5(file_path):
    """–°—á–∏—Ç–∞–µ–º MD5 —Å—É–º–º—É —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'rb') as f:
            return hashlib.md5(f.read()).hexdigest()
    except:
        return None

def update_md5_in_json(json_file, file_name, new_md5):
    """–û–±–Ω–æ–≤–ª—è–µ–º MD5 –≤ JSON –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"""
    with open(json_file, 'r') as f:
        data = json.load(f)
    
    if file_name in data.get('files', {}):
        data['files'][file_name]['md5'] = new_md5
        data['files'][file_name]['last_checked'] = datetime.now().isoformat()
        
        with open(json_file, 'w') as f:
            json.dump(data, f, indent=2, ensure_ascii=False)
        return True
    return False

def check_integrity():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç–∏"""
    errors = []
    warnings = []
    checked = 0
    
    print(f"\n[{datetime.now().strftime('%H:%M:%S')}] –ü—Ä–æ–≤–µ—Ä—è—é —Ü–µ–ª–æ—Å—Ç–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤...")
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º JSON —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º
    for json_file in Path(FILES_STRUCTURE_PATH).glob("*.json"):
        with open(json_file, 'r') as f:
            structure = json.load(f)
        
        dir_name = structure.get('directory', '')
        dir_path = structure.get('path', f"{BASE_PATH}/{dir_name}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
        for file_name, file_info in structure.get('files', {}).items():
            checked += 1
            file_path = f"{dir_path}/{file_name}"
            
            if not os.path.exists(file_path):
                warnings.append(f"‚ö†Ô∏è  {dir_name}/{file_name} - —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                continue
            
            current_md5 = calculate_md5(file_path)
            saved_md5 = file_info.get('md5')
            
            if not saved_md5:
                # –ü–µ—Ä–≤—ã–π —Ä–∞–∑ - —Å–æ—Ö—Ä–∞–Ω—è–µ–º MD5
                update_md5_in_json(json_file, file_name, current_md5)
                print(f"   ‚úÖ {file_name} - MD5 —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            elif current_md5 != saved_md5:
                # MD5 –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç!
                errors.append(f"‚ùå {dir_name}/{file_name} - –ò–ó–ú–ï–ù–ï–ù –ë–ï–ó –û–ë–ù–û–í–õ–ï–ù–ò–Ø –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò!")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"–ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {checked}")
    
    if errors:
        print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò - –§–ê–ô–õ–´ –ò–ó–ú–ï–ù–ï–ù–´:")
        for error in errors:
            print(f"   {error}")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ª–æ–≥
        with open(f"{BASE_PATH}/DOCUMENTS/integrity_errors.log", 'a') as f:
            f.write(f"\n[{datetime.now().isoformat()}] –û–®–ò–ë–ö–ò –¶–ï–õ–û–°–¢–ù–û–°–¢–ò:\n")
            for error in errors:
                f.write(f"  {error}\n")
        
        return False
    
    if warnings:
        print("\n‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        for warning in warnings:
            print(f"   {warning}")
    
    print("‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏")
    return True

def monitor_loop():
    """–ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
    print("=" * 60)
    print("–ú–û–ù–ò–¢–û–†–ò–ù–ì –¶–ï–õ–û–°–¢–ù–û–°–¢–ò –§–ê–ô–õ–û–í")
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ {CHECK_INTERVAL/60} –º–∏–Ω—É—Ç")
    print("=" * 60)
    
    while True:
        try:
            is_ok = check_integrity()
            
            if not is_ok:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–ª–µ—Ä—Ç (–º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ)
                print("\nüî¥ –¢–†–ï–ë–£–ï–¢–°–Ø –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò!")
                print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 SCRIPTS/update_documentation.py")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            print(f"\n–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ {CHECK_INTERVAL/60} –º–∏–Ω—É—Ç...")
            time.sleep(CHECK_INTERVAL)
            
        except KeyboardInterrupt:
            print("\n\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
            time.sleep(60)  # –ü—Ä–∏ –æ—à–∏–±–∫–µ –∂–¥–µ–º –º–∏–Ω—É—Ç—É

if __name__ == "__main__":
    # –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏–ª–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == "--once":
        # –û–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ –≤—ã—Ö–æ–¥
        check_integrity()
    else:
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        monitor_loop()