#!/bin/bash
# üåå GALAXY DEVELOPERS SYSTEM LAUNCHER
# –ó–∞–ø—É—Å–∫ –≤—Å–µ–π —ç–∫–æ—Å–∏—Å—Ç–µ–º—ã

echo "üåå ===================================="
echo "   GALAXY DEVELOPERS SYSTEM v2.0     "
echo "==================================== üåå"
echo ""

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m'

# –ü—É—Ç–∏
INTERFACE_PATH="/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/interface"
DOCUMENTS_PATH="/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem"
BACKEND_PATH="$INTERFACE_PATH/backend"

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ—Ä—Ç–∞
check_port() {
    if lsof -Pi :$1 -sTCP:LISTEN -t >/dev/null ; then
        return 0
    else
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –Ω–∞ –ø–æ—Ä—Ç—É
kill_port() {
    if check_port $1; then
        echo -e "${YELLOW}‚ö†Ô∏è  –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç $1...${NC}"
        lsof -ti:$1 | xargs kill -9 2>/dev/null
        sleep 1
    fi
}

echo -e "${CYAN}üîß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ—Ä—Ç—ã
kill_port 8765  # WebSocket
kill_port 8080  # HTTP API
kill_port 8000  # Interface

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
echo -e "${BLUE}üê≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ Docker...${NC}"
if ! docker info > /dev/null 2>&1; then
    echo -e "${RED}‚ùå Docker –Ω–µ –∑–∞–ø—É—â–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ Docker Desktop${NC}"
    exit 1
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—É DocumentsSystem
echo -e "${PURPLE}üì¶ –ó–∞–ø—É—Å–∫ DocumentsSystem –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã...${NC}"
cd "$DOCUMENTS_PATH"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º docker-compose.minimal.yml
if [ -f "docker-compose.minimal.yml" ]; then
    echo -e "${GREEN}‚úì –ù–∞–π–¥–µ–Ω docker-compose.minimal.yml${NC}"
    docker-compose -f docker-compose.minimal.yml up -d postgres redis 2>/dev/null
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ë–î –∏ Redis...${NC}"
    sleep 5
else
    echo -e "${YELLOW}‚ö†Ô∏è  docker-compose.minimal.yml –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ Docker${NC}"
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º Pipeline Server
echo -e "${CYAN}üöÄ –ó–∞–ø—É—Å–∫ Pipeline Server...${NC}"
cd "$BACKEND_PATH"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ ! -d "venv" ]; then
    echo -e "${YELLOW}üì¶ –°–æ–∑–¥–∞–Ω–∏–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è...${NC}"
    python3 -m venv venv
    source venv/bin/activate
    pip install websockets aiohttp aiohttp-cors redis psycopg2-binary > /dev/null 2>&1
else
    source venv/bin/activate
fi

# –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
nohup python3 pipeline_server.py > pipeline.log 2>&1 &
PIPELINE_PID=$!
echo -e "${GREEN}‚úì Pipeline Server –∑–∞–ø—É—â–µ–Ω (PID: $PIPELINE_PID)${NC}"

# –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
echo -e "${BLUE}üåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...${NC}"
cd "$INTERFACE_PATH"

# –ü—Ä–æ—Å—Ç–æ–π HTTP —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
python3 -m http.server 8000 > /dev/null 2>&1 &
INTERFACE_PID=$!
echo -e "${GREEN}‚úì –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø—É—â–µ–Ω (PID: $INTERFACE_PID)${NC}"

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ñ–∞–π–ª–æ–≤ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
if [ -f "$DOCUMENTS_PATH/file_monitor.py" ]; then
    echo -e "${PURPLE}üëÅÔ∏è  –ó–∞–ø—É—Å–∫ File Monitor...${NC}"
    cd "$DOCUMENTS_PATH"
    nohup python3 file_monitor.py > monitor.log 2>&1 &
    MONITOR_PID=$!
    echo -e "${GREEN}‚úì File Monitor –∑–∞–ø—É—â–µ–Ω (PID: $MONITOR_PID)${NC}"
fi

echo ""
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${GREEN}‚ú® –°–ò–°–¢–ï–ú–ê –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù–ê! ‚ú®${NC}"
echo -e "${GREEN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo ""
echo -e "${CYAN}üìç –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:${NC}"
echo -e "   ${BLUE}‚Ä¢ –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å:${NC} http://localhost:8000"
echo -e "   ${BLUE}‚Ä¢ Pipeline API:${NC} http://localhost:8080"
echo -e "   ${BLUE}‚Ä¢ WebSocket:${NC} ws://localhost:8765"
echo ""
echo -e "${YELLOW}üí° –ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:${NC}"
echo -e "   ‚Ä¢ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å: ${CYAN}./stop_galaxy.sh${NC}"
echo -e "   ‚Ä¢ –õ–æ–≥–∏: ${CYAN}tail -f $BACKEND_PATH/pipeline.log${NC}"
echo -e "   ‚Ä¢ –°—Ç–∞—Ç—É—Å: ${CYAN}ps aux | grep -E 'pipeline_server|http.server'${NC}"
echo ""
echo -e "${PURPLE}üöÄ –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä: ${NC}${GREEN}http://localhost:8000${NC}"
echo ""

# –°–æ—Ö—Ä–∞–Ω—è–µ–º PID'—ã –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
echo "$PIPELINE_PID" > /tmp/galaxy_pipeline.pid
echo "$INTERFACE_PID" > /tmp/galaxy_interface.pid
[ ! -z "$MONITOR_PID" ] && echo "$MONITOR_PID" > /tmp/galaxy_monitor.pid

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è graceful shutdown
trap cleanup EXIT

cleanup() {
    echo -e "\n${YELLOW}üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∏—Å—Ç–µ–º—ã...${NC}"
    [ -f /tmp/galaxy_pipeline.pid ] && kill $(cat /tmp/galaxy_pipeline.pid) 2>/dev/null
    [ -f /tmp/galaxy_interface.pid ] && kill $(cat /tmp/galaxy_interface.pid) 2>/dev/null
    [ -f /tmp/galaxy_monitor.pid ] && kill $(cat /tmp/galaxy_monitor.pid) 2>/dev/null
    rm -f /tmp/galaxy_*.pid
    echo -e "${GREEN}‚úì –°–∏—Å—Ç–µ–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞${NC}"
}

# –ñ–¥–µ–º Ctrl+C
echo -e "${CYAN}–ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∏—Å—Ç–µ–º—ã${NC}"
wait