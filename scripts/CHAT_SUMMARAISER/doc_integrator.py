#!/usr/bin/env python3
"""
Document Integration System
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–Ω–æ–≥–æ –æ–ø—ã—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞
"""

import json
import os
from datetime import datetime
from pathlib import Path
from typing import Dict, List, Any
import shutil

class DocumentIntegrator:
    def __init__(self):
        self.base_path = Path("/Volumes/Z7S/development/GalaxyDevelopers/DevSystem")
        self.docs_path = self.base_path / "DOCUMENTS"
        self.memory_path = self.base_path / "memory"
        self.experience_path = self.docs_path / "EXPERIENCE"
        self.patterns_path = self.docs_path / "PATTERNS"
        
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.experience_path.mkdir(parents=True, exist_ok=True)
        self.patterns_path.mkdir(parents=True, exist_ok=True)
        
    def integrate_experience(self, experience_file: str) -> Dict[str, Any]:
        """
        –ò–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–π –æ–ø—ã—Ç –≤ —Å–∏—Å—Ç–µ–º—É –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–∞
        """
        with open(experience_file, 'r', encoding='utf-8') as f:
            experience = json.load(f)
        
        results = {
            'errors_documented': 0,
            'discoveries_documented': 0,
            'patterns_created': 0,
            'memory_updated': False
        }
        
        # 1. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
        if experience.get('errors'):
            error_doc = self.create_error_documentation(experience['errors'])
            error_file = self.experience_path / f"errors_{datetime.now().strftime('%Y%m%d')}.md"
            with open(error_file, 'w', encoding='utf-8') as f:
                f.write(error_doc)
            results['errors_documented'] = len(experience['errors'])
            
        # 2. –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è
        if experience.get('discoveries'):
            discovery_doc = self.create_discovery_documentation(experience['discoveries'])
            discovery_file = self.experience_path / f"discoveries_{datetime.now().strftime('%Y%m%d')}.md"
            with open(discovery_file, 'w', encoding='utf-8') as f:
                f.write(discovery_doc)
            results['discoveries_documented'] = len(experience['discoveries'])
            
        # 3. –°–æ–∑–¥–∞–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –æ–ø—ã—Ç–∞
        patterns = self.extract_patterns(experience)
        if patterns:
            for pattern_name, pattern_content in patterns.items():
                pattern_file = self.patterns_path / f"{pattern_name}.md"
                with open(pattern_file, 'w', encoding='utf-8') as f:
                    f.write(pattern_content)
                results['patterns_created'] += 1
                
        # 4. –û–±–Ω–æ–≤–ª—è–µ–º memory —Å–∏—Å—Ç–µ–º—É
        self.update_memory_system(experience)
        results['memory_updated'] = True
        
        return results
    
    def create_error_documentation(self, errors: List[str]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –æ—à–∏–±–∫–∞–º
        """
        doc = ["# üî¥ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –û–®–ò–ë–û–ö"]
        doc.append(f"\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        doc.append("\n## –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã\n")
        
        for i, error in enumerate(errors, 1):
            # –ò–∑–≤–ª–µ–∫–∞–µ–º timestamp –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
            parts = error.split(": ", 1)
            if len(parts) == 2:
                timestamp, description = parts
                doc.append(f"### {i}. –û—à–∏–±–∫–∞ –≤ {timestamp}")
                doc.append(f"\n{description}\n")
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
                if "RuntimeError: no running event loop" in description:
                    doc.append("**–†–µ—à–µ–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `loop.call_soon_threadsafe()` –¥–ª—è thread-safe async –≤—ã–∑–æ–≤–æ–≤\n")
                elif "modal" in description.lower():
                    doc.append("**–†–µ—à–µ–Ω–∏–µ**: –ü—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ\n")
                elif "timezone" in description.lower():
                    doc.append("**–†–µ—à–µ–Ω–∏–µ**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å `tzinfo=timezone.utc` –¥–ª—è datetime –æ–±—ä–µ–∫—Ç–æ–≤\n")
        
        doc.append("\n## –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ —É—Ä–æ–∫–∏\n")
        doc.append("- –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ")
        doc.append("- –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å thread-safe –º–µ—Ç–æ–¥—ã –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π")
        doc.append("- –ü—Ä–∞–≤–∏–ª—å–Ω–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤")
        
        return "\n".join(doc)
    
    def create_discovery_documentation(self, discoveries: List[str]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –æ—Ç–∫—Ä—ã—Ç–∏—è–º
        """
        doc = ["# üü¢ –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–Ø –û–¢–ö–†–´–¢–ò–ô"]
        doc.append(f"\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        doc.append("\n## –£—Å–ø–µ—à–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è\n")
        
        for i, discovery in enumerate(discoveries, 1):
            parts = discovery.split(": ", 1)
            if len(parts) == 2:
                timestamp, description = parts
                doc.append(f"### {i}. –û—Ç–∫—Ä—ã—Ç–∏–µ –≤ {timestamp}")
                doc.append(f"\n{description}\n")
        
        doc.append("\n## –ö–ª—é—á–µ–≤—ã–µ –∏–Ω—Å–∞–π—Ç—ã\n")
        doc.append("- –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª—å–Ω–æ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å")
        doc.append("- Proximity detection —É–ª—É—á—à–∞–µ—Ç UX –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ")
        doc.append("- Pipeline —Å—Ç–∞—Ç—É—Å—ã –ø–æ–º–æ–≥–∞—é—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å")
        
        return "\n".join(doc)
    
    def extract_patterns(self, experience: Dict) -> Dict[str, str]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏–∑ –æ–ø—ã—Ç–∞
        """
        patterns = {}
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è File Observer
        if any("File Observer" in str(e) for e in experience.get('errors', [])):
            patterns['file_observer_pattern'] = self.create_file_observer_pattern()
            
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
        if any("modal" in str(e).lower() for e in experience.get('errors', [])):
            patterns['modal_management_pattern'] = self.create_modal_pattern()
            
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Pipeline –¥–∏–∑–∞–π–Ω–∞
        if experience.get('file_changes'):
            pipeline_files = [f for f in experience['file_changes'] 
                            if 'pipeline' in f.get('file', '').lower()]
            if pipeline_files:
                patterns['pipeline_design_pattern'] = self.create_pipeline_pattern()
        
        return patterns
    
    def create_file_observer_pattern(self) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è File Observer
        """
        return """# üìã –ü–ê–¢–¢–ï–†–ù: Thread-Safe File Observer

## –ü—Ä–æ–±–ª–µ–º–∞
RuntimeError: no running event loop –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–æ–≤—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π

## –†–µ—à–µ–Ω–∏–µ
```python
try:
    loop = asyncio.get_event_loop()
    if loop and loop.is_running():
        loop.call_soon_threadsafe(
            lambda: asyncio.create_task(
                self.broadcast_to_websockets(change_data)
            )
        )
except RuntimeError:
    pass
```

## –ö–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å
- –ü—Ä–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö callback'–æ–≤ —Å async –∫–æ–¥–æ–º
- –ü—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å watchdog –∏ asyncio
- –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ thread-safe –æ–ø–µ—Ä–∞—Ü–∏–π

## –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞
‚úÖ –ò–∑–±–µ–≥–∞–µ—Ç RuntimeError
‚úÖ Thread-safe
‚úÖ –ù–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–π –ø–æ—Ç–æ–∫
"""
    
    def create_modal_pattern(self) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω
        """
        return """# üìã –ü–ê–¢–¢–ï–†–ù: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏

## –ü—Ä–æ–±–ª–µ–º–∞
–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —ç–∫–∑–µ–º–ø–ª—è—Ä—ã –º–æ–¥–∞–ª—å–Ω—ã—Ö –æ–∫–æ–Ω –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏

## –†–µ—à–µ–Ω–∏–µ
```javascript
// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —É–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–æ–¥–∞–ª—å–Ω—ã–π
const existingModal = document.getElementById('settings-modal');
if (existingModal) {
    existingModal.remove();
}

// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º ID
const modal = document.createElement('div');
modal.id = 'settings-modal';
modal.className = 'modal';
```

## –ü—Ä–∏–Ω—Ü–∏–ø—ã
1. –í—Å–µ–≥–¥–∞ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ ID
3. –ü—Ä–∞–≤–∏–ª—å–Ω–æ –æ—á–∏—â–∞—Ç—å –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
4. –ò–∑–±–µ–≥–∞—Ç—å —É—Ç–µ—á–µ–∫ –ø–∞–º—è—Ç–∏
"""
    
    def create_pipeline_pattern(self) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è Pipeline –¥–∏–∑–∞–π–Ω–∞
        """
        return """# üìã –ü–ê–¢–¢–ï–†–ù: Pipeline Status Design

## –í–∏–∑—É–∞–ª—å–Ω–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞
```
INBOX ‚Üí RESEARCH ‚Üí DESIGN ‚Üí CONTENT ‚Üí DEVELOPMENT ‚Üí REVIEW ‚Üí DEPLOY
```

## –ö–ª—é—á–µ–≤—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
1. **–ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω**: `linear-gradient(135deg, #667eea 0%, #764ba2 100%)`
2. **–°—Ç–∞—Ç—É—Å—ã —ç—Ç–∞–ø–æ–≤**: ‚úì (–≥–æ—Ç–æ–≤–æ), ‚öô (–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ), ‚è∏ (–æ–∂–∏–¥–∞–Ω–∏–µ)
3. **–ê–Ω–∏–º–∞—Ü–∏–∏**: pulse –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
4. **Proximity detection**: —Ä–µ–∞–∫—Ü–∏—è –Ω–∞ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫—É—Ä—Å–æ—Ä–∞

## CSS —Å—Ç–∏–ª–∏
```css
.pipeline-status {
    background: linear-gradient(135deg, 
        rgba(102, 126, 234, 0.1) 0%, 
        rgba(118, 75, 162, 0.1) 100%);
    border-radius: 12px;
    padding: 16px;
}

.stage.active {
    background: linear-gradient(135deg, 
        rgba(102, 126, 234, 0.2) 0%, 
        rgba(118, 75, 162, 0.2) 100%);
    border: 1px solid rgba(102, 126, 234, 0.4);
}
```

## –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –º–Ω–æ–≥–æ—ç—Ç–∞–ø–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ —Å –∫—Ä–∞—Å–∏–≤—ã–º –≥—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–º –¥–∏–∑–∞–π–Ω–æ–º
"""
    
    def update_memory_system(self, experience: Dict) -> None:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç memory —Å–∏—Å—Ç–µ–º—É –ø—Ä–æ–µ–∫—Ç–∞
        """
        memory_file = self.memory_path / "CLAUDE.md"
        
        # –ß–∏—Ç–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
        existing_content = ""
        if memory_file.exists():
            with open(memory_file, 'r', encoding='utf-8') as f:
                existing_content = f.read()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å–µ–∫—Ü–∏—é —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º
        new_section = f"""

## üìö –ò–ó–í–õ–ï–ß–ï–ù–ù–´–ô –û–ü–´–¢ ({datetime.now().strftime('%Y-%m-%d')})

### –ö–ª—é—á–µ–≤—ã–µ –æ—à–∏–±–∫–∏ –∏ —Ä–µ—à–µ–Ω–∏—è
- **File Observer crash**: –†–µ—à–µ–Ω–æ —á–µ—Ä–µ–∑ `loop.call_soon_threadsafe()`
- **Modal multiplication**: –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º
- **Timezone issues**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ `tzinfo=timezone.utc`

### –£—Å–ø–µ—à–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã
- Pipeline Status —Å –≥—Ä–∞–¥–∏–µ–Ω—Ç–∞–º–∏ (#667eea ‚Üí #764ba2)
- Proximity detection –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è UX
- Agent Status –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å –∞–Ω–∏–º–∞—Ü–∏—è–º–∏

### –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
- –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(experience.get('file_changes', []))}
- –û—Å–Ω–æ–≤–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è: interface/index.html, interface/css/main.css, interface/js/app.js

### –í–∞–∂–Ω—ã–µ —É—Ä–æ–∫–∏
1. –í–°–ï–ì–î–ê –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –Ω–æ–≤–æ–≥–æ
2. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å thread-safe –º–µ—Ç–æ–¥—ã –¥–ª—è async –æ–ø–µ—Ä–∞—Ü–∏–π  
3. –°–ª–µ–¥–æ–≤–∞—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –ø–∞—Ç—Ç–µ—Ä–Ω–∞–º –ø—Ä–æ–µ–∫—Ç–∞
4. –ù–ï —Å–æ–∑–¥–∞–≤–∞—Ç—å –º—É–ª—è–∂–∏ - —Ç–æ–ª—å–∫–æ —Ä–∞–±–æ—á–∏–π –∫–æ–¥
"""
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        with open(memory_file, 'w', encoding='utf-8') as f:
            f.write(existing_content + new_section)
    
    def create_integration_report(self, results: Dict[str, Any]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ–± –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        """
        report = ["# üìä –û–¢–ß–ï–¢ –û–ë –ò–ù–¢–ï–ì–†–ê–¶–ò–ò –û–ü–´–¢–ê"]
        report.append(f"\nüìÖ –î–∞—Ç–∞: {datetime.now().strftime('%Y-%m-%d %H:%M')}")
        report.append("\n## –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏\n")
        
        report.append(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ—à–∏–±–æ–∫: {results['errors_documented']}")
        report.append(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∏–π: {results['discoveries_documented']}")
        report.append(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤: {results['patterns_created']}")
        report.append(f"‚úÖ Memory —Å–∏—Å—Ç–µ–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {'–î–∞' if results['memory_updated'] else '–ù–µ—Ç'}")
        
        report.append("\n## –†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤\n")
        report.append(f"- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—à–∏–±–æ–∫: `{self.experience_path}/errors_*.md`")
        report.append(f"- –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏–π: `{self.experience_path}/discoveries_*.md`")
        report.append(f"- –ü–∞—Ç—Ç–µ—Ä–Ω—ã: `{self.patterns_path}/*.md`")
        report.append(f"- Memory: `{self.memory_path}/CLAUDE.md`")
        
        report.append("\n## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏\n")
        report.append("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é")
        report.append("2. –ü—Ä–∏–º–µ–Ω–∏—Ç—å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã –≤ –Ω–æ–≤—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞—Ö")
        report.append("3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã")
        
        return "\n".join(report)


def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
    """
    print("üöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –æ–ø—ã—Ç–∞ —Å –¥–æ–∫—É–º–µ–Ω—Ç–æ–æ–±–æ—Ä–æ—Ç–æ–º...")
    
    # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –∏–∑–≤–ª–µ—á–µ–Ω–Ω—ã–º –æ–ø—ã—Ç–æ–º
    experience_file = "/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/SCRIPTS/CHAT_SUMMARAISER/experience_20250812_0044.json"
    
    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ç–æ—Ä
    integrator = DocumentIntegrator()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
    results = integrator.integrate_experience(experience_file)
    
    # –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç
    report = integrator.create_integration_report(results)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á–µ—Ç
    report_file = Path("/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/DOCUMENTS/integration_report.md")
    with open(report_file, 'w', encoding='utf-8') as f:
        f.write(report)
    
    print(f"‚úÖ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìÑ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_file}")
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
    print(f"  - –û—à–∏–±–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: {results['errors_documented']}")
    print(f"  - –û—Ç–∫—Ä—ã—Ç–∏–π –¥–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ: {results['discoveries_documented']}")
    print(f"  - –ü–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Å–æ–∑–¥–∞–Ω–æ: {results['patterns_created']}")
    print(f"  - Memory –æ–±–Ω–æ–≤–ª–µ–Ω: {'‚úì' if results['memory_updated'] else '‚úó'}")


if __name__ == "__main__":
    main()