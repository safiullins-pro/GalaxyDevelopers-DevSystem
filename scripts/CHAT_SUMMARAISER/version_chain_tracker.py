#!/usr/bin/env python3
"""
Version Chain Tracker - –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
–ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª—é–±—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ –∏–∑ –∏—Å—Ç–æ—Ä–∏–∏
"""

import json
import hashlib
from pathlib import Path
from datetime import datetime, timezone
from typing import List, Dict, Any, Optional

class VersionChainTracker:
    def __init__(self, log_path: str):
        self.log_path = Path(log_path)
        self.version_chains = {}  # file_path -> list of versions
        self.version_index = {}   # hash -> version data
        
    def build_chain(self, start_time: Optional[datetime] = None, end_time: Optional[datetime] = None):
        """
        –°—Ç—Ä–æ–∏—Ç —Ü–µ–ø–æ—á–∫—É –≤–µ—Ä—Å–∏–π –¥–ª—è –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
        """
        with open(self.log_path, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    entry = json.loads(line)
                    
                    # –§–∏–ª—å—Ç—Ä –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
                    if 'timestamp' in entry:
                        entry_time = datetime.fromisoformat(
                            entry['timestamp'].replace('Z', '+00:00')
                        )
                        
                        if start_time and entry_time < start_time:
                            continue
                        if end_time and entry_time > end_time:
                            continue
                    
                    # –ò—â–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                    if 'toolUseResult' in entry and 'filePath' in entry['toolUseResult']:
                        self._add_version(entry)
                        
                except json.JSONDecodeError:
                    continue
    
    def _add_version(self, entry: Dict):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –≤–µ—Ä—Å–∏—é –≤ —Ü–µ–ø–æ—á–∫—É
        """
        result = entry['toolUseResult']
        file_path = result['filePath']
        
        # –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏—é
        version = {
            'timestamp': entry['timestamp'],
            'file_path': file_path,
            'old_string': result.get('oldString', ''),
            'new_string': result.get('newString', ''),
            'original_file': result.get('originalFile', ''),
            'action': result.get('action', 'edit'),  # edit, create, delete
            'session_id': entry.get('sessionId', ''),
            'message_uuid': entry.get('uuid', ''),
            'parent_hash': None,  # —Ö—ç—à –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏
            'content_hash': None,  # —Ö—ç—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            'version_number': 0
        }
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Ö—ç—à –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if version['original_file']:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
            content = version['original_file']
            if version['old_string'] and version['old_string'] in content:
                content = content.replace(version['old_string'], version['new_string'])
            version['result_content'] = content
        else:
            version['result_content'] = version['new_string']
        
        # –•—ç—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        version['content_hash'] = hashlib.sha256(
            version['result_content'].encode()
        ).hexdigest()[:12]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ü–µ–ø–æ—á–∫—É
        if file_path not in self.version_chains:
            self.version_chains[file_path] = []
        
        # –°–≤—è–∑—ã–≤–∞–µ–º —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–µ–π
        if self.version_chains[file_path]:
            prev_version = self.version_chains[file_path][-1]
            version['parent_hash'] = prev_version['content_hash']
            version['version_number'] = prev_version['version_number'] + 1
        
        self.version_chains[file_path].append(version)
        self.version_index[version['content_hash']] = version
    
    def get_file_history(self, file_path: str) -> List[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤–µ—Ä—Å–∏–π —Ñ–∞–π–ª–∞
        """
        return self.version_chains.get(file_path, [])
    
    def get_version_by_hash(self, content_hash: str) -> Optional[Dict]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤–µ—Ä—Å–∏—é –ø–æ —Ö—ç—à—É
        """
        return self.version_index.get(content_hash)
    
    def get_version_at_time(self, file_path: str, target_time: datetime) -> Optional[Dict]:
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞ –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤—Ä–µ–º–µ–Ω–∏
        """
        versions = self.get_file_history(file_path)
        
        for version in reversed(versions):
            version_time = datetime.fromisoformat(
                version['timestamp'].replace('Z', '+00:00')
            )
            if version_time <= target_time:
                return version
        
        return None
    
    def restore_version(self, file_path: str, version_hash: str, output_path: str):
        """
        –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –≤–µ—Ä—Å–∏—é —Ñ–∞–π–ª–∞
        """
        version = self.get_version_by_hash(version_hash)
        if not version:
            raise ValueError(f"Version {version_hash} not found")
        
        with open(output_path, 'w', encoding='utf-8') as f:
            f.write(version['result_content'])
        
        return version
    
    def generate_diff_chain(self, file_path: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ü–µ–ø–æ—á–∫—É diff –¥–ª—è —Ñ–∞–π–ª–∞
        """
        versions = self.get_file_history(file_path)
        
        diff_chain = []
        diff_chain.append(f"# Version Chain for {file_path}\n")
        diff_chain.append(f"Total versions: {len(versions)}\n\n")
        
        for i, version in enumerate(versions):
            diff_chain.append(f"## Version {version['version_number']} [{version['content_hash']}]")
            diff_chain.append(f"Time: {version['timestamp']}")
            
            if version['parent_hash']:
                diff_chain.append(f"Parent: {version['parent_hash']}")
            
            if version['old_string']:
                diff_chain.append("\n### Removed:")
                diff_chain.append("```")
                diff_chain.append(version['old_string'][:500])
                if len(version['old_string']) > 500:
                    diff_chain.append("... truncated ...")
                diff_chain.append("```")
            
            if version['new_string']:
                diff_chain.append("\n### Added:")
                diff_chain.append("```")
                diff_chain.append(version['new_string'][:500])
                if len(version['new_string']) > 500:
                    diff_chain.append("... truncated ...")
                diff_chain.append("```")
            
            diff_chain.append("\n---\n")
        
        return '\n'.join(diff_chain)
    
    def save_version_database(self, output_file: str):
        """
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –±–∞–∑—É –≤–µ—Ä—Å–∏–π –≤ JSON
        """
        database = {
            'generated_at': datetime.now().isoformat(),
            'total_files': len(self.version_chains),
            'total_versions': sum(len(v) for v in self.version_chains.values()),
            'files': {}
        }
        
        for file_path, versions in self.version_chains.items():
            database['files'][file_path] = {
                'versions': len(versions),
                'first_change': versions[0]['timestamp'] if versions else None,
                'last_change': versions[-1]['timestamp'] if versions else None,
                'version_hashes': [v['content_hash'] for v in versions],
                'chain': [
                    {
                        'hash': v['content_hash'],
                        'parent': v['parent_hash'],
                        'timestamp': v['timestamp'],
                        'version': v['version_number']
                    }
                    for v in versions
                ]
            }
        
        with open(output_file, 'w', encoding='utf-8') as f:
            json.dump(database, f, indent=2, ensure_ascii=False)
    
    def generate_graph_viz(self, file_path: str) -> str:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –≥—Ä–∞—Ñ –≤–µ—Ä—Å–∏–π –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
        """
        versions = self.get_file_history(file_path)
        
        dot = []
        dot.append("digraph versions {")
        dot.append('  rankdir=TB;')
        dot.append('  node [shape=box];')
        
        for version in versions:
            label = f"v{version['version_number']}\\n{version['content_hash'][:8]}\\n{version['timestamp'][:19]}"
            dot.append(f'  "{version["content_hash"]}" [label="{label}"];')
            
            if version['parent_hash']:
                dot.append(f'  "{version["parent_hash"]}" -> "{version["content_hash"]}";')
        
        dot.append("}")
        
        return '\n'.join(dot)


def main():
    # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
    log_file = "/Users/safiullins_pro/.claude/projects/-Users-safiullins-pro/42545c12-a4cb-4e8c-a90c-c4feccd0360b.jsonl"
    
    print("üîó Building version chains...")
    tracker = VersionChainTracker(log_file)
    
    # –°—Ç—Ä–æ–∏–º —Ü–µ–ø–æ—á–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    start_time = datetime(2025, 8, 12, 0, 0, 0, tzinfo=timezone.utc)
    end_time = datetime(2025, 8, 13, 0, 0, 0, tzinfo=timezone.utc)
    
    tracker.build_chain(start_time, end_time)
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    print(f"\nüìä Version Chain Statistics:")
    print(f"Files tracked: {len(tracker.version_chains)}")
    print(f"Total versions: {sum(len(v) for v in tracker.version_chains.values())}")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞–∑—É –≤–µ—Ä—Å–∏–π
    output_dir = Path("/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/SCRIPTS/CHAT_SUMMARAISER")
    
    db_file = output_dir / "version_database.json"
    tracker.save_version_database(db_file)
    print(f"\nüíæ Version database saved to: {db_file}")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º diff chains –¥–ª—è –≤–∞–∂–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    important_files = [
        "/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/interface/index.html",
        "/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/interface/css/main.css",
        "/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/interface/js/app.js"
    ]
    
    for file_path in important_files:
        if file_path in tracker.version_chains:
            versions = tracker.get_file_history(file_path)
            print(f"\nüìù {Path(file_path).name}: {len(versions)} versions")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º diff chain
            diff_file = output_dir / f"diff_chain_{Path(file_path).stem}.md"
            with open(diff_file, 'w', encoding='utf-8') as f:
                f.write(tracker.generate_diff_chain(file_path))
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥—Ä–∞—Ñ
            graph_file = output_dir / f"graph_{Path(file_path).stem}.dot"
            with open(graph_file, 'w', encoding='utf-8') as f:
                f.write(tracker.generate_graph_viz(file_path))
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö—ç—à–∏ –≤–µ—Ä—Å–∏–π
            for v in versions[-3:]:  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –≤–µ—Ä—Å–∏–∏
                print(f"  - v{v['version_number']} [{v['content_hash']}] at {v['timestamp'][:19]}")
    
    # –ü—Ä–∏–º–µ—Ä –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
    print("\nüîß Version restoration example:")
    print("To restore any version, use:")
    print("tracker.restore_version('file_path', 'version_hash', 'output_path')")


if __name__ == "__main__":
    main()