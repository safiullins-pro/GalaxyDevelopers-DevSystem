#!/usr/bin/env python3
"""
Claude Log Parser & Dialogue Extractor
–ü–∞—Ä—Å–µ—Ä –ª–æ–≥–æ–≤ Claude –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–º–º–∞—Ä–∏
"""

import json
import os
from datetime import datetime, timedelta
from pathlib import Path
from typing import List, Dict, Any

class ClaudeLogParser:
    def __init__(self, log_path: str):
        self.log_path = Path(log_path)
        self.dialogues = []
        
    def parse_jsonl(self, start_time: datetime, end_time: datetime) -> List[Dict]:
        """
        –ü–∞—Ä—Å–∏—Ç JSONL —Ñ–∞–π–ª –∏ –∏–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        """
        extracted_messages = []
        
        with open(self.log_path, 'r', encoding='utf-8') as f:
            for line in f:
                try:
                    entry = json.loads(line)
                    
                    # –ü–∞—Ä—Å–∏–º timestamp
                    if 'timestamp' in entry:
                        entry_time = datetime.fromisoformat(
                            entry['timestamp'].replace('Z', '+00:00')
                        )
                        
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ –≤ –Ω–∞—à –ø–µ—Ä–∏–æ–¥
                        if start_time <= entry_time <= end_time:
                            extracted_messages.append(entry)
                            
                except json.JSONDecodeError:
                    continue
                    
        return extracted_messages
    
    def extract_dialogue(self, messages: List[Dict]) -> str:
        """
        –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∏—Ç–∞–µ–º—ã–π –¥–∏–∞–ª–æ–≥
        """
        dialogue = []
        
        for msg in messages:
            timestamp = msg.get('timestamp', '')
            msg_type = msg.get('type', '')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–æ–ª—å –∏ –∫–æ–Ω—Ç–µ–Ω—Ç
            if 'message' in msg:
                role = msg['message'].get('role', 'unknown')
                content = msg['message'].get('content', '')
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º content (–º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –º–∞—Å—Å–∏–≤–æ–º)
                if isinstance(content, list):
                    text_parts = []
                    for part in content:
                        if isinstance(part, dict):
                            if part.get('type') == 'text':
                                text_parts.append(part.get('text', ''))
                            elif part.get('type') == 'tool_result':
                                text_parts.append(f"[TOOL RESULT: {part.get('content', '')}]")
                        else:
                            text_parts.append(str(part))
                    content = '\n'.join(text_parts)
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                dialogue.append(f"[{timestamp}] {role.upper()}:")
                dialogue.append(content)
                dialogue.append("-" * 80)
                
                # –û—Ç–º–µ—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
                if 'toolUseResult' in msg:
                    tool_result = msg['toolUseResult']
                    if 'filePath' in tool_result:
                        dialogue.append(f"üìù FILE CHANGED: {tool_result['filePath']}")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –±—ã–ª–æ –¥–æ
                        if 'oldString' in tool_result:
                            dialogue.append("‚ùå OLD CODE:")
                            dialogue.append("```")
                            dialogue.append(tool_result['oldString'])
                            dialogue.append("```")
                        
                        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ —Å—Ç–∞–ª–æ
                        if 'newString' in tool_result:
                            dialogue.append("‚úÖ NEW CODE:")
                            dialogue.append("```")
                            dialogue.append(tool_result['newString'])
                            dialogue.append("```")
                        
                        # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª —Ü–µ–ª–∏–∫–æ–º
                        if 'originalFile' in tool_result and len(tool_result['originalFile']) < 5000:
                            dialogue.append("üìÑ ORIGINAL FILE (first 1000 chars):")
                            dialogue.append(tool_result['originalFile'][:1000] + "...")
                        
                        dialogue.append("-" * 80)
        
        return '\n'.join(dialogue)
    
    def extract_experience(self, messages: List[Dict]) -> Dict[str, List[str]]:
        """
        –ò–∑–≤–ª–µ–∫–∞–µ—Ç –æ–ø—ã—Ç –∏–∑ –¥–∏–∞–ª–æ–≥–∞: –æ—à–∏–±–∫–∏, –æ—Ç–∫—Ä—ã—Ç–∏—è, —É–±–µ–∂–¥–µ–Ω–∏—è
        """
        experience = {
            'errors': [],
            'discoveries': [],
            'beliefs': [],
            'file_changes': []
        }
        
        for msg in messages:
            content = ""
            if 'message' in msg and 'content' in msg['message']:
                content = str(msg['message']['content']).lower()
            
            # –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –æ—à–∏–±–æ–∫
            error_patterns = ['error', 'failed', '–Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç', 'broken', 'issue']
            for pattern in error_patterns:
                if pattern in content:
                    experience['errors'].append(
                        f"{msg.get('timestamp', '')}: {content[:100]}..."
                    )
                    break
            
            # –ò—â–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è
            discovery_patterns = ['—Ä–∞–±–æ—Ç–∞–µ—Ç', 'success', 'fixed', '—Ä–µ—à–µ–Ω–æ', 'found']
            for pattern in discovery_patterns:
                if pattern in content:
                    experience['discoveries'].append(
                        f"{msg.get('timestamp', '')}: {content[:100]}..."
                    )
                    break
            
            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            if 'toolUseResult' in msg and 'filePath' in msg['toolUseResult']:
                experience['file_changes'].append({
                    'timestamp': msg.get('timestamp', ''),
                    'file': msg['toolUseResult']['filePath'],
                    'action': 'modified'
                })
        
        return experience
    
    def create_summary(self, messages: List[Dict]) -> str:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫—Ä–∞—Ç–∫–æ–µ —Å–∞–º–º–∞—Ä–∏ –¥–∏–∞–ª–æ–≥–∞
        """
        summary = []
        summary.append("üìä DIALOGUE SUMMARY")
        summary.append("=" * 50)
        
        # –ü–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏
        if messages:
            start = messages[0].get('timestamp', 'unknown')
            end = messages[-1].get('timestamp', 'unknown')
            summary.append(f"Period: {start} to {end}")
            summary.append(f"Total messages: {len(messages)}")
        
        # –ü–æ–¥—Å—á–µ—Ç –ø–æ —Ä–æ–ª—è–º
        role_counts = {}
        for msg in messages:
            if 'message' in msg:
                role = msg['message'].get('role', 'unknown')
                role_counts[role] = role_counts.get(role, 0) + 1
        
        summary.append("\nMessage breakdown:")
        for role, count in role_counts.items():
            summary.append(f"  - {role}: {count}")
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—ã—Ç
        experience = self.extract_experience(messages)
        
        summary.append(f"\nüî¥ Errors found: {len(experience['errors'])}")
        summary.append(f"üü¢ Discoveries: {len(experience['discoveries'])}")
        summary.append(f"üìù Files changed: {len(experience['file_changes'])}")
        
        if experience['file_changes']:
            summary.append("\nModified files:")
            for change in experience['file_changes'][:10]:  # –ü–µ—Ä–≤—ã–µ 10
                summary.append(f"  - {change['file']}")
        
        return '\n'.join(summary)


def main():
    """
    –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–∞—Ä—Å–µ—Ä–∞
    """
    # –ü—É—Ç—å –∫ JSONL —Ñ–∞–π–ª—É
    log_file = "/Users/safiullins_pro/.claude/projects/-Users-safiullins-pro/42545c12-a4cb-4e8c-a90c-c4feccd0360b.jsonl"
    
    # –ü–µ—Ä–∏–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è (12 –∞–≤–≥—É—Å—Ç–∞ 2025, 00:44 - 02:44 UTC)
    from datetime import timezone
    start_time = datetime(2025, 8, 12, 0, 44, 0, tzinfo=timezone.utc)
    end_time = datetime(2025, 8, 12, 2, 44, 0, tzinfo=timezone.utc)
    
    # –°–æ–∑–¥–∞–µ–º –ø–∞—Ä—Å–µ—Ä
    parser = ClaudeLogParser(log_file)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    print("üìñ Extracting messages...")
    messages = parser.parse_jsonl(start_time, end_time)
    print(f"Found {len(messages)} messages in the specified period")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥
    dialogue = parser.extract_dialogue(messages)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∏–∞–ª–æ–≥
    output_dir = Path("/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/SCRIPTS/CHAT_SUMMARAISER")
    output_file = output_dir / f"dialogue_{start_time.strftime('%Y%m%d_%H%M')}.md"
    
    with open(output_file, 'w', encoding='utf-8') as f:
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∞–º–º–∞—Ä–∏
        summary = parser.create_summary(messages)
        f.write(summary)
        f.write("\n\n")
        f.write("=" * 80)
        f.write("\n\n")
        
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥
        f.write("üìù FULL DIALOGUE\n")
        f.write("=" * 80)
        f.write("\n\n")
        f.write(dialogue)
    
    print(f"‚úÖ Dialogue saved to: {output_file}")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–ø—ã—Ç
    experience = parser.extract_experience(messages)
    experience_file = output_dir / f"experience_{start_time.strftime('%Y%m%d_%H%M')}.json"
    
    with open(experience_file, 'w', encoding='utf-8') as f:
        json.dump(experience, f, indent=2, ensure_ascii=False)
    
    print(f"üß† Experience saved to: {experience_file}")


if __name__ == "__main__":
    main()