/**
 * –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ò –ü–†–û–í–ï–†–ö–ò
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ñ–∞–π–ª–æ–≤—ã–º –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–º –∏ pipeline
 */

class MonitoringSystem {
    constructor() {
        this.websocket = null;
        this.fsWatcher = null;
        this.pipelineStatus = {};
        this.agents = {};
        this.checks = [];
        this.isRunning = false;
        
        this.init();
    }

    init() {
        console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞...');
        
        // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WebSocket –¥–ª—è real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        this.connectWebSocket();
        
        // –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        this.startFileWatcher();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è pipeline –ø—Ä–æ–≤–µ—Ä–æ–∫
        this.initPipelineChecks();
        
        // –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã –ø—Ä–æ–≤–µ—Ä–æ–∫
        this.startMonitoring();
    }

    connectWebSocket() {
        try {
            this.websocket = new WebSocket('ws://localhost:8765/monitoring');
            
            this.websocket.onopen = () => {
                console.log('‚úÖ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω');
                this.updateStatus('connected');
            };
            
            this.websocket.onmessage = (event) => {
                const data = JSON.parse(event.data);
                this.handleMonitoringEvent(data);
            };
            
            this.websocket.onerror = (error) => {
                console.error('‚ùå WebSocket –æ—à–∏–±–∫–∞:', error);
                this.updateStatus('error');
                // –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
                setTimeout(() => this.connectWebSocket(), 5000);
            };
            
            this.websocket.onclose = () => {
                console.log('üîå WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
                this.updateStatus('disconnected');
                // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
                setTimeout(() => this.connectWebSocket(), 3000);
            };
        } catch (error) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å WebSocket:', error);
            // Fallback –Ω–∞ polling
            this.startPolling();
        }
    }

    startFileWatcher() {
        // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        const watchPaths = [
            '/Volumes/Z7S/development/GalaxyDevelopers/DevSystem/',
            '/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem/',
            '/Users/safiullins_pro/Documents/–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –¢–æ–ª—Å—Ç—ã—Ö/'
        ];
        
        // –ó–∞–ø—É—Å–∫ fswatch —á–µ—Ä–µ–∑ fetch API
        fetch('/api/monitoring/start-watcher', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                paths: watchPaths,
                excludePatterns: [
                    '.DS_Store',
                    '*.tmp',
                    '*.swp',
                    '.git/',
                    'node_modules/'
                ]
            })
        }).then(response => response.json())
          .then(data => {
              console.log('üìÇ –§–∞–π–ª–æ–≤—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω:', data);
              this.fsWatcher = data.watcherId;
          })
          .catch(error => {
              console.error('–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Ñ–∞–π–ª–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
          });
    }

    initPipelineChecks() {
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —ç—Ç–∞–ø–æ–≤ –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.checks = [
            {
                id: 'file-change',
                name: '–û–±–Ω–∞—Ä—É–∂–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π',
                status: 'idle',
                handler: this.checkFileChanges.bind(this)
            },
            {
                id: 'syntax-check',
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞',
                status: 'idle',
                handler: this.checkSyntax.bind(this)
            },
            {
                id: 'security-scan',
                name: '–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                status: 'idle',
                handler: this.checkSecurity.bind(this)
            },
            {
                id: 'compliance-check',
                name: '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è',
                status: 'idle',
                handler: this.checkCompliance.bind(this)
            },
            {
                id: 'ai-validation',
                name: 'AI –≤–∞–ª–∏–¥–∞—Ü–∏—è',
                status: 'idle',
                handler: this.checkWithAI.bind(this)
            },
            {
                id: 'integration-test',
                name: '–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç',
                status: 'idle',
                handler: this.runIntegrationTest.bind(this)
            }
        ];
    }

    startMonitoring() {
        if (this.isRunning) {
            console.log('‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω');
            return;
        }
        
        this.isRunning = true;
        console.log('üéØ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫ –∑–∞–ø—É—â–µ–Ω–∞');
        
        // –ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
        this.monitoringInterval = setInterval(() => {
            this.runChecks();
        }, 5000); // –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
        
        // –ù–µ–º–µ–¥–ª–µ–Ω–Ω—ã–π –∑–∞–ø—É—Å–∫ –ø–µ—Ä–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
        this.runChecks();
    }

    async runChecks() {
        console.log('üîç –ó–∞–ø—É—Å–∫ —Ü–∏–∫–ª–∞ –ø—Ä–æ–≤–µ—Ä–æ–∫...');
        
        for (const check of this.checks) {
            try {
                this.updateCheckStatus(check.id, 'running');
                const result = await check.handler();
                
                if (result.success) {
                    this.updateCheckStatus(check.id, 'passed');
                } else {
                    this.updateCheckStatus(check.id, 'failed', result.error);
                }
            } catch (error) {
                console.error(`–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ ${check.name}:`, error);
                this.updateCheckStatus(check.id, 'error', error.message);
            }
        }
        
        this.updatePipelineUI();
    }

    async checkFileChanges() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ñ–∞–π–ª–æ–≤
        const response = await fetch('/api/monitoring/file-changes');
        const changes = await response.json();
        
        if (changes.length > 0) {
            console.log(`üìù –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ ${changes.length} –∏–∑–º–µ–Ω–µ–Ω–∏–π`);
            this.processFileChanges(changes);
        }
        
        return { success: true, changes: changes.length };
    }

    async checkSyntax() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ –∫–æ–¥–∞
        const response = await fetch('/api/monitoring/syntax-check');
        const result = await response.json();
        
        if (result.errors && result.errors.length > 0) {
            console.error('‚ùå –ù–∞–π–¥–µ–Ω—ã —Å–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏:', result.errors);
            return { success: false, error: `${result.errors.length} –æ—à–∏–±–æ–∫` };
        }
        
        return { success: true };
    }

    async checkSecurity() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        const response = await fetch('/api/monitoring/security-scan');
        const result = await response.json();
        
        if (result.vulnerabilities && result.vulnerabilities.length > 0) {
            console.warn('‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —É—è–∑–≤–∏–º–æ—Å—Ç–∏:', result.vulnerabilities);
            return { success: false, error: `${result.vulnerabilities.length} —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π` };
        }
        
        return { success: true };
    }

    async checkCompliance() {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
        const standards = ['ISO27001', 'ITIL4', 'COBIT'];
        const results = [];
        
        for (const standard of standards) {
            const response = await fetch(`/api/monitoring/compliance/${standard}`);
            const result = await response.json();
            results.push(result);
        }
        
        const failed = results.filter(r => !r.compliant);
        if (failed.length > 0) {
            return { success: false, error: `–ù–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç ${failed.length} —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º` };
        }
        
        return { success: true };
    }

    async checkWithAI() {
        // AI –≤–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∞–≥–µ–Ω—Ç–æ–≤
        const response = await fetch('/api/agents/validate', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                agents: ['ResearchAgent', 'ReviewerAgent'],
                context: this.getCurrentContext()
            })
        });
        
        const result = await response.json();
        
        if (result.score < 95) {
            return { success: false, error: `Score: ${result.score}%` };
        }
        
        return { success: true, score: result.score };
    }

    async runIntegrationTest() {
        // –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤
        const response = await fetch('/api/monitoring/integration-test');
        const result = await response.json();
        
        if (result.failed > 0) {
            return { success: false, error: `${result.failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω–æ` };
        }
        
        return { success: true, passed: result.passed };
    }

    processFileChanges(changes) {
        changes.forEach(change => {
            // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            this.addFileChangeToUI(change);
            
            // –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            if (change.type === 'modified' || change.type === 'created') {
                this.triggerAgentProcessing(change);
            }
        });
    }

    triggerAgentProcessing(change) {
        // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ
        const agentMap = {
            '.md': 'ComposerAgent',
            '.py': 'ReviewerAgent',
            '.js': 'ReviewerAgent',
            '.json': 'IntegratorAgent',
            '.yaml': 'IntegratorAgent'
        };
        
        const ext = change.path.substring(change.path.lastIndexOf('.'));
        const agent = agentMap[ext] || 'ResearchAgent';
        
        // –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á–∏ –∞–≥–µ–Ω—Ç—É
        fetch('/api/agents/process', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                agent: agent,
                file: change.path,
                action: change.type
            })
        });
    }

    handleMonitoringEvent(data) {
        console.log('üì° –°–æ–±—ã—Ç–∏–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', data);
        
        switch (data.type) {
            case 'file_change':
                this.processFileChanges([data.change]);
                break;
            case 'agent_status':
                this.updateAgentStatus(data.agent, data.status);
                break;
            case 'pipeline_update':
                this.updatePipelineStatus(data.stage, data.status);
                break;
            case 'alert':
                this.showAlert(data.message, data.severity);
                break;
        }
    }

    updateCheckStatus(checkId, status, error = null) {
        const check = this.checks.find(c => c.id === checkId);
        if (check) {
            check.status = status;
            check.error = error;
            check.lastRun = new Date().toISOString();
        }
    }

    updatePipelineUI() {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI pipeline –≤ sidebar
        const pipelineStages = document.querySelectorAll('.stage');
        
        this.checks.forEach((check, index) => {
            if (pipelineStages[index]) {
                const stage = pipelineStages[index];
                const statusIcon = stage.querySelector('.stage-status');
                
                // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∫–ª–∞—Å—Å–æ–≤
                stage.classList.remove('active', 'error', 'warning');
                
                switch (check.status) {
                    case 'running':
                        stage.classList.add('active');
                        statusIcon.textContent = '‚öô';
                        break;
                    case 'passed':
                        statusIcon.textContent = '‚úì';
                        break;
                    case 'failed':
                        stage.classList.add('error');
                        statusIcon.textContent = '‚ùå';
                        break;
                    case 'error':
                        stage.classList.add('warning');
                        statusIcon.textContent = '‚ö†Ô∏è';
                        break;
                    default:
                        statusIcon.textContent = '‚è∏';
                }
            }
        });
    }

    updateAgentStatus(agentName, status) {
        const agentElements = document.querySelectorAll('.agent-item');
        
        agentElements.forEach(element => {
            if (element.textContent.includes(agentName)) {
                element.classList.remove('active', 'error');
                
                if (status === 'active') {
                    element.classList.add('active');
                } else if (status === 'error') {
                    element.classList.add('error');
                }
                
                const taskSpan = element.querySelector('.agent-task');
                if (taskSpan) {
                    taskSpan.textContent = status;
                }
            }
        });
    }

    updatePipelineStatus(stage, status) {
        const stageElement = document.querySelector(`[data-stage="${stage}"]`);
        if (stageElement) {
            stageElement.classList.remove('active', 'error');
            
            if (status === 'active') {
                stageElement.classList.add('active');
            } else if (status === 'error') {
                stageElement.classList.add('error');
            }
        }
    }

    addFileChangeToUI(change) {
        const chatArea = document.getElementById('chat-area');
        
        const notification = document.createElement('div');
        notification.className = 'file-change-notification';
        notification.innerHTML = `
            <div class="change-icon">üìÑ</div>
            <div class="change-details">
                <div class="change-file">${change.path.split('/').pop()}</div>
                <div class="change-type">${change.type}</div>
                <div class="change-time">${new Date().toLocaleTimeString()}</div>
            </div>
        `;
        
        chatArea.appendChild(notification);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
        chatArea.scrollTop = chatArea.scrollHeight;
    }

    showAlert(message, severity = 'info') {
        const alertContainer = document.createElement('div');
        alertContainer.className = `alert alert-${severity}`;
        alertContainer.innerHTML = `
            <span class="alert-icon">${severity === 'error' ? '‚ùå' : severity === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è'}</span>
            <span class="alert-message">${message}</span>
            <button class="alert-close" onclick="this.parentElement.remove()">√ó</button>
        `;
        
        document.body.appendChild(alertContainer);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
            alertContainer.remove();
        }, 5000);
    }

    getCurrentContext() {
        return {
            memory: window.GalaxyMemory ? window.GalaxyMemory.getContext() : {},
            pipeline: this.pipelineStatus,
            agents: this.agents,
            checks: this.checks
        };
    }

    startPolling() {
        // Fallback –Ω–∞ polling –µ—Å–ª–∏ WebSocket –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        console.log('üìä –ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞');
        
        setInterval(async () => {
            try {
                const response = await fetch('/api/monitoring/status');
                const data = await response.json();
                this.handleMonitoringEvent(data);
            } catch (error) {
                console.error('Polling error:', error);
            }
        }, 3000);
    }

    updateStatus(status) {
        const statusStrip = document.getElementById('status-strip');
        if (statusStrip) {
            statusStrip.className = `status-strip ${status}`;
        }
    }

    stop() {
        this.isRunning = false;
        
        if (this.monitoringInterval) {
            clearInterval(this.monitoringInterval);
        }
        
        if (this.websocket) {
            this.websocket.close();
        }
        
        console.log('üõë –°–∏—Å—Ç–µ–º–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const monitoring = new MonitoringSystem();

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
window.GalaxyMonitoring = monitoring;

console.log('üî• –°–∏—Å—Ç–µ–º–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê');