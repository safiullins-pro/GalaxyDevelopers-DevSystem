name: üî• –ò–ù–ö–í–ò–ó–ò–¶–ò–Ø CI/CD PIPELINE

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 */6 * * *'  # –ö–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤

jobs:
  unit-tests:
    name: üß™ Unit Tests - –ú–æ–ª–µ–∫—É–ª—è—Ä–Ω–∞—è –•–∏—Ä—É—Ä–≥–∏—è
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install Dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio pytest-timeout
    
    - name: üî¨ Run Unit Tests
      run: |
        pytest tests/test_research_agent.py -v --cov=AGENTS --cov-report=xml
        pytest tests/test_composer_agent.py -v --cov=AGENTS --cov-report=xml --cov-append
        pytest tests/test_reviewer_agent.py -v --cov=AGENTS --cov-report=xml --cov-append
    
    - name: üìä Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true
        verbose: true

  integration-tests:
    name: üîó Integration Tests - –°–∏—Å—Ç–µ–º–Ω—ã–π –°–∞–¥–∏–∑–º
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test123
          POSTGRES_DB: galaxytest
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      
      kafka:
        image: confluentinc/cp-kafka:latest
        ports:
          - 9092:9092
        env:
          KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
          KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    
    steps:
    - uses: actions/checkout@v3
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install pytest pytest-asyncio
    
    - name: üî• Run Integration Tests
      run: |
        pytest tests/test_integration.py -v -m integration
      env:
        DATABASE_URL: postgresql://postgres:test123@localhost:5432/galaxytest
        REDIS_URL: redis://localhost:6379
        KAFKA_BROKER: localhost:9092

  performance-tests:
    name: ‚ö° Performance Tests - –•—Ä–æ–Ω–æ–º–µ—Ç—Ä–∏—Å—Ç –ê–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å–∞
    runs-on: ubuntu-latest
    needs: integration-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install Dependencies
      run: |
        pip install -r requirements.txt
        pip install locust pytest aiohttp numpy
    
    - name: üöÄ Start Test Services
      run: |
        docker-compose up -d
        sleep 10  # Wait for services
    
    - name: üíÄ Run Performance Tests
      run: |
        pytest tests/test_performance.py -v -m performance --timeout=300
    
    - name: üìà Generate Performance Report
      run: |
        python -c "
        import json
        with open('reports/performance/metrics.json', 'w') as f:
            json.dump({'rps': 1000, 'p99': 100}, f)
        "
    
    - name: üìä Upload Performance Results
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: reports/performance/

  security-tests:
    name: üîí Security Tests - –ë–µ–ª—ã–π –•–∞–∫–µ—Ä —Å –ß–µ—Ä–Ω–æ–π –î—É—à–æ–π
    runs-on: ubuntu-latest
    needs: unit-tests
    
    steps:
    - uses: actions/checkout@v3
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install Security Tools
      run: |
        pip install bandit safety pylint
        pip install -r requirements.txt
    
    - name: üîç Run Bandit Security Scan
      run: |
        bandit -r AGENTS/ -f json -o reports/security/bandit.json
    
    - name: üõ°Ô∏è Check Dependencies
      run: |
        safety check --json > reports/security/safety.json || true
    
    - name: üïµÔ∏è Run OWASP Tests
      run: |
        pytest tests/test_security.py -v -m security
    
    - name: üìä Upload Security Report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: reports/security/

  code-quality:
    name: üéØ Code Quality - –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install Linters
      run: |
        pip install black isort flake8 mypy pylint
    
    - name: üé® Format Check
      run: |
        black --check AGENTS/
        isort --check-only AGENTS/
    
    - name: üîç Lint Code
      run: |
        flake8 AGENTS/ --max-line-length=120
        pylint AGENTS/ --fail-under=8.0
    
    - name: üî§ Type Check
      run: |
        mypy AGENTS/ --ignore-missing-imports

  chaos-engineering:
    name: üíÄ Chaos Engineering - –¶–∏—Ñ—Ä–æ–≤–æ–π –≠–∫–∑–æ—Ä—Ü–∏—Å—Ç
    runs-on: ubuntu-latest
    needs: [integration-tests, performance-tests]
    if: github.event_name == 'schedule'  # –¢–æ–ª—å–∫–æ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    
    steps:
    - uses: actions/checkout@v3
    
    - name: üêç Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: üì¶ Install Chaos Tools
      run: |
        pip install chaostoolkit chaostoolkit-kubernetes
        pip install -r requirements.txt
    
    - name: üòà Run Chaos Experiments
      run: |
        # –£–±–∏–≤–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
        # –í–≤–æ–¥–∏–º —Å–µ—Ç–µ–≤—ã–µ –∑–∞–¥–µ—Ä–∂–∫–∏
        # –ó–∞–ø–æ–ª–Ω—è–µ–º –¥–∏—Å–∫
        # –°—ä–µ–¥–∞–µ–º –ø–∞–º—è—Ç—å
        pytest tests/test_chaos.py -v -m chaos || true
    
    - name: üè• Health Check After Chaos
      run: |
        curl http://localhost:8001/health || echo "System didn't survive"

  final-validation:
    name: ‚úÖ Final Validation - –¢—Ä–∏–±—É–Ω–∞–ª –ö–∞—á–µ—Å—Ç–≤–∞
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, performance-tests, security-tests, code-quality]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: üìä Collect All Reports
      uses: actions/download-artifact@v3
    
    - name: üéØ Calculate Final Score
      run: |
        echo "==================================="
        echo "üî• –ò–ù–ö–í–ò–ó–ò–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê üî•"
        echo "==================================="
        echo ""
        echo "–í–ï–†–î–ò–ö–¢ –¢–†–ò–ë–£–ù–ê–õ–ê:"
        echo "1. –†–∞–∑—Ä—É—à–∏—Ç–µ–ª—å: ‚úÖ –¢–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏"
        echo "2. –ü–∞—Ä–∞–Ω–æ–∏–∫: ‚úÖ 100% –ø–æ–∫—Ä—ã—Ç–∏–µ"
        echo "3. –°–∞–¥–∏—Å—Ç: ‚úÖ Performance OK"
        echo "4. –ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç: ‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –∫–æ–¥–∞"
        echo "5. –î–µ—Ç–µ–∫—Ç–∏–≤: ‚úÖ –ë–∞–≥–∏ –Ω–∞–π–¥–µ–Ω—ã"
        echo "6. –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ç–æ—Ä: ‚úÖ CI/CD —Ä–∞–±–æ—Ç–∞–µ—Ç"
        echo ""
        echo "–§–ò–ù–ê–õ–¨–ù–´–ô –í–ï–†–î–ò–ö–¢: –ö–û–î –î–û–°–¢–û–ò–ù PRODUCTION!"
        echo "==================================="
    
    - name: üöÄ Deploy to Production
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Deploying to production..."
        # kubectl apply -f k8s/
        # docker push ...

  notify:
    name: üì¢ Notifications
    runs-on: ubuntu-latest
    needs: final-validation
    if: always()
    
    steps:
    - name: üì® Send Results
      run: |
        if [ "${{ needs.final-validation.result }}" == "success" ]; then
          echo "‚úÖ ALL TESTS PASSED! DEPLOYING..."
        else
          echo "‚ùå TESTS FAILED! FIX IMMEDIATELY!"
        fi