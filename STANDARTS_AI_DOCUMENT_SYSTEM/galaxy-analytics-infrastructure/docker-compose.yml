
services:
  # =====================================================
  # БАЗОВЫЕ СЕРВИСЫ
  # =====================================================
  
  # PostgreSQL - основная база данных
  postgres:
    image: postgres:15-alpine
    container_name: galaxy_postgres
    restart: unless-stopped
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: galaxy_admin
      POSTGRES_PASSWORD: galaxy_secure_pass_2024
      POSTGRES_DB: galaxy_analytics
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=ru_RU.UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts/postgres:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U galaxy_admin -d galaxy_analytics"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - galaxy_network

  # Redis - Message Bus и кэширование
  redis:
    image: redis:7-alpine
    container_name: galaxy_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    command: >
      redis-server
      --requirepass galaxy_redis_secure_2024
      --maxmemory 2gb
      --maxmemory-policy allkeys-lru
      --appendonly yes
      --appendfsync everysec
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - galaxy_network

  # ChromaDB - векторная база для агентской памяти
  chromadb:
    image: chromadb/chroma:latest
    container_name: galaxy_chromadb
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      CHROMA_SERVER_AUTH_PROVIDER: "chromadb.auth.token.TokenAuthServerProvider"
      CHROMA_SERVER_AUTH_CREDENTIALS: "galaxy_chroma_token_2024"
      CHROMA_SERVER_AUTH_TOKEN_TRANSPORT_HEADER: "AUTHORIZATION"
      PERSIST_DIRECTORY: /chroma/data
    volumes:
      - chroma_data:/chroma/data
    networks:
      - galaxy_network

  # MinIO - S3-compatible хранилище
  minio:
    image: minio/minio:latest
    container_name: galaxy_minio
    restart: unless-stopped
    ports:
      - "9000:9000"  # API
      - "9001:9001"  # Console
    environment:
      MINIO_ROOT_USER: galaxy_minio_admin
      MINIO_ROOT_PASSWORD: galaxy_minio_secure_2024
      MINIO_BROWSER_REDIRECT_URL: http://localhost:9001
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - galaxy_network

  # =====================================================
  # МОНИТОРИНГ И ЛОГИРОВАНИЕ
  # =====================================================

  # Prometheus - сбор метрик
  prometheus:
    image: prom/prometheus:latest
    container_name: galaxy_prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - galaxy_network

  # Grafana - визуализация метрик
  grafana:
    image: grafana/grafana:latest
    container_name: galaxy_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: galaxy_grafana_2024
      GF_INSTALL_PLUGINS: redis-datasource,redis-app,redis-explorer
      GF_SERVER_ROOT_URL: http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/provisioning:/etc/grafana/provisioning
      - ./configs/grafana/dashboards:/var/lib/grafana/dashboards
    depends_on:
      - prometheus
    networks:
      - galaxy_network

  # Loki - сбор логов
  loki:
    image: grafana/loki:latest
    container_name: galaxy_loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./configs/loki:/etc/loki
      - loki_data:/loki
    networks:
      - galaxy_network

  # Promtail - отправка логов в Loki
  promtail:
    image: grafana/promtail:latest
    container_name: galaxy_promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - ./configs/promtail:/etc/promtail
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - galaxy_network

  # =====================================================
  # РАЗРАБОТКА И ТЕСТИРОВАНИЕ
  # =====================================================

  # Adminer - веб-интерфейс для БД
  adminer:
    image: adminer:latest
    container_name: galaxy_adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
      ADMINER_DESIGN: pepa-linha-dark
    depends_on:
      - postgres
    networks:
      - galaxy_network

  # RedisInsight - GUI для Redis
  redis-insight:
    image: redislabs/redisinsight:latest
    container_name: galaxy_redis_insight
    restart: unless-stopped
    ports:
      - "8001:8001"
    volumes:
      - redis_insight_data:/db
    depends_on:
      - redis
    networks:
      - galaxy_network

  # =====================================================
  # MESSAGE QUEUE И ОБРАБОТКА ЗАДАЧ
  # =====================================================

  # RabbitMQ - альтернативная очередь сообщений
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: galaxy_rabbitmq
    restart: unless-stopped
    ports:
      - "5672:5672"   # AMQP
      - "15672:15672" # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: galaxy_rabbit
      RABBITMQ_DEFAULT_PASS: galaxy_rabbit_2024
      RABBITMQ_DEFAULT_VHOST: galaxy_analytics
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - rabbitmq_logs:/var/log/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - galaxy_network

  # Kafka - для высоконагруженных потоков
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: galaxy_kafka
    restart: unless-stopped
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
    depends_on:
      - zookeeper
    networks:
      - galaxy_network

  # Zookeeper для Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: galaxy_zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - galaxy_network

# =====================================================
# СЕТИ И VOLUMES
# =====================================================

networks:
  galaxy_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16

volumes:
  postgres_data:
  redis_data:
  chroma_data:
  minio_data:
  prometheus_data:
  grafana_data:
  loki_data:
  rabbitmq_data:
  rabbitmq_logs:
  kafka_data:
  zookeeper_data:
  zookeeper_logs:
  redis_insight_data: