#!/usr/bin/env python3
"""
Web –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ GalaxyDevelopment
"""

from http.server import HTTPServer, SimpleHTTPRequestHandler
import json
import subprocess
import requests

class GalaxyHandler(SimpleHTTPRequestHandler):
    def do_GET(self):
        if self.path == '/':
            self.send_response(200)
            self.send_header('Content-type', 'text/html')
            self.end_headers()
            
            html = f"""
<!DOCTYPE html>
<html>
<head>
    <title>üåå GalaxyDevelopment System</title>
    <meta charset="UTF-8">
    <style>
        body {{ font-family: Arial, sans-serif; margin: 20px; background: #1a1a1a; color: white; }}
        .container {{ max-width: 1200px; margin: 0 auto; }}
        .header {{ text-align: center; margin-bottom: 30px; }}
        .status-box {{ background: #2d2d2d; padding: 20px; margin: 10px 0; border-radius: 8px; }}
        .metrics {{ background: #333; padding: 15px; margin: 10px 0; border-radius: 5px; }}
        .green {{ color: #4CAF50; }}
        .red {{ color: #f44336; }}
        .buttons {{ text-align: center; margin: 20px 0; }}
        .button {{ background: #4CAF50; color: white; padding: 10px 20px; margin: 10px; text-decoration: none; border-radius: 5px; }}
        .button:hover {{ background: #45a049; }}
        .refresh {{ background: #2196F3; }}
        .logs {{ background: #1a1a1a; border: 1px solid #444; padding: 10px; font-family: monospace; }}
    </style>
    <script>
        function refreshData() {{
            location.reload();
        }}
        
        setInterval(refreshData, 5000); // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    </script>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üåå GALAXYDEVELOPMENT –°–ò–°–¢–ï–ú–ê</h1>
            <p>–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏</p>
        </div>
        
        <div class="status-box">
            <h2>üîç –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤</h2>
            {self.get_services_status()}
        </div>
        
        <div class="status-box">
            <h2>üìä –ú–µ—Ç—Ä–∏–∫–∏ Demo Agent</h2>
            {self.get_agent_metrics()}
        </div>
        
        <div class="buttons">
            <a href="javascript:refreshData()" class="button refresh">üîÑ –û–±–Ω–æ–≤–∏—Ç—å</a>
            <a href="http://localhost:9090" target="_blank" class="button">üìä Prometheus</a>
            <a href="http://localhost:3000" target="_blank" class="button">üìà Grafana</a>
        </div>
        
        <div class="status-box">
            <h2>üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ</h2>
            <div class="metrics">
                <strong>üåå GalaxyDevelopment v1.0</strong><br>
                ‚Ä¢ 5 AI-–∞–≥–µ–Ω—Ç–æ–≤: Research, Composer, Reviewer, Integrator, Publisher<br>
                ‚Ä¢ 150+ IT-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –≥–æ—Ç–æ–≤—ã –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ<br>
                ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: ITIL 4, ISO/IEC 20000, COBIT, NIST<br>
                ‚Ä¢ –ö–æ–º–∞–Ω–¥–∞: 35 —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–æ–ª–µ–π<br>
                ‚Ä¢ –ò–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞: Kafka, PostgreSQL, Redis, Prometheus, Grafana
            </div>
        </div>
    </div>
</body>
</html>
            """
            
            self.wfile.write(html.encode())
        else:
            super().do_GET()
    
    def get_services_status(self):
        services = {
            "Demo Agent": "http://localhost:8000/metrics",
            "Prometheus": "http://localhost:9090",
            "Grafana": "http://localhost:3000"
        }
        
        status_html = ""
        
        for service, url in services.items():
            try:
                response = requests.get(url, timeout=2)
                if response.status_code == 200:
                    status_html += f'<div class="metrics">‚úÖ <span class="green">{service}: –†–ê–ë–û–¢–ê–ï–¢</span></div>'
                else:
                    status_html += f'<div class="metrics">‚ùå <span class="red">{service}: –û–®–ò–ë–ö–ê {response.status_code}</span></div>'
            except:
                status_html += f'<div class="metrics">‚ùå <span class="red">{service}: –ù–ï –î–û–°–¢–£–ü–ï–ù</span></div>'
        
        # Docker —Å–µ—Ä–≤–∏—Å—ã
        try:
            result = subprocess.run(['docker-compose', 'ps', '--format', 'json'], 
                                  capture_output=True, text=True, cwd='/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem')
            if result.returncode == 0 and result.stdout.strip():
                containers = [json.loads(line) for line in result.stdout.strip().split('\\n')]
                running = len([c for c in containers if c.get('State') == 'running'])
                status_html += f'<div class="metrics">üê≥ <span class="green">Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {running} –∑–∞–ø—É—â–µ–Ω–æ</span></div>'
            else:
                status_html += f'<div class="metrics">‚ùå <span class="red">Docker: –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω</span></div>'
        except:
            status_html += f'<div class="metrics">‚ùå <span class="red">Docker: –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏</span></div>'
        
        return status_html
    
    def get_agent_metrics(self):
        try:
            response = requests.get("http://localhost:8000/metrics", timeout=2)
            if response.status_code == 200:
                lines = response.text.split('\\n')
                
                tasks_total = "0"
                active_tasks = "0"
                quality_score = "0.0"
                
                for line in lines:
                    if line.startswith('demo_agent_tasks_total '):
                        tasks_total = line.split()[-1]
                    elif line.startswith('demo_agent_active_tasks '):
                        active_tasks = line.split()[-1]
                    elif line.startswith('demo_agent_quality_score '):
                        quality_score = line.split()[-1]
                
                return f'''
                <div class="metrics">
                    üìã <strong>–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á:</strong> {tasks_total}<br>
                    üîÑ <strong>–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á:</strong> {active_tasks}<br>
                    ‚≠ê <strong>–û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞:</strong> {float(quality_score):.2f}<br>
                    üïê <strong>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</strong> {subprocess.run(["date"], capture_output=True, text=True).stdout.strip()}
                </div>
                '''
            else:
                return '<div class="metrics">‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞</div>'
                
        except Exception as e:
            return f'<div class="metrics">‚ùå –û—à–∏–±–∫–∞: {e}</div>'

if __name__ == '__main__':
    server = HTTPServer(('localhost', 8080), GalaxyHandler)
    print("üåå GalaxyDevelopment Web App –∑–∞–ø—É—â–µ–Ω!")
    print("üì± –û—Ç–∫—Ä—ã–≤–∞–π: http://localhost:8080")
    print("üõë –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: Ctrl+C")
    server.serve_forever()