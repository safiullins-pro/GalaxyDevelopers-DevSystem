#!/usr/bin/env python3
"""
–†–µ–∞–ª—å–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ GalaxyDevelopment —Å –∑–∞–ø—É—Å–∫–æ–º –∞–≥–µ–Ω—Ç–æ–≤
"""

import sys
import os
import subprocess
import threading
import time
import json
import tkinter as tk
from tkinter import ttk, scrolledtext
import requests
from pathlib import Path

class RealGalaxyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üåå GalaxyDevelopment System v1.0")
        self.root.geometry("1000x700")
        self.root.configure(bg='#1a1a1a')
        
        # –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–≥–µ–Ω—Ç–æ–≤
        self.agents = {}
        self.monitoring = True
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.start_monitoring()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        self.check_infrastructure()
    
    def create_widgets(self):
        # –°—Ç–∏–ª—å
        style = ttk.Style()
        style.configure('Title.TLabel', font=('Arial', 20, 'bold'))
        style.configure('Header.TLabel', font=('Arial', 14, 'bold'))
        
        # –ì–ª–∞–≤–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#1a1a1a')
        title_frame.pack(fill="x", padx=20, pady=10)
        
        title_label = tk.Label(title_frame, 
                              text="üåå GALAXYDEVELOPMENT –°–ò–°–¢–ï–ú–ê",
                              font=('Arial', 20, 'bold'),
                              fg='#00ff41', bg='#1a1a1a')
        title_label.pack()
        
        subtitle_label = tk.Label(title_frame,
                                text="–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è 150+ IT-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤ | 5 AI-–∞–≥–µ–Ω—Ç–æ–≤ | ITIL 4 + ISO + COBIT",
                                font=('Arial', 10),
                                fg='#ffffff', bg='#1a1a1a')
        subtitle_label.pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg='#1a1a1a')
        main_frame.pack(fill="both", expand=True, padx=20, pady=10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        left_frame = tk.LabelFrame(main_frame, text="üîç –°—Ç–∞—Ç—É—Å –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã", 
                                  font=('Arial', 12, 'bold'), fg='#ffffff', bg='#2d2d2d')
        left_frame.pack(side="left", fill="both", expand=True, padx=(0, 10))
        
        self.status_text = scrolledtext.ScrolledText(left_frame, height=25, width=40,
                                                   bg='#1a1a1a', fg='#00ff41',
                                                   font=('Consolas', 10))
        self.status_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –∞–≥–µ–Ω—Ç—ã
        right_frame = tk.LabelFrame(main_frame, text="ü§ñ AI-–∞–≥–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã",
                                   font=('Arial', 12, 'bold'), fg='#ffffff', bg='#2d2d2d')
        right_frame.pack(side="right", fill="both", expand=True)
        
        # –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–∞–Ω–µ–ª—å –∞–≥–µ–Ω—Ç–æ–≤
        agents_control = tk.Frame(right_frame, bg='#2d2d2d')
        agents_control.pack(fill="x", padx=5, pady=5)
        
        start_all_btn = tk.Button(agents_control, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤", 
                                 command=self.start_all_agents,
                                 bg='#4CAF50', fg='white', font=('Arial', 10, 'bold'))
        start_all_btn.pack(side="left", padx=5)
        
        stop_all_btn = tk.Button(agents_control, text="üõë –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ—Ö", 
                                command=self.stop_all_agents,
                                bg='#f44336', fg='white', font=('Arial', 10, 'bold'))
        stop_all_btn.pack(side="left", padx=5)
        
        # –°–ø–∏—Å–æ–∫ –∞–≥–µ–Ω—Ç–æ–≤
        self.agents_text = scrolledtext.ScrolledText(right_frame, height=20, width=50,
                                                   bg='#1a1a1a', fg='#ffffff',
                                                   font=('Consolas', 10))
        self.agents_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        bottom_frame = tk.LabelFrame(self.root, text="üìä –°–∏—Å—Ç–µ–º–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥",
                                   font=('Arial', 12, 'bold'), fg='#ffffff', bg='#2d2d2d')
        bottom_frame.pack(fill="x", padx=20, pady=(0, 20))
        
        self.metrics_text = scrolledtext.ScrolledText(bottom_frame, height=8, width=100,
                                                    bg='#1a1a1a', fg='#00ff41',
                                                    font=('Consolas', 9))
        self.metrics_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(bottom_frame, bg='#2d2d2d')
        buttons_frame.pack(fill="x", padx=5, pady=5)
        
        prometheus_btn = tk.Button(buttons_frame, text="üìä Prometheus", 
                                  command=lambda: self.open_url("http://localhost:9090"),
                                  bg='#ff9800', fg='white')
        prometheus_btn.pack(side="left", padx=5)
        
        grafana_btn = tk.Button(buttons_frame, text="üìà Grafana",
                               command=lambda: self.open_url("http://localhost:3000"),
                               bg='#e91e63', fg='white')
        grafana_btn.pack(side="left", padx=5)
        
        logs_btn = tk.Button(buttons_frame, text="üìã –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤",
                            command=self.show_agent_logs,
                            bg='#9c27b0', fg='white')
        logs_btn.pack(side="left", padx=5)
        
        refresh_btn = tk.Button(buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å",
                               command=self.force_refresh,
                               bg='#2196f3', fg='white')
        refresh_btn.pack(side="right", padx=5)
    
    def check_infrastructure(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä—ã"""
        try:
            result = subprocess.run(['docker-compose', 'ps', '--format', 'json'], 
                                  capture_output=True, text=True, timeout=10)
            if result.returncode == 0 and result.stdout.strip():
                self.log_status("‚úÖ Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞")
                containers = [json.loads(line) for line in result.stdout.strip().split('\n')]
                running = [c for c in containers if c.get('State') == 'running']
                self.log_status(f"üê≥ –ó–∞–ø—É—â–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {len(running)}")
                
                for container in running:
                    name = container.get('Service', container.get('Name', 'unknown'))
                    self.log_status(f"   ‚Ä¢ {name}: –†–ê–ë–û–¢–ê–ï–¢")
            else:
                self.log_status("‚ùå Docker –∏–Ω—Ñ—Ä–∞—Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                
        except Exception as e:
            self.log_status(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Docker: {e}")
    
    def start_all_agents(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤ —Å–∏—Å—Ç–µ–º—ã"""
        self.log_agents("üöÄ –ó–ê–ü–£–°–ö –í–°–ï–• –ê–ì–ï–ù–¢–û–í –°–ò–°–¢–ï–ú–´...")
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤
        agents_config = {
            "ResearchAgent": {
                "script": "agents/research/research_agent.py",
                "description": "üîç –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∏ –∞–Ω–∞–ª–∏–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤"
            },
            "ComposerAgent": {
                "script": "agents/composer/composer_agent.py", 
                "description": "üìù –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏"
            },
            "ReviewerAgent": {
                "script": "agents/reviewer/reviewer_agent.py",
                "description": "‚úÖ –í–∞–ª–∏–¥–∞—Ü–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞"
            },
            "IntegratorAgent": {
                "script": "agents/integrator/integrator_agent.py",
                "description": "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º"
            },
            "PublisherAgent": {
                "script": "agents/publisher/publisher_agent.py",
                "description": "üì§ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"
            }
        }
        
        for agent_name, config in agents_config.items():
            self.start_agent(agent_name, config)
    
    def start_agent(self, name, config):
        """–ó–∞–ø—É—Å–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        try:
            script_path = Path(config["script"])
            
            if not script_path.exists():
                self.log_agents(f"‚ö†Ô∏è  {name}: —Ñ–∞–π–ª {script_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ó–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ
            venv_python = Path("agent_env/bin/python")
            if not venv_python.exists():
                self.log_agents(f"‚ùå {name}: –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–∞
            process = subprocess.Popen([
                str(venv_python), str(script_path)
            ], stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            
            self.agents[name] = {
                "process": process,
                "description": config["description"],
                "status": "starting",
                "pid": process.pid
            }
            
            self.log_agents(f"üöÄ {name}: –∑–∞–ø—É—Å–∫... PID {process.pid}")
            self.log_agents(f"   {config['description']}")
            
        except Exception as e:
            self.log_agents(f"‚ùå {name}: –æ—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ - {e}")
    
    def stop_all_agents(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        self.log_agents("üõë –û–°–¢–ê–ù–û–í–ö–ê –í–°–ï–• –ê–ì–ï–ù–¢–û–í...")
        
        for name, agent_info in self.agents.items():
            try:
                process = agent_info["process"]
                if process.poll() is None:  # –ø—Ä–æ—Ü–µ—Å—Å –µ—â–µ –∂–∏–≤
                    process.terminate()
                    self.log_agents(f"üõë {name}: –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                else:
                    self.log_agents(f"‚ö™ {name}: —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            except Exception as e:
                self.log_agents(f"‚ùå {name}: –æ—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ - {e}")
        
        self.agents.clear()
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitor():
            while self.monitoring:
                try:
                    self.update_agent_status()
                    self.update_system_metrics()
                    time.sleep(3)
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(5)
        
        thread = threading.Thread(target=monitor, daemon=True)
        thread.start()
    
    def update_agent_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        for name, agent_info in list(self.agents.items()):
            process = agent_info["process"]
            
            if process.poll() is None:
                agent_info["status"] = "running"
            else:
                agent_info["status"] = "stopped"
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –µ—Å–ª–∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                stdout, stderr = process.communicate()
                if stderr:
                    self.log_agents(f"‚ùå {name}: {stderr.decode()}")
    
    def update_system_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –º–µ—Ç—Ä–∏–∫"""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ demo –∞–≥–µ–Ω—Ç–∞
            response = requests.get("http://localhost:8000/metrics", timeout=2)
            if response.status_code == 200:
                self.parse_metrics(response.text)
        except:
            pass
    
    def parse_metrics(self, metrics_text):
        """–ü–∞—Ä—Å–∏–Ω–≥ –º–µ—Ç—Ä–∏–∫"""
        lines = metrics_text.split('\n')
        metrics_data = ""
        
        for line in lines:
            if 'demo_agent_tasks_total' in line and 'HELP' not in line:
                tasks = line.split()[-1]
                metrics_data += f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {tasks}\n"
            elif 'demo_agent_active_tasks' in line and 'HELP' not in line:
                active = line.split()[-1]
                metrics_data += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active}\n"
            elif 'demo_agent_quality_score' in line and 'HELP' not in line:
                quality = line.split()[-1]
                metrics_data += f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {float(quality):.2f}\n"
        
        if metrics_data:
            self.log_metrics(f"ü§ñ Demo Agent:\n{metrics_data}")
    
    def log_status(self, message):
        """–õ–æ–≥ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏—Å—Ç–µ–º—ã"""
        self.status_text.insert(tk.END, f"[{time.strftime('%H:%M:%S')}] {message}\n")
        self.status_text.see(tk.END)
        self.status_text.update()
    
    def log_agents(self, message):
        """–õ–æ–≥ –∞–≥–µ–Ω—Ç–æ–≤"""
        self.agents_text.insert(tk.END, f"[{time.strftime('%H:%M:%S')}] {message}\n")
        self.agents_text.see(tk.END)
        self.agents_text.update()
    
    def log_metrics(self, message):
        """–õ–æ–≥ –º–µ—Ç—Ä–∏–∫"""
        self.metrics_text.delete(1.0, tk.END)
        self.metrics_text.insert(tk.END, f"[{time.strftime('%H:%M:%S')}] {message}")
        self.metrics_text.update()
    
    def show_agent_logs(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            with open("agent.log", "r") as f:
                logs = f.read()
                if logs:
                    self.log_agents("üìã –õ–û–ì–ò DEMO AGENT:")
                    self.log_agents(logs[-500:])  # –ø–æ—Å–ª–µ–¥–Ω–∏–µ 500 —Å–∏–º–≤–æ–ª–æ–≤
        except:
            self.log_agents("üìã –õ–æ–≥–∏ –∞–≥–µ–Ω—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    def force_refresh(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ"""
        self.status_text.delete(1.0, tk.END)
        self.check_infrastructure()
    
    def open_url(self, url):
        """–û—Ç–∫—Ä—ã—Ç—å URL"""
        import webbrowser
        webbrowser.open(url)
    
    def on_closing(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.monitoring = False
        self.stop_all_agents()
        self.root.destroy()

def main():
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("docker-compose.yml").exists():
        print("‚ùå –ó–∞–ø—É—Å–∫–∞—Ç—å –Ω—É–∂–Ω–æ –∏–∑ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å docker-compose.yml")
        sys.exit(1)
    
    root = tk.Tk()
    app = RealGalaxyApp(root)
    
    root.protocol("WM_DELETE_WINDOW", app.on_closing)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        app.monitoring = False
        app.stop_all_agents()

if __name__ == "__main__":
    main()