#!/usr/bin/env python3
"""
GalaxyDevelopment Dashboard - –ü–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
"""
import tkinter as tk
from tkinter import ttk, scrolledtext, messagebox
import requests
import json
import threading
import time
import subprocess
import os
import webbrowser
from datetime import datetime

class GalaxyDashboard:
    def __init__(self, root):
        self.root = root
        self.root.title("üåå GalaxyDevelopment Control Center")
        self.root.geometry("1200x800")
        self.root.configure(bg='#000000')  # –ß—ë—Ä–Ω—ã–π —Ñ–æ–Ω
        
        # –°—Ç–∏–ª–∏ - –ß–Å–†–ù–ê–Ø –¢–ï–ú–ê
        style = ttk.Style()
        style.theme_use('clam')
        
        # –¢—ë–º–Ω–∞—è —Ç–µ–º–∞ —Å —è—Ä–∫–∏–º–∏ –∞–∫—Ü–µ–Ω—Ç–∞–º–∏
        style.configure('Title.TLabel', font=('Arial', 18, 'bold'), foreground='#00ff41', background='#000000')  # –ó–µ–ª—ë–Ω—ã–π –Ω–∞ —á—ë—Ä–Ω–æ–º
        style.configure('Status.TLabel', font=('Arial', 11, 'bold'), foreground='#ffffff', background='#000000')  # –ë–µ–ª—ã–π –Ω–∞ —á—ë—Ä–Ω–æ–º
        style.configure('Success.TLabel', font=('Arial', 11, 'bold'), foreground='#00ff00', background='#000000')  # –Ø—Ä–∫–æ-–∑–µ–ª—ë–Ω—ã–π
        style.configure('Error.TLabel', font=('Arial', 11, 'bold'), foreground='#ff0040', background='#000000')    # –Ø—Ä–∫–æ-–∫—Ä–∞—Å–Ω—ã–π
        style.configure('Warning.TLabel', font=('Arial', 11, 'bold'), foreground='#ffff00', background='#000000')  # –ñ—ë–ª—Ç—ã–π
        
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        self.agent_running = False
        self.docker_status = {}
        self.metrics_data = {}
        
        self.setup_ui()
        self.start_monitoring()
    
    def setup_ui(self):
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        menubar = tk.Menu(self.root)
        self.root.config(menu=menubar)
        
        system_menu = tk.Menu(menubar, tearoff=0)
        menubar.add_cascade(label="–°–∏—Å—Ç–µ–º–∞", menu=system_menu)
        system_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å Prometheus", command=lambda: webbrowser.open("http://localhost:9090"))
        system_menu.add_command(label="–û—Ç–∫—Ä—ã—Ç—å Grafana", command=lambda: webbrowser.open("http://localhost:3000"))
        system_menu.add_separator()
        system_menu.add_command(label="–í—ã—Ö–æ–¥", command=self.root.quit)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_frame = tk.Frame(self.root, bg='#000000')
        title_frame.pack(fill='x', padx=10, pady=5)
        
        ttk.Label(title_frame, text="üåå GalaxyDevelopment Control Center", 
                 style='Title.TLabel').pack()
        
        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tk.Frame(self.root, bg='#000000')
        main_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
        left_frame = tk.LabelFrame(main_frame, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã", 
                                  bg='#000000', fg='#00ff41', font=('Arial', 14, 'bold'))
        left_frame.pack(side='left', fill='both', expand=True, padx=(0, 5))
        
        self.setup_status_panel(left_frame)
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
        right_frame = tk.LabelFrame(main_frame, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", 
                                   bg='#000000', fg='#00ff41', font=('Arial', 14, 'bold'))
        right_frame.pack(side='right', fill='both', expand=True, padx=(5, 0))
        
        self.setup_control_panel(right_frame)
        
        # –ù–∏–∂–Ω—è—è –ø–∞–Ω–µ–ª—å - –õ–æ–≥–∏
        log_frame = tk.LabelFrame(self.root, text="–°–∏—Å—Ç–µ–º–Ω—ã–µ –ª–æ–≥–∏", 
                                 bg='#000000', fg='#00ff41', font=('Arial', 14, 'bold'))
        log_frame.pack(fill='both', expand=True, padx=10, pady=5)
        
        self.setup_log_panel(log_frame)
    
    def setup_status_panel(self, parent):
        # Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        docker_frame = tk.LabelFrame(parent, text="Docker –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã", 
                                    bg='#000000', fg='#00ffff', font=('Arial', 12, 'bold'))
        docker_frame.pack(fill='x', padx=5, pady=5)
        
        self.docker_labels = {}
        containers = ['kafka', 'postgres', 'redis', 'prometheus', 'grafana', 'zookeeper']
        
        for i, container in enumerate(containers):
            frame = tk.Frame(docker_frame, bg='#000000')
            frame.pack(fill='x', padx=5, pady=2)
            
            tk.Label(frame, text=f"{container}:", bg='#000000', fg='#ffffff', 
                    font=('Arial', 11, 'bold'), width=12, anchor='w').pack(side='left')
            
            self.docker_labels[container] = ttk.Label(frame, text="–ü—Ä–æ–≤–µ—Ä–∫–∞...", 
                                                     style='Status.TLabel')
            self.docker_labels[container].pack(side='left')
        
        # –ê–≥–µ–Ω—Ç—ã
        agents_frame = tk.LabelFrame(parent, text="AI –ê–≥–µ–Ω—Ç—ã", 
                                    bg='#000000', fg='#00ffff', font=('Arial', 12, 'bold'))
        agents_frame.pack(fill='x', padx=5, pady=5)
        
        self.agent_status = ttk.Label(agents_frame, text="–û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", 
                                     style='Error.TLabel')
        self.agent_status.pack(pady=5)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        metrics_frame = tk.LabelFrame(parent, text="–ú–µ—Ç—Ä–∏–∫–∏", 
                                     bg='#000000', fg='#00ffff', font=('Arial', 12, 'bold'))
        metrics_frame.pack(fill='x', padx=5, pady=5)
        
        self.metrics_text = scrolledtext.ScrolledText(metrics_frame, height=8, 
                                                     bg='#000000', fg='#00ff00',
                                                     font=('Consolas', 10, 'bold'), 
                                                     insertbackground='#00ff00')
        self.metrics_text.pack(fill='both', expand=True, padx=5, pady=5)
    
    def setup_control_panel(self, parent):
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∞–≥–µ–Ω—Ç–∞–º–∏
        agents_frame = tk.LabelFrame(parent, text="–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≥–µ–Ω—Ç–∞–º–∏", 
                                    bg='#000000', fg='#ff0080', font=('Arial', 12, 'bold'))
        agents_frame.pack(fill='x', padx=5, pady=5)
        
        btn_frame = tk.Frame(agents_frame, bg='#000000')
        btn_frame.pack(pady=10)
        
        self.start_btn = tk.Button(btn_frame, text="üöÄ –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–≥–µ–Ω—Ç—ã", 
                                  bg='#00ff00', fg='#000000', font=('Arial', 11, 'bold'),
                                  command=self.start_agents, relief='raised', bd=3)
        self.start_btn.pack(side='left', padx=5)
        
        self.stop_btn = tk.Button(btn_frame, text="‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≥–µ–Ω—Ç—ã", 
                                 bg='#ff0000', fg='#ffffff', font=('Arial', 11, 'bold'),
                                 command=self.stop_agents, state='disabled', relief='raised', bd=3)
        self.stop_btn.pack(side='left', padx=5)
        
        # –ö–Ω–æ–ø–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        monitoring_frame = tk.LabelFrame(parent, text="–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥", 
                                        bg='#000000', fg='#ff0080', font=('Arial', 12, 'bold'))
        monitoring_frame.pack(fill='x', padx=5, pady=5)
        
        monitor_buttons = [
            ("üìä Prometheus", "http://localhost:9090"),
            ("üìà Grafana", "http://localhost:3000"),
            ("üîç Agent Metrics", "http://localhost:8000/metrics")
        ]
        
        for text, url in monitor_buttons:
            btn = tk.Button(monitoring_frame, text=text, 
                           bg='#0080ff', fg='#ffffff', font=('Arial', 10, 'bold'),
                           command=lambda u=url: webbrowser.open(u), relief='raised', bd=2)
            btn.pack(fill='x', padx=5, pady=2)
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        system_frame = tk.LabelFrame(parent, text="–°–∏—Å—Ç–µ–º–∞", 
                                    bg='#000000', fg='#ff0080', font=('Arial', 12, 'bold'))
        system_frame.pack(fill='x', padx=5, pady=5)
        
        system_buttons = [
            ("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", self.refresh_status),
            ("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", self.clear_logs),
            ("üìã –≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤", self.export_logs)
        ]
        
        for text, command in system_buttons:
            btn = tk.Button(system_frame, text=text, 
                           bg='#ffff00', fg='#000000', font=('Arial', 10, 'bold'),
                           command=command, relief='raised', bd=2)
            btn.pack(fill='x', padx=5, pady=2)
    
    def setup_log_panel(self, parent):
        self.log_text = scrolledtext.ScrolledText(parent, height=10, 
                                                 bg='#000000', fg='#00ff00',
                                                 font=('Consolas', 10, 'bold'),
                                                 insertbackground='#00ff00')
        self.log_text.pack(fill='both', expand=True, padx=5, pady=5)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏
        self.log("üåå GalaxyDevelopment Dashboard –∑–∞–ø—É—â–µ–Ω")
        self.log("üìä –ù–∞—á–∏–Ω–∞—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º—ã...")
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        def monitor():
            while True:
                try:
                    self.update_docker_status()
                    self.update_agent_status()
                    self.update_metrics()
                    time.sleep(5)
                except Exception as e:
                    self.log(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                    time.sleep(10)
        
        thread = threading.Thread(target=monitor, daemon=True)
        thread.start()
    
    def update_docker_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"""
        try:
            result = subprocess.run(['docker-compose', 'ps'], 
                                  capture_output=True, text=True, cwd='/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem')
            
            if result.returncode == 0:
                lines = result.stdout.strip().split('\n')[1:]  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
                
                for container in self.docker_labels:
                    status = "‚ùå –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
                    style = 'Error.TLabel'
                    
                    for line in lines:
                        if container in line and 'Up' in line:
                            status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
                            style = 'Success.TLabel'
                            break
                    
                    self.docker_labels[container].configure(text=status, style=style)
        except Exception as e:
            for container in self.docker_labels:
                self.docker_labels[container].configure(text="‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ", style='Error.TLabel')
    
    def update_agent_status(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            response = requests.get("http://localhost:8000/metrics", timeout=2)
            if response.status_code == 200:
                self.agent_status.configure(text="‚úÖ Demo Agent —Ä–∞–±–æ—Ç–∞–µ—Ç", style='Success.TLabel')
                self.agent_running = True
                self.start_btn.configure(state='disabled')
                self.stop_btn.configure(state='normal')
            else:
                raise requests.RequestException("Agent not responding")
        except:
            self.agent_status.configure(text="‚ùå –ê–≥–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", style='Error.TLabel')
            self.agent_running = False
            self.start_btn.configure(state='normal')
            self.stop_btn.configure(state='disabled')
    
    def update_metrics(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫"""
        try:
            if self.agent_running:
                response = requests.get("http://localhost:8000/metrics", timeout=2)
                if response.status_code == 200:
                    # –ü–∞—Ä—Å–∏–º –º–µ—Ç—Ä–∏–∫–∏ –¥–µ–º–æ-–∞–≥–µ–Ω—Ç–∞
                    text = response.text
                    metrics = {}
                    
                    for line in text.split('\n'):
                        if line.startswith('demo_agent_'):
                            parts = line.split(' ')
                            if len(parts) >= 2:
                                key = parts[0]
                                value = parts[1]
                                metrics[key] = value
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
                    self.metrics_text.delete(1.0, tk.END)
                    self.metrics_text.insert(tk.END, f"üìä –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}\n\n")
                    
                    for key, value in metrics.items():
                        if 'tasks_total' in key:
                            self.metrics_text.insert(tk.END, f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏: {value}\n")
                        elif 'active_tasks' in key:
                            self.metrics_text.insert(tk.END, f"‚ö° –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏: {value}\n")
                        elif 'quality_score' in key:
                            score = float(value)
                            self.metrics_text.insert(tk.END, f"‚≠ê –ö–∞—á–µ—Å—Ç–≤–æ: {score:.2f}\n")
        except Exception as e:
            pass  # –¢–∏—Ö–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –º–µ—Ç—Ä–∏–∫
    
    def start_agents(self):
        """–ó–∞–ø—É—Å–∫ –∞–≥–µ–Ω—Ç–æ–≤"""
        def run_agent():
            try:
                self.log("üöÄ –ó–∞–ø—É—Å–∫–∞—é –¥–µ–º–æ-–∞–≥–µ–Ω—Ç...")
                os.chdir('/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem')
                
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∞–≥–µ–Ω—Ç
                subprocess.run(['pkill', '-f', 'simple_agent'], capture_output=True)
                
                # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –∞–≥–µ–Ω—Ç
                process = subprocess.Popen(['agent_env/bin/python', 'simple_agent.py'], 
                                         stdout=subprocess.PIPE, 
                                         stderr=subprocess.STDOUT,
                                         text=True)
                
                self.log("‚úÖ –î–µ–º–æ-–∞–≥–µ–Ω—Ç –∑–∞–ø—É—â–µ–Ω —É—Å–ø–µ—à–Ω–æ!")
                
                # –ß–∏—Ç–∞–µ–º –≤—ã–≤–æ–¥ –∞–≥–µ–Ω—Ç–∞
                for line in iter(process.stdout.readline, ''):
                    if line.strip():
                        self.log(f"ü§ñ Agent: {line.strip()}")
                
            except Exception as e:
                self.log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞: {e}")
        
        thread = threading.Thread(target=run_agent, daemon=True)
        thread.start()
    
    def stop_agents(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–≥–µ–Ω—Ç–æ–≤"""
        try:
            result = subprocess.run(['pkill', '-f', 'simple_agent'], 
                                  capture_output=True, text=True)
            self.log("‚èπÔ∏è –ê–≥–µ–Ω—Ç—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤: {e}")
    
    def refresh_status(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        self.log("üîÑ –û–±–Ω–æ–≤–ª—è—é —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã...")
        self.update_docker_status()
        self.update_agent_status()
        self.update_metrics()
    
    def clear_logs(self):
        """–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤"""
        self.log_text.delete(1.0, tk.END)
        self.log("üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã")
    
    def export_logs(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –ª–æ–≥–æ–≤ –≤ —Ñ–∞–π–ª"""
        try:
            timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
            filename = f"galaxy_logs_{timestamp}.txt"
            
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(self.log_text.get(1.0, tk.END))
            
            self.log(f"üìã –õ–æ–≥–∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –≤ {filename}")
            messagebox.showinfo("–≠–∫—Å–ø–æ—Ä—Ç", f"–õ–æ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")
        except Exception as e:
            self.log(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")
            messagebox.showerror("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –ª–æ–≥–∏: {e}")
    
    def log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.now().strftime('%H:%M:%S')
        log_message = f"[{timestamp}] {message}\n"
        
        def update_log():
            self.log_text.insert(tk.END, log_message)
            self.log_text.see(tk.END)
        
        if threading.current_thread() == threading.main_thread():
            update_log()
        else:
            self.root.after(0, update_log)

if __name__ == "__main__":
    root = tk.Tk()
    app = GalaxyDashboard(root)
    root.mainloop()