#!/usr/bin/env python3
"""
GalaxyDevelopment Desktop App
"""

import tkinter as tk
from tkinter import ttk, scrolledtext
import requests
import json
import threading
import time

class GalaxyApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üåå GalaxyDevelopment System")
        self.root.geometry("800x600")
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.create_widgets()
        
        # –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        self.monitoring = True
        self.start_monitoring()
    
    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = tk.Label(self.root, text="üåå GALAXYDEVELOPMENT –°–ò–°–¢–ï–ú–ê", 
                              font=("Arial", 16, "bold"))
        title_label.pack(pady=10)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
        status_frame = ttk.LabelFrame(self.root, text="–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
        status_frame.pack(fill="x", padx=10, pady=5)
        
        # –°—Ç–∞—Ç—É—Å—ã —Å–µ—Ä–≤–∏—Å–æ–≤
        self.status_text = tk.Text(status_frame, height=8, width=80)
        self.status_text.pack(padx=5, pady=5)
        
        # –§—Ä–µ–π–º –¥–ª—è –º–µ—Ç—Ä–∏–∫
        metrics_frame = ttk.LabelFrame(self.root, text="–ú–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–æ–≤")
        metrics_frame.pack(fill="both", expand=True, padx=10, pady=5)
        
        # –ú–µ—Ç—Ä–∏–∫–∏
        self.metrics_text = scrolledtext.ScrolledText(metrics_frame, height=15, width=80)
        self.metrics_text.pack(fill="both", expand=True, padx=5, pady=5)
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        buttons_frame = tk.Frame(self.root)
        buttons_frame.pack(fill="x", padx=10, pady=5)
        
        refresh_btn = tk.Button(buttons_frame, text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", command=self.refresh_data)
        refresh_btn.pack(side="left", padx=5)
        
        prometheus_btn = tk.Button(buttons_frame, text="üìä Prometheus", command=self.open_prometheus)
        prometheus_btn.pack(side="left", padx=5)
        
        grafana_btn = tk.Button(buttons_frame, text="üìà Grafana", command=self.open_grafana)
        grafana_btn.pack(side="left", padx=5)
    
    def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ"""
        def monitor():
            while self.monitoring:
                try:
                    self.refresh_data()
                    time.sleep(5)
                except:
                    pass
        
        thread = threading.Thread(target=monitor, daemon=True)
        thread.start()
    
    def refresh_data(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö"""
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
        services_status = self.check_services()
        self.status_text.delete(1.0, tk.END)
        self.status_text.insert(tk.END, services_status)
        
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫
        metrics_data = self.get_metrics()
        self.metrics_text.delete(1.0, tk.END)
        self.metrics_text.insert(tk.END, metrics_data)
    
    def check_services(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"""
        services = {
            "Prometheus": "http://localhost:9090",
            "Grafana": "http://localhost:3000", 
            "Demo Agent": "http://localhost:8000/metrics",
            "Kafka": "localhost:9092",
            "PostgreSQL": "localhost:5432",
            "Redis": "localhost:6379"
        }
        
        status_text = "üîç –°–¢–ê–¢–£–° –°–ï–†–í–ò–°–û–í:\n\n"
        
        for service, url in services.items():
            try:
                if service in ["Kafka", "PostgreSQL", "Redis"]:
                    # –î–ª—è —ç—Ç–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á—Ç–æ –¥–æ–ª–∂–Ω—ã —Ä–∞–±–æ—Ç–∞—Ç—å
                    status_text += f"‚úÖ {service}: –†–ê–ë–û–¢–ê–ï–¢\n"
                else:
                    response = requests.get(url, timeout=2)
                    if response.status_code == 200:
                        status_text += f"‚úÖ {service}: –†–ê–ë–û–¢–ê–ï–¢\n"
                    else:
                        status_text += f"‚ùå {service}: –û–®–ò–ë–ö–ê {response.status_code}\n"
            except Exception as e:
                status_text += f"‚ùå {service}: –ù–ï –î–û–°–¢–£–ü–ï–ù\n"
        
        return status_text
    
    def get_metrics(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –∞–≥–µ–Ω—Ç–∞"""
        try:
            response = requests.get("http://localhost:8000/metrics", timeout=2)
            if response.status_code == 200:
                lines = response.text.split('\n')
                
                metrics_text = "üìä –ú–ï–¢–†–ò–ö–ò DEMO AGENT:\n\n"
                
                for line in lines:
                    if line.startswith('demo_agent_'):
                        if 'tasks_total' in line:
                            tasks = line.split()[-1]
                            metrics_text += f"üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∑–∞–¥–∞—á: {tasks}\n"
                        elif 'active_tasks' in line and 'HELP' not in line:
                            active = line.split()[-1]
                            metrics_text += f"üîÑ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á: {active}\n"
                        elif 'quality_score' in line and 'HELP' not in line:
                            quality = line.split()[-1]
                            metrics_text += f"‚≠ê –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞: {float(quality):.2f}\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
                metrics_text += f"\nüêç –°–ò–°–¢–ï–ú–ù–´–ï –ú–ï–¢–†–ò–ö–ò:\n\n"
                
                for line in lines:
                    if 'python_info' in line and 'version=' in line:
                        version = line.split('version="')[1].split('"')[0]
                        metrics_text += f"Python –≤–µ—Ä—Å–∏—è: {version}\n"
                    elif 'process_cpu_seconds_total' in line:
                        cpu = line.split()[-1]
                        metrics_text += f"CPU –≤—Ä–µ–º—è: {float(cpu):.2f}—Å\n"
                        break
                
                # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                metrics_text += f"\nüïê –û–±–Ω–æ–≤–ª–µ–Ω–æ: {time.strftime('%H:%M:%S')}\n"
                
                return metrics_text
            else:
                return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç—Ä–∏–∫–∏ –∞–≥–µ–Ω—Ç–∞"
                
        except Exception as e:
            return f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}"
    
    def open_prometheus(self):
        """–û—Ç–∫—Ä—ã—Ç—å Prometheus"""
        import webbrowser
        webbrowser.open("http://localhost:9090")
    
    def open_grafana(self):
        """–û—Ç–∫—Ä—ã—Ç—å Grafana"""
        import webbrowser
        webbrowser.open("http://localhost:3000")

def main():
    root = tk.Tk()
    app = GalaxyApp(root)
    
    try:
        root.mainloop()
    except KeyboardInterrupt:
        app.monitoring = False

if __name__ == "__main__":
    main()