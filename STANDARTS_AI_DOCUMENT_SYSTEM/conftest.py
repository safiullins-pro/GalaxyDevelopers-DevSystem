"""
–ì–õ–ê–í–ù–´–ô –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–û–ù–ù–´–ô –§–ê–ô–õ PYTEST
–í–µ—Ä—Ö–æ–≤–Ω—ã–π –ò–Ω–∫–≤–∏–∑–∏—Ç–æ—Ä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import pytest
import sys
import os
from pathlib import Path
from unittest.mock import Mock, MagicMock, patch
import asyncio
import json
import time
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ PATH
ROOT_DIR = Path(__file__).parent
sys.path.insert(0, str(ROOT_DIR))
sys.path.insert(0, str(ROOT_DIR / "AGENTS"))

# –§–ò–ö–°–¢–£–†–´ –î–õ–Ø –í–°–ï–• –¢–ï–°–¢–û–í

@pytest.fixture(scope="session")
def event_loop():
    """–°–æ–∑–¥–∞–µ–º event loop –¥–ª—è async —Ç–µ—Å—Ç–æ–≤"""
    loop = asyncio.get_event_loop_policy().new_event_loop()
    yield loop
    loop.close()

@pytest.fixture
def mock_kafka_producer():
    """Mock –¥–ª—è Kafka Producer"""
    with patch('kafka.KafkaProducer') as mock:
        producer = MagicMock()
        producer.send.return_value.get.return_value = {'status': 'success'}
        mock.return_value = producer
        yield producer

@pytest.fixture
def mock_kafka_consumer():
    """Mock –¥–ª—è Kafka Consumer"""
    with patch('kafka.KafkaConsumer') as mock:
        consumer = MagicMock()
        consumer.__iter__.return_value = []
        mock.return_value = consumer
        yield consumer

@pytest.fixture
def mock_postgres_connection():
    """Mock –¥–ª—è PostgreSQL —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è"""
    with patch('psycopg2.connect') as mock:
        conn = MagicMock()
        cursor = MagicMock()
        cursor.fetchall.return_value = []
        cursor.fetchone.return_value = None
        conn.cursor.return_value = cursor
        mock.return_value = conn
        yield conn

@pytest.fixture
def mock_redis_client():
    """Mock –¥–ª—è Redis –∫–ª–∏–µ–Ω—Ç–∞"""
    with patch('redis.Redis') as mock:
        client = MagicMock()
        client.get.return_value = None
        client.set.return_value = True
        mock.return_value = client
        yield client

@pytest.fixture
def mock_openai_client():
    """Mock –¥–ª—è OpenAI API"""
    with patch('openai.OpenAI') as mock:
        client = MagicMock()
        response = MagicMock()
        response.choices = [MagicMock(message=MagicMock(content="Test response"))]
        client.chat.completions.create.return_value = response
        mock.return_value = client
        yield client

@pytest.fixture
def mock_gemini_client():
    """Mock –¥–ª—è Gemini API"""
    with patch('google.generativeai.GenerativeModel') as mock:
        model = MagicMock()
        response = MagicMock()
        response.text = "Test Gemini response"
        model.generate_content.return_value = response
        mock.return_value = model
        yield model

@pytest.fixture
def sample_task():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return {
        'id': 'test-task-001',
        'type': 'research',
        'title': 'Test Research Task',
        'description': 'Research ITIL 4 best practices',
        'priority': 'high',
        'metadata': {
            'created_at': datetime.now().isoformat(),
            'author': 'test_suite',
            'tags': ['test', 'research', 'itil']
        }
    }

@pytest.fixture
def sample_document():
    """–ü—Ä–∏–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return {
        'id': 'doc-001',
        'title': 'Test Document',
        'content': '# Test Document\n\nThis is a test document for validation.',
        'format': 'markdown',
        'metadata': {
            'created_at': datetime.now().isoformat(),
            'author': 'ComposerAgent',
            'version': '1.0.0',
            'standards': ['ISO_27001', 'ITIL_4']
        }
    }

@pytest.fixture
def compliance_standards():
    """–°—Ç–∞–Ω–¥–∞—Ä—Ç—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ compliance"""
    return {
        'ISO_27001': [
            'A.5 Information security policies',
            'A.6 Organization of information security',
            'A.7 Human resource security',
            'A.8 Asset management',
            'A.9 Access control'
        ],
        'ITIL_4': [
            'Incident Management',
            'Problem Management',
            'Change Enablement',
            'Service Request Management',
            'Service Level Management'
        ],
        'COBIT': [
            'EDM - Evaluate, Direct and Monitor',
            'APO - Align, Plan and Organize',
            'BAI - Build, Acquire and Implement',
            'DSS - Deliver, Service and Support',
            'MEA - Monitor, Evaluate and Assess'
        ]
    }

@pytest.fixture
def performance_metrics():
    """–ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    return {
        'response_time_p50': 100,  # ms
        'response_time_p99': 1000,  # ms
        'response_time_p99_9': 5000,  # ms
        'error_rate': 0.01,  # %
        'availability': 99.99,  # %
        'throughput': 1000  # req/sec
    }

@pytest.fixture
def security_vectors():
    """–í–µ–∫—Ç–æ—Ä—ã –∞—Ç–∞–∫ –¥–ª—è security —Ç–µ—Å—Ç–æ–≤"""
    return {
        'sql_injection': "'; DROP TABLE agents; --",
        'xss': "<script>alert('pwned')</script>",
        'path_traversal': "../../../../etc/passwd",
        'command_injection': "; rm -rf /",
        'xxe': '<?xml version="1.0"?><!DOCTYPE foo [<!ENTITY xxe SYSTEM "file:///etc/passwd">]><foo>&xxe;</foo>',
        'csrf_token': 'invalid_csrf_token_12345',
        'buffer_overflow': 'A' * 10000,
        'null_byte': 'file.txt\x00.jpg'
    }

# –•–£–ö–ò –î–õ–Ø –û–¢–ß–ï–¢–û–í

def pytest_configure(config):
    """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º —Ç–µ—Å—Ç–æ–≤"""
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
    reports_dir = ROOT_DIR / "reports"
    reports_dir.mkdir(exist_ok=True)
    (reports_dir / "coverage").mkdir(exist_ok=True)
    (reports_dir / "performance").mkdir(exist_ok=True)
    (reports_dir / "security").mkdir(exist_ok=True)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    config.addinivalue_line(
        "markers", "critical: –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ø—Ä–æ–π—Ç–∏"
    )

def pytest_sessionstart(session):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    print("\n" + "="*80)
    print("üî• –ò–ù–ö–í–ò–ó–ò–¶–ò–Ø –ù–ê–ß–ê–õ–ê–°–¨! –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï DOCUMENTSSYSTEM üî•")
    print("="*80 + "\n")

def pytest_sessionfinish(session, exitstatus):
    """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
    print("\n" + "="*80)
    if exitstatus == 0:
        print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–ô–î–ï–ù–´! –ö–û–î –î–û–°–¢–û–ò–ù –ñ–ò–ó–ù–ò!")
    else:
        print("‚ùå –¢–ï–°–¢–´ –ü–†–û–í–ê–õ–ï–ù–´! –ö–û–î –î–û–õ–ñ–ï–ù –ë–´–¢–¨ –£–ù–ò–ß–¢–û–ñ–ï–ù!")
    print("="*80 + "\n")

@pytest.hookimpl(tryfirst=True, hookwrapper=True)
def pytest_runtest_makereport(item, call):
    """–°–æ–∑–¥–∞–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –æ –∫–∞–∂–¥–æ–º —Ç–µ—Å—Ç–µ"""
    outcome = yield
    report = outcome.get_result()
    
    if report.when == "call" and report.failed:
        # –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≤–∞–ª–∏–≤—à–∏–µ—Å—è —Ç–µ—Å—Ç—ã
        with open(ROOT_DIR / "reports" / "failed_tests.log", "a") as f:
            f.write(f"\n{'='*60}\n")
            f.write(f"FAILED: {item.nodeid}\n")
            f.write(f"Time: {datetime.now().isoformat()}\n")
            f.write(f"Error: {report.longrepr}\n")

# –ú–ï–¢–†–ò–ö–ò –ö–ê–ß–ï–°–¢–í–ê

class TestMetrics:
    """–°–±–æ—Ä—â–∏–∫ –º–µ—Ç—Ä–∏–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.start_time = time.time()
        self.tests_run = 0
        self.tests_passed = 0
        self.tests_failed = 0
        self.assertions = 0
        self.bugs_found = []
    
    def record_bug(self, bug_description):
        """–ó–∞–ø–∏—Å—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π –±–∞–≥"""
        self.bugs_found.append({
            'id': f'BUG-{len(self.bugs_found)+1:03d}',
            'description': bug_description,
            'timestamp': datetime.now().isoformat()
        })
    
    def generate_report(self):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        duration = time.time() - self.start_time
        return {
            'duration_seconds': duration,
            'total_tests': self.tests_run,
            'passed': self.tests_passed,
            'failed': self.tests_failed,
            'pass_rate': (self.tests_passed / self.tests_run * 100) if self.tests_run > 0 else 0,
            'assertions_count': self.assertions,
            'bugs_found': len(self.bugs_found),
            'bugs': self.bugs_found
        }

@pytest.fixture(scope="session")
def test_metrics():
    """–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    return TestMetrics()