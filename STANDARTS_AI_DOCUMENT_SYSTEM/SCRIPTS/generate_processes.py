#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ø–æ –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–∞–º
"""

import csv
import json
import uuid
from datetime import datetime
from kafka import KafkaProducer
import time

def load_processes(csv_file):
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    processes = []
    with open(csv_file, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            processes.append(row)
    return processes

def create_research_task(process):
    """–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –¥–ª—è ResearchAgent"""
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
    standards = ['ITIL_4']
    
    if process['iso_compliance'] == 'true':
        standards.append('ISO_IEC_20000')
    
    if process['cobit_alignment'] and process['cobit_alignment'] != '':
        standards.append('COBIT')
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
    if 'Security' in process['domain'] or 'security' in process['name'].lower():
        standards.extend(['NIST', 'ISO_27001'])
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ
    if 'Governance' in process['domain']:
        standards.append('COBIT')
    
    task = {
        'task_id': str(uuid.uuid4()),
        'process_id': process['process_id'],
        'process_name': process['name'],
        'domain': process['domain'],
        'owner': process['owner'],
        'standards': list(set(standards)),  # —É–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        'priority': int(process['priority']) if process['priority'] else 5,
        'itil_category': process['itil_category'],
        'cobit_alignment': process['cobit_alignment'],
        'created_at': datetime.now().isoformat()
    }
    
    return task

def send_tasks_to_kafka(tasks, kafka_servers='localhost:9092'):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–¥–∞—á –≤ Kafka"""
    
    producer = KafkaProducer(
        bootstrap_servers=kafka_servers,
        value_serializer=lambda v: json.dumps(v, ensure_ascii=False).encode('utf-8'),
        key_serializer=str.encode
    )
    
    topic = 'research_tasks'
    sent_count = 0
    
    print(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ {len(tasks)} –∑–∞–¥–∞—á –≤ —Ç–æ–ø–∏–∫ '{topic}'...")
    
    for task in tasks:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å –∫–ª—é—á–æ–º process_id –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            producer.send(
                topic, 
                key=task['process_id'],
                value=task
            )
            sent_count += 1
            
            if sent_count % 10 == 0:
                print(f"  ‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count}/{len(tasks)} –∑–∞–¥–∞—á")
                time.sleep(0.5)  # –Ω–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å
            
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–¥–∞—á–∏ {task['process_id']}: {e}")
    
    # –ñ–¥–µ–º –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    producer.flush()
    producer.close()
    
    print(f"üéâ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –∑–∞–¥–∞—á –≤ Kafka")
    return sent_count

def main():
    print("üåå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–¥–∞—á –¥–ª—è —Å–∏—Å—Ç–µ–º—ã GalaxyDevelopment")
    print("=" * 50)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
    print("üìñ –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤...")
    processes = load_processes('process_catalog.csv')
    print(f"  üìä –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processes)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á
    print("üè≠ –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á –¥–ª—è ResearchAgent...")
    tasks = []
    
    for process in processes:
        task = create_research_task(process)
        tasks.append(task)
    
    print(f"  üéØ –°–æ–∑–¥–∞–Ω–æ {len(tasks)} –∑–∞–¥–∞—á")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º
    domains = {}
    for task in tasks:
        domain = task['domain']
        domains[domain] = domains.get(domain, 0) + 1
    
    print("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º:")
    for domain, count in sorted(domains.items()):
        print(f"  ‚Ä¢ {domain}: {count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
    standards_count = {}
    for task in tasks:
        for standard in task['standards']:
            standards_count[standard] = standards_count.get(standard, 0) + 1
    
    print("üèÖ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º:")
    for standard, count in sorted(standards_count.items()):
        print(f"  ‚Ä¢ {standard}: {count} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Kafka
    answer = input("\n‚ùì –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤ Kafka? (y/N): ")
    if answer.lower() == 'y':
        sent_count = send_tasks_to_kafka(tasks)
        
        print(f"""
üéä –ó–ê–î–ê–ß–ò –û–¢–ü–†–ê–í–õ–ï–ù–´ –í –°–ò–°–¢–ï–ú–£!

üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
  ‚Ä¢ –í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(processes)}
  ‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–¥–∞—á: {sent_count}
  ‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –¥–æ–º–µ–Ω–æ–≤: {len(domains)}
  ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {len(standards_count)}

ü§ñ –ê–≥–µ–Ω—Ç—ã –Ω–∞—á–Ω—É—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏:
  1. ResearchAgent –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
  2. ComposerAgent —Å–æ–∑–¥–∞—Å—Ç –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
  3. ReviewerAgent –ø—Ä–æ–≤–µ—Ä–∏—Ç –∫–∞—á–µ—Å—Ç–≤–æ
  4. IntegratorAgent –∏–Ω—Ç–µ–≥—Ä–∏—Ä—É–µ—Ç —Å Git/Confluence
  5. PublisherAgent –æ–ø—É–±–ª–∏–∫—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã

‚è±Ô∏è –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: 5-15 –º–∏–Ω—É—Ç –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å
üìà –°–ª–µ–¥–∏—Ç–µ –∑–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –≤ Grafana: http://localhost:3000
        """)
    else:
        print("‚ùå –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª –¥–ª—è —Ä—É—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        with open('generated_tasks.json', 'w', encoding='utf-8') as f:
            json.dump(tasks, f, ensure_ascii=False, indent=2)
        print("üíæ –ó–∞–¥–∞—á–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª 'generated_tasks.json'")

if __name__ == "__main__":
    main()