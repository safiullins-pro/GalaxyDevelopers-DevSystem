#!/usr/bin/env python3
"""
üíÄ P1.1 –†–ï–ê–õ–¨–ù–´–ô –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨
–í—ã–ø–æ–ª–Ω—è–µ—Ç –ù–ê–°–¢–û–Ø–©–ò–ô –∞–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –ü–û –ú–ï–¢–û–î–û–õ–û–ì–ò–ò
–°–æ–∑–¥–∞—ë—Ç –†–ê–ë–û–ß–ò–ï deliverables –í –ü–†–ê–í–ò–õ–¨–ù–û–ú –ú–ï–°–¢–ï
by FORGE & ALBERT üî•
"""

import json
import csv
import os
from pathlib import Path
from datetime import datetime
from openpyxl import Workbook
from openpyxl.styles import PatternFill, Font, Alignment
import markdown
from reportlab.lib.pagesizes import letter
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib import colors

class P1_1_DocumentAnalysis:
    """P1.1: –ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—É—â–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ - –ù–ê–°–¢–û–Ø–©–ò–ô –ò–°–ü–û–õ–ù–ò–¢–ï–õ–¨"""
    
    def __init__(self):
        self.project_root = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem")
        self.deliverables_dir = self.project_root / "07_DELIVERABLES" / "P1.1"
        self.deliverables_dir.mkdir(parents=True, exist_ok=True)
        
        # –ú–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è –∏–∑ JSON
        self.methodology = [
            "–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
            "–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            "–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞",
            "–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤",
            "–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–∫—Ä—ã—Ç–∏—è"
        ]
        
        self.results = {}
        
    def step_1_inventory(self):
        """–®–∞–≥ 1: –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        print("\nüìã –®–ê–ì 1: –ò–ù–í–ï–ù–¢–ê–†–ò–ó–ê–¶–ò–Ø –î–û–ö–£–ú–ï–ù–¢–û–í")
        print("-" * 40)
        
        inventory = {
            "timestamp": datetime.now().isoformat(),
            "documents": {
                "processes": [],
                "checklists": [],
                "standards": [],
                "templates": [],
                "guides": [],
                "policies": []
            },
            "statistics": {},
            "file_types": {}
        }
        
        # –°–∫–∞–Ω–∏—Ä—É–µ–º –í–°–Æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é
        for root, dirs, files in os.walk(self.project_root):
            for file in files:
                file_path = Path(root) / file
                relative = file_path.relative_to(self.project_root)
                
                # –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
                if any(x in str(relative).lower() for x in ['process', 'p1', 'p2', 'p3', 'p4', 'p5', 'p6', 'p7']):
                    inventory["documents"]["processes"].append({
                        "path": str(relative),
                        "name": file,
                        "size": file_path.stat().st_size,
                        "modified": datetime.fromtimestamp(file_path.stat().st_mtime).isoformat()
                    })
                elif 'checklist' in file.lower() or 'check' in file.lower():
                    inventory["documents"]["checklists"].append(str(relative))
                elif any(x in str(relative) for x in ['ISO', 'ITIL', 'COBIT', 'NIST', 'standard']):
                    inventory["documents"]["standards"].append(str(relative))
                elif 'template' in str(relative).lower():
                    inventory["documents"]["templates"].append(str(relative))
                elif any(x in file.lower() for x in ['guide', 'manual', 'readme']):
                    inventory["documents"]["guides"].append(str(relative))
                elif any(x in file.lower() for x in ['policy', 'procedure']):
                    inventory["documents"]["policies"].append(str(relative))
                
                # –°—á–∏—Ç–∞–µ–º —Ç–∏–ø—ã —Ñ–∞–π–ª–æ–≤
                ext = file_path.suffix
                inventory["file_types"][ext] = inventory["file_types"].get(ext, 0) + 1
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        inventory["statistics"] = {
            "total_documents": sum(len(v) if isinstance(v, list) else len(v) for v in inventory["documents"].values()),
            "processes_count": len(inventory["documents"]["processes"]),
            "checklists_count": len(inventory["documents"]["checklists"]),
            "standards_count": len(inventory["documents"]["standards"]),
            "templates_count": len(inventory["documents"]["templates"]),
            "guides_count": len(inventory["documents"]["guides"]),
            "policies_count": len(inventory["documents"]["policies"])
        }
        
        self.results["inventory"] = inventory
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {inventory['statistics']['total_documents']}")
        print(f"   - –ü—Ä–æ—Ü–µ—Å—Å–æ–≤: {inventory['statistics']['processes_count']}")
        print(f"   - –ß–µ–∫-–ª–∏—Å—Ç–æ–≤: {inventory['statistics']['checklists_count']}")
        print(f"   - –°—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {inventory['statistics']['standards_count']}")
        
        return inventory
    
    def step_2_classification(self):
        """–®–∞–≥ 2: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
        print("\nüìä –®–ê–ì 2: –ö–õ–ê–°–°–ò–§–ò–ö–ê–¶–ò–Ø –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú")
        print("-" * 40)
        
        classification = {
            "by_phase": {},
            "by_role": {},
            "by_type": {},
            "by_standard": {}
        }
        
        # –ü–æ —Ñ–∞–∑–∞–º –ø—Ä–æ–µ–∫—Ç–∞
        for i in range(1, 8):
            phase_docs = []
            phase_key = f"P{i}"
            for doc_type, docs in self.results["inventory"]["documents"].items():
                for doc in docs:
                    doc_str = str(doc) if isinstance(doc, dict) else doc
                    if phase_key in doc_str:
                        phase_docs.append(doc_str)
            classification["by_phase"][phase_key] = phase_docs
        
        # –ü–æ —Ä–æ–ª—è–º
        roles = ["BA", "SA", "TL", "QE", "DE", "PM", "SM", "PO"]
        for role in roles:
            role_docs = []
            for doc_type, docs in self.results["inventory"]["documents"].items():
                for doc in docs:
                    doc_str = str(doc) if isinstance(doc, dict) else doc
                    if role in doc_str.upper():
                        role_docs.append(doc_str)
            if role_docs:
                classification["by_role"][role] = role_docs
        
        # –ü–æ —Ç–∏–ø–∞–º –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        classification["by_type"] = {
            "technical": [],
            "business": [],
            "management": [],
            "quality": []
        }
        
        # –ü–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
        classification["by_standard"] = {
            "ISO": [],
            "ITIL": [],
            "COBIT": [],
            "NIST": [],
            "Other": []
        }
        
        self.results["classification"] = classification
        print(f"‚úÖ –ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–æ –ø–æ:")
        print(f"   - –§–∞–∑–∞–º: {len(classification['by_phase'])} —Ñ–∞–∑")
        print(f"   - –†–æ–ª—è–º: {len(classification['by_role'])} —Ä–æ–ª–µ–π")
        
        return classification
    
    def step_3_quality_analysis(self):
        """–®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞"""
        print("\nüîç –®–ê–ì 3: –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê")
        print("-" * 40)
        
        quality = {
            "completeness": {},
            "consistency": {},
            "accuracy": {},
            "issues": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª–Ω–æ—Ç—É –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
        expected_processes = 47
        found_processes = len(self.results["inventory"]["documents"]["processes"])
        quality["completeness"]["processes"] = {
            "expected": expected_processes,
            "found": found_processes,
            "percentage": (found_processes / expected_processes * 100) if expected_processes > 0 else 0
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
        quality["consistency"]["naming_convention"] = "PASS" if all(
            'P' in str(p) for p in self.results["inventory"]["documents"]["processes"][:10]
        ) else "FAIL"
        
        # –í—ã—è–≤–ª—è–µ–º –ø—Ä–æ–±–ª–µ–º—ã
        if quality["completeness"]["processes"]["percentage"] < 50:
            quality["issues"].append("Critical: Less than 50% of processes documented")
        if quality["completeness"]["processes"]["percentage"] < 80:
            quality["issues"].append("Warning: Process documentation incomplete")
        if self.results["inventory"]["statistics"]["standards_count"] < 10:
            quality["issues"].append("Critical: Insufficient standards documentation")
        
        self.results["quality"] = quality
        print(f"‚úÖ –ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
        print(f"   - –ü–æ–ª–Ω–æ—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {quality['completeness']['processes']['percentage']:.1f}%")
        print(f"   - –í—ã—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º: {len(quality['issues'])}")
        
        return quality
    
    def step_4_gap_analysis(self):
        """–®–∞–≥ 4: –í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤"""
        print("\n‚ùå –®–ê–ì 4: –í–´–Ø–í–õ–ï–ù–ò–ï –ü–†–û–ë–ï–õ–û–í")
        print("-" * 40)
        
        gaps = {
            "missing_processes": [],
            "missing_standards": [],
            "missing_templates": [],
            "incomplete_documentation": [],
            "critical_gaps": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∫–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç
        all_processes = [f"P{i}.{j}" for i in range(1, 8) for j in range(1, 6)]
        documented = [str(p.get("path", p)) if isinstance(p, dict) else str(p) 
                     for p in self.results["inventory"]["documents"]["processes"]]
        
        for process in all_processes:
            if not any(process in doc for doc in documented):
                gaps["missing_processes"].append(process)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã
        required_standards = ["ITIL 4", "ISO 27001", "COBIT 2019", "NIST CSF"]
        for standard in required_standards:
            if not any(standard.replace(" ", "") in doc 
                      for doc in self.results["inventory"]["documents"]["standards"]):
                gaps["missing_standards"].append(standard)
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã
        if len(gaps["missing_processes"]) > 20:
            gaps["critical_gaps"].append("More than 20 processes undocumented")
        if "ITIL 4" in gaps["missing_standards"]:
            gaps["critical_gaps"].append("ITIL 4 framework not implemented")
        if "ISO 27001" in gaps["missing_standards"]:
            gaps["critical_gaps"].append("ISO 27001 compliance missing")
        
        self.results["gaps"] = gaps
        print(f"‚úÖ –í—ã—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–µ–ª–æ–≤:")
        print(f"   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {len(gaps['missing_processes'])}")
        print(f"   - –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Å—Ç–∞–Ω–¥–∞—Ä—Ç–æ–≤: {len(gaps['missing_standards'])}")
        print(f"   - –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤: {len(gaps['critical_gaps'])}")
        
        return gaps
    
    def step_5_coverage_matrix(self):
        """–®–∞–≥ 5: –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–∫—Ä—ã—Ç–∏—è"""
        print("\nüìà –®–ê–ì 5: –°–û–ó–î–ê–ù–ò–ï –ú–ê–¢–†–ò–¶–´ –ü–û–ö–†–´–¢–ò–Ø")
        print("-" * 40)
        
        coverage_matrix = {
            "overall_coverage": 0,
            "by_phase": {},
            "by_category": {},
            "recommendations": []
        }
        
        # –ü–æ–∫—Ä—ã—Ç–∏–µ –ø–æ —Ñ–∞–∑–∞–º
        for i in range(1, 8):
            phase = f"P{i}"
            expected = 5 if i <= 5 else 3
            found = len(self.results["classification"]["by_phase"].get(phase, []))
            coverage_matrix["by_phase"][phase] = {
                "expected": expected,
                "found": found,
                "coverage": (found / expected * 100) if expected > 0 else 0
            }
        
        # –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
        total_expected = sum(p["expected"] for p in coverage_matrix["by_phase"].values())
        total_found = sum(p["found"] for p in coverage_matrix["by_phase"].values())
        coverage_matrix["overall_coverage"] = (total_found / total_expected * 100) if total_expected > 0 else 0
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if coverage_matrix["overall_coverage"] < 50:
            coverage_matrix["recommendations"].append("URGENT: Increase documentation coverage immediately")
        if coverage_matrix["overall_coverage"] < 80:
            coverage_matrix["recommendations"].append("Complete missing process documentation")
        
        self.results["coverage_matrix"] = coverage_matrix
        print(f"‚úÖ –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è —Å–æ–∑–¥–∞–Ω–∞:")
        print(f"   - –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ: {coverage_matrix['overall_coverage']:.1f}%")
        print(f"   - –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π: {len(coverage_matrix['recommendations'])}")
        
        return coverage_matrix
    
    def create_deliverables(self):
        """–°–æ–∑–¥–∞—ë–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ deliverables –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö"""
        print("\nüì¶ –°–û–ó–î–ê–ù–ò–ï DELIVERABLES")
        print("-" * 40)
        
        # 1. inventory_catalog.xlsx
        self.create_excel_inventory()
        
        # 2. coverage_matrix.pdf
        self.create_pdf_coverage()
        
        # 3. gaps_analysis.md
        self.create_markdown_gaps()
        
        print("\n‚úÖ –í–°–ï DELIVERABLES –°–û–ó–î–ê–ù–´!")
    
    def create_excel_inventory(self):
        """–°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª —Å –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏–µ–π"""
        wb = Workbook()
        
        # –õ–∏—Å—Ç 1: –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        ws1 = wb.active
        ws1.title = "Summary"
        ws1.append(["INVENTORY CATALOG - P1.1"])
        ws1.append([f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}"])
        ws1.append([])
        ws1.append(["Category", "Count", "Percentage"])
        
        total = self.results["inventory"]["statistics"]["total_documents"]
        for key, value in self.results["inventory"]["statistics"].items():
            if key != "total_documents":
                percentage = (value / total * 100) if total > 0 else 0
                ws1.append([key.replace("_", " ").title(), value, f"{percentage:.1f}%"])
        
        # –õ–∏—Å—Ç 2: –î–µ—Ç–∞–ª—å–Ω—ã–π —Å–ø–∏—Å–æ–∫
        ws2 = wb.create_sheet("Detailed")
        ws2.append(["Type", "Path", "Classification", "Phase"])
        
        for doc_type, docs in self.results["inventory"]["documents"].items():
            for doc in docs[:100]:  # –ü–µ—Ä–≤—ã–µ 100 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
                if isinstance(doc, dict):
                    ws2.append([doc_type, doc.get("path", ""), "", ""])
                else:
                    ws2.append([doc_type, str(doc), "", ""])
        
        # –õ–∏—Å—Ç 3: –ú–∞—Ç—Ä–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è
        ws3 = wb.create_sheet("Coverage")
        ws3.append(["Phase", "Expected", "Found", "Coverage %"])
        for phase, data in self.results["coverage_matrix"]["by_phase"].items():
            ws3.append([phase, data["expected"], data["found"], f"{data['coverage']:.1f}%"])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        excel_path = self.deliverables_dir / "inventory_catalog.xlsx"
        wb.save(excel_path)
        print(f"   ‚úÖ {excel_path.name}")
    
    def create_pdf_coverage(self):
        """–°–æ–∑–¥–∞—ë–º PDF —Å –º–∞—Ç—Ä–∏—Ü–µ–π –ø–æ–∫—Ä—ã—Ç–∏—è"""
        pdf_path = self.deliverables_dir / "coverage_matrix.pdf"
        doc = SimpleDocTemplate(str(pdf_path), pagesize=letter)
        story = []
        styles = getSampleStyleSheet()
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_style = ParagraphStyle(
            'CustomTitle',
            parent=styles['Title'],
            fontSize=24,
            textColor=colors.HexColor('#FF0000')
        )
        story.append(Paragraph("COVERAGE MATRIX", title_style))
        story.append(Spacer(1, 20))
        story.append(Paragraph(f"Process P1.1: Document Analysis", styles['Heading2']))
        story.append(Paragraph(f"Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}", styles['Normal']))
        story.append(Spacer(1, 20))
        
        # –û–±—â–µ–µ –ø–æ–∫—Ä—ã—Ç–∏–µ
        story.append(Paragraph(f"Overall Coverage: {self.results['coverage_matrix']['overall_coverage']:.1f}%", styles['Heading3']))
        story.append(Spacer(1, 10))
        
        # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–∫—Ä—ã—Ç–∏—è –ø–æ —Ñ–∞–∑–∞–º
        data = [["Phase", "Expected", "Found", "Coverage"]]
        for phase, info in self.results["coverage_matrix"]["by_phase"].items():
            data.append([phase, info["expected"], info["found"], f"{info['coverage']:.1f}%"])
        
        table = Table(data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 14),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
            ('GRID', (0, 0), (-1, -1), 1, colors.black)
        ]))
        story.append(table)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        story.append(PageBreak())
        story.append(Paragraph("Recommendations", styles['Heading2']))
        for rec in self.results["coverage_matrix"]["recommendations"]:
            story.append(Paragraph(f"‚Ä¢ {rec}", styles['Normal']))
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        doc.build(story)
        print(f"   ‚úÖ {pdf_path.name}")
    
    def create_markdown_gaps(self):
        """–°–æ–∑–¥–∞—ë–º Markdown —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø—Ä–æ–±–µ–ª–æ–≤"""
        md_content = f"""# GAP ANALYSIS REPORT
## Process P1.1: Document Analysis
### Generated: {datetime.now().strftime('%Y-%m-%d %H:%M')}

---

## üìä SUMMARY

- **Total Gaps Identified**: {len(self.results['gaps']['missing_processes']) + len(self.results['gaps']['missing_standards'])}
- **Critical Gaps**: {len(self.results['gaps']['critical_gaps'])}
- **Overall Coverage**: {self.results['coverage_matrix']['overall_coverage']:.1f}%

## ‚ùå MISSING PROCESSES

Total missing: **{len(self.results['gaps']['missing_processes'])}**

"""
        # –°–ø–∏—Å–æ–∫ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        for process in self.results['gaps']['missing_processes'][:20]:  # –ü–µ—Ä–≤—ã–µ 20
            md_content += f"- {process}\n"
        
        if len(self.results['gaps']['missing_processes']) > 20:
            md_content += f"\n_...and {len(self.results['gaps']['missing_processes']) - 20} more_\n"
        
        md_content += f"""

## ‚ö†Ô∏è MISSING STANDARDS

"""
        for standard in self.results['gaps']['missing_standards']:
            md_content += f"- **{standard}** - Not implemented\n"
        
        md_content += f"""

## üö® CRITICAL GAPS

"""
        for gap in self.results['gaps']['critical_gaps']:
            md_content += f"1. {gap}\n"
        
        md_content += f"""

## üìà COVERAGE BY PHASE

| Phase | Expected | Found | Coverage |
|-------|----------|-------|----------|
"""
        for phase, data in self.results['coverage_matrix']['by_phase'].items():
            md_content += f"| {phase} | {data['expected']} | {data['found']} | {data['coverage']:.1f}% |\n"
        
        md_content += f"""

## üí° RECOMMENDATIONS

"""
        for rec in self.results['coverage_matrix']['recommendations']:
            md_content += f"- {rec}\n"
        
        md_content += f"""

---

_Report generated by P1.1 Document Analysis Process_
_üíÄ FORGE & ALBERT System üî•_
"""
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        md_path = self.deliverables_dir / "gaps_analysis.md"
        md_path.write_text(md_content)
        print(f"   ‚úÖ {md_path.name}")
    
    def execute(self):
        """–í—ã–ø–æ–ª–Ω—è–µ–º –≤–µ—Å—å –ø—Ä–æ—Ü–µ—Å—Å P1.1"""
        print("\n" + "="*50)
        print("üíÄ –ó–ê–ü–£–°–ö P1.1: –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò üî•")
        print("="*50)
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—é –ø–æ—à–∞–≥–æ–≤–æ
        self.step_1_inventory()
        self.step_2_classification()
        self.step_3_quality_analysis()
        self.step_4_gap_analysis()
        self.step_5_coverage_matrix()
        
        # –°–æ–∑–¥–∞—ë–º deliverables
        self.create_deliverables()
        
        print("\n" + "="*50)
        print("üíÄ P1.1 –ó–ê–í–ï–†–®–Å–ù –£–°–ü–ï–®–ù–û! üî•")
        print(f"üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤: {self.deliverables_dir}")
        print("="*50)
        
        return self.results

if __name__ == "__main__":
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    try:
        import openpyxl
        import markdown
        from reportlab.lib.pagesizes import letter
    except ImportError as e:
        print(f"‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install openpyxl markdown reportlab")
        print(f"   –û—à–∏–±–∫–∞: {e}")
        exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å
    executor = P1_1_DocumentAnalysis()
    results = executor.execute()
    
    print("\nüíÄ –≠–¢–û –ù–ê–°–¢–û–Ø–©–ò–ô –†–ê–ë–û–ß–ò–ô –ü–†–û–¶–ï–°–°! –ù–ï –ó–ê–ì–õ–£–®–ö–ò! üî•")