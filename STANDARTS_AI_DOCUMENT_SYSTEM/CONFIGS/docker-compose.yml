version: '3.8'

services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: galaxy-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      ZOOKEEPER_SYNC_LIMIT: 2
      ZOOKEEPER_SERVER_ID: 1
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: galaxy-kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9997:9997"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_LOG_RETENTION_HOURS: 168
      KAFKA_LOG_RETENTION_BYTES: 1073741824
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:29092"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  postgres:
    image: postgres:15-alpine
    container_name: galaxy-postgres
    env_file: .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
      POSTGRES_HOST_AUTH_METHOD: scram-sha-256
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/01-init.sql
      - ./backups:/backups
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '1'
          memory: 1G

  redis:
    image: redis:7-alpine
    container_name: galaxy-redis
    env_file: .env
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  # Galaxy Orchestrator
  orchestrator:
    build:
      context: .
      dockerfile: Dockerfile.orchestrator
    container_name: galaxy-orchestrator
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - SERVICE_NAME=orchestrator
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "9000:9000"  # Metrics
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G

  # Elena - Standards Research Agent
  elena-standards:
    build:
      context: ./agents/elena
      dockerfile: Dockerfile
    container_name: galaxy-elena-standards
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=elena_standards_genius
      - METRICS_PORT=8001
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/elena:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Marcus - Document Composer Agent
  marcus-composer:
    build:
      context: ./agents/marcus
      dockerfile: Dockerfile
    container_name: galaxy-marcus-composer
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=marcus_document_master
      - METRICS_PORT=8002
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/marcus:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Victoria - Quality Reviewer Agent
  victoria-reviewer:
    build:
      context: ./agents/victoria
      dockerfile: Dockerfile
    container_name: galaxy-victoria-reviewer
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=victoria_quality_hawk
      - METRICS_PORT=8003
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/victoria:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Alex - Git Integrator Agent
  alex-integrator:
    build:
      context: ./agents/alex
      dockerfile: Dockerfile
    container_name: galaxy-alex-integrator
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=alex_git_master
      - METRICS_PORT=8004
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/alex:/app/data
      - ./git-repos:/app/git-repos
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Sarah - Distribution Publisher Agent
  sarah-publisher:
    build:
      context: ./agents/sarah
      dockerfile: Dockerfile
    container_name: galaxy-sarah-publisher
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=sarah_distribution_master
      - METRICS_PORT=8005
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/sarah:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Viktor - Security Guardian Agent
  viktor-security:
    build:
      context: ./agents/viktor
      dockerfile: Dockerfile
    container_name: galaxy-viktor-security
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=viktor_cyber_guardian
      - METRICS_PORT=8006
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/viktor:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Dmitri - Performance Specialist Agent
  dmitri-performance:
    build:
      context: ./agents/dmitri
      dockerfile: Dockerfile
    container_name: galaxy-dmitri-performance
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=dmitri_speed_demon
      - METRICS_PORT=8007
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/dmitri:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Olga - Data Analytics Agent
  olga-data:
    build:
      context: ./agents/olga
      dockerfile: Dockerfile
    container_name: galaxy-olga-data
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=olga_data_whisperer
      - METRICS_PORT=8008
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/olga:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Jake - Mobile App Agent
  jake-mobile:
    build:
      context: ./agents/jake
      dockerfile: Dockerfile
    container_name: galaxy-jake-mobile
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=jake_app_master
      - METRICS_PORT=8009
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/jake:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8009/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Catherine - Compliance Agent
  catherine-compliance:
    build:
      context: ./agents/catherine
      dockerfile: Dockerfile
    container_name: galaxy-catherine-compliance
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=catherine_regulatory_expert
      - METRICS_PORT=8010
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/catherine:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8010/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Boris - Testing Agent
  boris-testing:
    build:
      context: ./agents/boris
      dockerfile: Dockerfile
    container_name: galaxy-boris-testing
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=boris_testing_machine
      - METRICS_PORT=8011
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/boris:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8011/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  # Ivan - Deployment Agent
  ivan-deployment:
    build:
      context: ./agents/ivan
      dockerfile: Dockerfile
    container_name: galaxy-ivan-deployment
    env_file: .env
    environment:
      - PYTHONUNBUFFERED=1
      - AGENT_TYPE=ivan_deploy_master
      - METRICS_PORT=8012
    depends_on:
      orchestrator:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./data/ivan:/app/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8012/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  prometheus:
    image: prom/prometheus:latest
    container_name: galaxy-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:9090/-/healthy"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G

  grafana:
    image: grafana/grafana:latest
    container_name: galaxy-grafana
    env_file: .env
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 512M

  nginx:
    image: nginx:alpine
    container_name: galaxy-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./static:/usr/share/nginx/html
    depends_on:
      - grafana
      - prometheus
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16