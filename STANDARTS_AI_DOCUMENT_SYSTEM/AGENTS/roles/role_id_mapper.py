#!/usr/bin/env python3
"""
RoleIdMapper - –ú–∞–ø–ø–∏–Ω–≥ –Ω–∞–∑–≤–∞–Ω–∏–π —Ä–æ–ª–µ–π –Ω–∞ –∏—Ö ID –≤ —Å–∏—Å—Ç–µ–º–µ
–†–ï–®–ê–ï–¢ –ü–†–û–ë–õ–ï–ú–£: System Architect + Technical Lead ‚Üí SA_2a6c2a + TL_6de9b7
–ê–≤—Ç–æ—Ä: GALAXYDEVELOPMENT
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import json
import re
from pathlib import Path
from typing import Dict, List, Optional

class RoleIdMapper:
    """–ú–∞–ø–ø–µ—Ä —Ä–æ–ª–µ–π –Ω–∞ –∏—Ö ID"""
    
    def __init__(self):
        self.roles_dir = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem/05_ROLES")
        self.role_map = {}  # title -> role_id
        self.reverse_map = {}  # role_id -> full profile
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ä–æ–ª–∏
        self._load_all_roles()
    
    def _load_all_roles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–æ–ª–µ–π –∏–∑ —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã"""
        
        if not self.roles_dir.exists():
            print("‚ùå Roles directory not found!")
            return
        
        for role_dir in self.roles_dir.iterdir():
            if role_dir.is_dir():
                profile_file = role_dir / "profile.json"
                
                if profile_file.exists():
                    try:
                        with open(profile_file, 'r', encoding='utf-8') as f:
                            profile = json.load(f)
                        
                        role_id = profile.get("role_id")
                        title = profile.get("title")
                        original_title = profile.get("original_title")
                        
                        if role_id and title:
                            # –û—Å–Ω–æ–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
                            self.role_map[title] = role_id
                            
                            # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è)
                            if original_title and original_title != title:
                                self.role_map[original_title] = role_id
                            
                            # –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
                            self.reverse_map[role_id] = profile
                            
                            print(f"‚úÖ Loaded role: {title} ‚Üí {role_id}")
                    
                    except Exception as e:
                        print(f"‚ùå Error loading role from {profile_file}: {e}")
        
        print(f"üìä Total roles loaded: {len(self.role_map)}")
    
    def normalize_role_name(self, role_name: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–ª–∏"""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
        role_name = role_name.strip()
        
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        role_mappings = {
            "BA": "Business Analyst",
            "Solution Architect": "System Architect", 
            "Tech Lead": "Technical Lead",
            "DevOps": "DevOps Engineer",
            "QA": "QA Engineer",
            "Tester": "QA Engineer",
            "Security Engineer": "Security Specialist",
            "iOS/macOS Developer": "iOS Developer",
            "Mobile Developer": "iOS Developer",
            "ML Engineer": "AI/ML Engineer",
            "DBA": "Database Architect",
            "Database Developer": "Database Architect",
            "Compliance Specialist": "Compliance Officer",
            "IT Auditor": "Compliance Officer",
            "AI": "AI Specialist",
            "UX": "UX Designer",
            "UI": "UI Designer"
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è
        for alt, standard in role_mappings.items():
            if alt.lower() == role_name.lower():
                return standard
        
        return role_name
    
    def parse_executor(self, executor: str) -> List[str]:
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π —Ç–∏–ø–∞ 'System Architect + Technical Lead'"""
        
        if not executor:
            return []
        
        # –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è —Å–æ—Å—Ç–∞–≤–Ω—ã—Ö —Ä–æ–ª–µ–π
        separators = [' + ', '+', ' and ', '&', ' / ', '/']
        
        roles = [executor]  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∏—Å—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –≤—Å–µ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏
        for separator in separators:
            new_roles = []
            for role in roles:
                if separator in role:
                    new_roles.extend([r.strip() for r in role.split(separator)])
                else:
                    new_roles.append(role)
            roles = new_roles
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –∫–∞–∂–¥—É—é —Ä–æ–ª—å
        normalized_roles = []
        for role in roles:
            normalized = self.normalize_role_name(role)
            if normalized:
                normalized_roles.append(normalized)
        
        return normalized_roles
    
    def get_role_ids(self, executor: str) -> List[Dict[str, str]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ ID —Ä–æ–ª–µ–π –¥–ª—è –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è"""
        
        roles = self.parse_executor(executor)
        result = []
        
        for role in roles:
            role_id = self.role_map.get(role)
            
            if role_id:
                result.append({
                    "role": role,
                    "role_id": role_id,
                    "found": True
                })
            else:
                result.append({
                    "role": role,
                    "role_id": None,
                    "found": False
                })
        
        return result
    
    def get_role_profile(self, role_id: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Ä–æ–ª–∏ –ø–æ ID"""
        return self.reverse_map.get(role_id)
    
    def create_role_mapping_json(self) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ JSON –º–∞–ø–ø–∏–Ω–≥–∞ –≤—Å–µ—Ö —Ä–æ–ª–µ–π"""
        
        mapping = {
            "role_mapping": {},
            "reverse_mapping": {},
            "statistics": {
                "total_roles": len(self.role_map),
                "role_ids": list(self.reverse_map.keys())
            }
        }
        
        # –ü—Ä—è–º–æ–π –º–∞–ø–ø–∏–Ω–≥: –Ω–∞–∑–≤–∞–Ω–∏–µ ‚Üí ID
        mapping["role_mapping"] = self.role_map
        
        # –û–±—Ä–∞—Ç–Ω—ã–π –º–∞–ø–ø–∏–Ω–≥: ID ‚Üí –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        for role_id, profile in self.reverse_map.items():
            mapping["reverse_mapping"][role_id] = {
                "title": profile.get("title"),
                "original_title": profile.get("original_title"),
                "skills_count": len(profile.get("skills", [])),
                "certifications_count": len(profile.get("certifications", [])),
                "competency_level": profile.get("competency_levels", {}).get("technical", "unknown")
            }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        mapping_file = self.roles_dir.parent / "00_PROJECT_MANAGEMENT" / "ROLE_MAPPING.json"
        mapping_file.parent.mkdir(exist_ok=True)
        
        with open(mapping_file, 'w', encoding='utf-8') as f:
            json.dump(mapping, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Role mapping saved to: {mapping_file}")
        
        return str(mapping_file)
    
    def test_executor_parsing(self):
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π"""
        
        test_cases = [
            "Business Analyst",
            "System Architect + Technical Lead",
            "DevOps Engineer + Integration Architect", 
            "QA Engineer + Test Automation Engineer",
            "iOS Developer + Swift Developer",
            "AI/ML Engineer + Python Developer",
            "Security Specialist + Penetration Tester",
            "Solution Architect",  # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
            "Tech Lead",  # –°–æ–∫—Ä–∞—â–µ–Ω–∏–µ
            "BA"  # –ê–±–±—Ä–µ–≤–∏–∞—Ç—É—Ä–∞
        ]
        
        print("\n" + "="*60)
        print("üß™ TESTING EXECUTOR PARSING")
        print("="*60)
        
        for executor in test_cases:
            print(f"\nüìã Executor: '{executor}'")
            
            # –ü–∞—Ä—Å–∏–º —Ä–æ–ª–∏
            roles = self.parse_executor(executor)
            print(f"   Parsed roles: {roles}")
            
            # –ü–æ–ª—É—á–∞–µ–º ID
            role_ids = self.get_role_ids(executor)
            
            for role_info in role_ids:
                status = "‚úÖ" if role_info["found"] else "‚ùå"
                role_id = role_info["role_id"] or "NOT_FOUND"
                print(f"   {status} {role_info['role']} ‚Üí {role_id}")
        
        print("="*60)
    
    def create_process_role_matrix(self, project_config: Dict) -> Dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø—Ä–æ—Ü–µ—Å—Å ‚Üí —Ä–æ–ª–∏"""
        
        matrix = {
            "processes": [],
            "role_assignments": {},
            "missing_roles": [],
            "statistics": {
                "total_processes": 0,
                "roles_found": 0,
                "roles_missing": 0
            }
        }
        
        for phase in project_config.get("phases", []):
            phase_id = phase.get("phase_id")
            
            for process in phase.get("microprocesses", []):
                process_id = process.get("id")
                process_name = process.get("name")
                executor = process.get("executor", "")
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Ä–æ–ª–µ–π
                role_ids = self.get_role_ids(executor)
                
                process_info = {
                    "process_id": process_id,
                    "process_name": process_name,
                    "phase_id": phase_id,
                    "executor": executor,
                    "assigned_roles": []
                }
                
                for role_info in role_ids:
                    if role_info["found"]:
                        process_info["assigned_roles"].append({
                            "role": role_info["role"],
                            "role_id": role_info["role_id"]
                        })
                        matrix["statistics"]["roles_found"] += 1
                    else:
                        matrix["missing_roles"].append({
                            "process_id": process_id,
                            "role": role_info["role"]
                        })
                        matrix["statistics"]["roles_missing"] += 1
                
                matrix["processes"].append(process_info)
                matrix["statistics"]["total_processes"] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞—Ç—Ä–∏—Ü—É
        matrix_file = self.roles_dir.parent / "00_PROJECT_MANAGEMENT" / "PROCESS_ROLE_MATRIX.json"
        
        with open(matrix_file, 'w', encoding='utf-8') as f:
            json.dump(matrix, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Process-Role matrix saved to: {matrix_file}")
        
        return matrix


def main():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ RoleIdMapper"""
    
    print("üöÄ ROLE ID MAPPER - –†–ï–®–ê–ï–ú –ü–†–û–ë–õ–ï–ú–£ –ü–û–ò–°–ö–ê –†–û–õ–ï–ô!")
    
    mapper = RoleIdMapper()
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
    mapping_file = mapper.create_role_mapping_json()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–∏–Ω–≥
    mapper.test_executor_parsing()
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—Ä–∏—Ü—ã
    config_path = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem/ ToDo/9d7e2139-7cfe-4512-99c0-70b4247b038f.jsonl  ‚Äî  _Users_safiullins_pro_.claude_projects_-Volumes-Z7S-development-GalaxyAnalitics---------AppsScript-AnaliticsSystem.json")
    
    if config_path.exists():
        with open(config_path, 'r', encoding='utf-8') as f:
            project_config = json.load(f)
        
        # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –ø—Ä–æ—Ü–µ—Å—Å ‚Üí —Ä–æ–ª–∏
        matrix = mapper.create_process_role_matrix(project_config)
        
        print(f"\nüìä PROCESS-ROLE MATRIX STATISTICS:")
        print(f"   Total processes: {matrix['statistics']['total_processes']}")
        print(f"   Roles found: {matrix['statistics']['roles_found']}")
        print(f"   Roles missing: {matrix['statistics']['roles_missing']}")
        
        if matrix['missing_roles']:
            print(f"\n‚ö†Ô∏è MISSING ROLES:")
            for missing in matrix['missing_roles'][:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5
                print(f"   - {missing['role']} (needed for {missing['process_id']})")
    
    print(f"\n‚úÖ SOLUTION READY!")
    print(f"üìÅ Use files:")
    print(f"   - ROLE_MAPPING.json")
    print(f"   - PROCESS_ROLE_MATRIX.json")


if __name__ == "__main__":
    main()