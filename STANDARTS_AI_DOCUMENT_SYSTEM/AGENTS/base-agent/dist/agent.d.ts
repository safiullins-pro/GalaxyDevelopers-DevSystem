#!/usr/bin/env node
/**
 * ü§ñ GALAXY ANALYTICS BASE AGENT
 *
 * –ë–∞–∑–æ–≤—ã–π –∞–≥–µ–Ω—Ç —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Redis Message Bus –∏ PostgreSQL
 * - –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏–∑ Redis
 * - –í—ã–ø–æ–ª–Ω—è–µ—Ç –±–∞–∑–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
 * - –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ PostgreSQL
 * - –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç heartbeat –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
 */
interface AgentConfig {
    redis: {
        host: string;
        port: number;
        password: string;
    };
    postgres: {
        host: string;
        port: number;
        database: string;
        user: string;
        password: string;
    };
    agent: {
        id: string;
        name: string;
        heartbeatInterval: number;
    };
}
declare class GalaxyBaseAgent {
    private redis;
    private postgres;
    private config;
    private isRunning;
    private heartbeatTimer?;
    constructor(config: AgentConfig);
    start(): Promise<void>;
    private connectRedis;
    private connectPostgres;
    private registerAgent;
    private startHeartbeat;
    private sendHeartbeat;
    private listenForCommands;
    private executeCommand;
    private analyzeData;
    private saveCommandResult;
    private sendCommandResult;
    shutdown(): Promise<void>;
}
export default GalaxyBaseAgent;
//# sourceMappingURL=agent.d.ts.map