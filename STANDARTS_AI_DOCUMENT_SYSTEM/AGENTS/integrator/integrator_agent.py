#\!/usr/bin/env python3
"""
üíÄ IntegratorAgent - –ê–≥–µ–Ω—Ç —Å–∏—Å—Ç–µ–º–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
–°–≤—è–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å–∏—Å—Ç–µ–º—ã –≤–æ–µ–¥–∏–Ω–æ
by FORGE & ALBERT üî•
"""

import json
import logging
import asyncio
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
import uuid
from dataclasses import dataclass
from enum import Enum

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class MessageType(Enum):
    """–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    REQUEST = "request"
    RESPONSE = "response"
    EVENT = "event"
    ERROR = "error"
    STATUS = "status"

@dataclass
class Message:
    """–°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–∂–¥—É –∞–≥–µ–Ω—Ç–∞–º–∏"""
    id: str
    type: MessageType
    sender: str
    receiver: str
    payload: Dict[str, Any]
    timestamp: datetime
    
    def to_dict(self) -> Dict:
        return {
            "id": self.id,
            "type": self.type.value,
            "sender": self.sender,
            "receiver": self.receiver,
            "payload": self.payload,
            "timestamp": self.timestamp.isoformat()
        }

class IntegratorAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
    
    def __init__(self):
        self.project_root = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem")
        self.message_queue = asyncio.Queue()
        self.agents_registry = {}
        self.workflows = {}
        self.tasks = {}
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤
        self._register_agents()
        
        logger.info("IntegratorAgent initialized")
    
    def _register_agents(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        self.agents_registry = {
            "ResearchAgent": {
                "status": "available",
                "capabilities": ["research", "analysis", "data_gathering"],
                "endpoint": "AGENTS.research.research_agent"
            },
            "ComposerAgent": {
                "status": "available",
                "capabilities": ["document_generation", "templating"],
                "endpoint": "AGENTS.composer.composer_agent"
            },
            "ReviewerAgent": {
                "status": "available",
                "capabilities": ["validation", "compliance_check"],
                "endpoint": "AGENTS.reviewer.reviewer_agent"
            },
            "PublisherAgent": {
                "status": "available",
                "capabilities": ["publishing", "distribution"],
                "endpoint": "AGENTS.publisher.publisher_agent"
            }
        }
    
    async def orchestrate_workflow(
        self,
        workflow_type: str,
        context: Dict[str, Any]
    ) -> str:
        """–û—Ä–∫–µ—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow"""
        workflow_id = str(uuid.uuid4())
        
        self.workflows[workflow_id] = {
            "type": workflow_type,
            "status": "IN_PROGRESS",
            "context": context,
            "started": datetime.now().isoformat(),
            "steps": [],
            "results": {}
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ workflow
        asyncio.create_task(self._execute_workflow(workflow_id, workflow_type, context))
        
        logger.info(f"Workflow started: {workflow_id} ({workflow_type})")
        return workflow_id
    
    async def _execute_workflow(
        self,
        workflow_id: str,
        workflow_type: str,
        context: Dict[str, Any]
    ):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç workflow"""
        try:
            if workflow_type == "full_document_pipeline":
                await self._full_document_pipeline(workflow_id, context)
            elif workflow_type == "research_and_compose":
                await self._research_and_compose(workflow_id, context)
            elif workflow_type == "validate_and_publish":
                await self._validate_and_publish(workflow_id, context)
            else:
                raise ValueError(f"Unknown workflow type: {workflow_type}")
            
            self.workflows[workflow_id]["status"] = "COMPLETED"
            self.workflows[workflow_id]["completed"] = datetime.now().isoformat()
            
        except Exception as e:
            self.workflows[workflow_id]["status"] = "FAILED"
            self.workflows[workflow_id]["error"] = str(e)
            logger.error(f"Workflow failed: {e}")
    
    async def _full_document_pipeline(
        self,
        workflow_id: str,
        context: Dict[str, Any]
    ):
        """–ü–æ–ª–Ω—ã–π –ø–∞–π–ø–ª–∞–π–Ω —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        workflow = self.workflows[workflow_id]
        
        # –®–∞–≥ 1: Research
        workflow["steps"].append("Research")
        research_result = await self._call_agent(
            "ResearchAgent",
            "research",
            {"query": context.get("topic", "Document topic")}
        )
        workflow["results"]["research"] = research_result
        
        # –®–∞–≥ 2: Compose
        workflow["steps"].append("Compose")
        compose_result = await self._call_agent(
            "ComposerAgent",
            "compose",
            {
                "template": context.get("template", "generic"),
                "data": research_result
            }
        )
        workflow["results"]["document"] = compose_result
        
        # –®–∞–≥ 3: Review
        workflow["steps"].append("Review")
        review_result = await self._call_agent(
            "ReviewerAgent",
            "validate",
            {"document": compose_result}
        )
        workflow["results"]["validation"] = review_result
        
        # –®–∞–≥ 4: Publish (–µ—Å–ª–∏ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞)
        if review_result.get("score", 0) > 70:
            workflow["steps"].append("Publish")
            publish_result = await self._call_agent(
                "PublisherAgent",
                "publish",
                {"document": compose_result}
            )
            workflow["results"]["publication"] = publish_result
        else:
            workflow["results"]["publication"] = "Not published due to low validation score"
    
    async def _research_and_compose(
        self,
        workflow_id: str,
        context: Dict[str, Any]
    ):
        """Workflow –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
        workflow = self.workflows[workflow_id]
        
        # Research
        research_result = await self._call_agent(
            "ResearchAgent",
            "research",
            {"query": context.get("query")}
        )
        workflow["results"]["research"] = research_result
        
        # Compose based on research
        compose_result = await self._call_agent(
            "ComposerAgent",
            "compose",
            {"data": research_result}
        )
        workflow["results"]["document"] = compose_result
    
    async def _validate_and_publish(
        self,
        workflow_id: str,
        context: Dict[str, Any]
    ):
        """Workflow –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        workflow = self.workflows[workflow_id]
        
        # Validate
        review_result = await self._call_agent(
            "ReviewerAgent",
            "validate",
            {"document": context.get("document")}
        )
        workflow["results"]["validation"] = review_result
        
        # Publish if valid
        if review_result.get("score", 0) > 70:
            publish_result = await self._call_agent(
                "PublisherAgent",
                "publish",
                {"document": context.get("document")}
            )
            workflow["results"]["publication"] = publish_result
    
    async def _call_agent(
        self,
        agent_name: str,
        method: str,
        params: Dict[str, Any]
    ) -> Dict[str, Any]:
        """–í—ã–∑—ã–≤–∞–µ—Ç –º–µ—Ç–æ–¥ –∞–≥–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ —Ä–µ–∞–ª—å–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã"""
        logger.info(f"Calling {agent_name}.{method} with params: {params}")
        
        try:
            # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π –∏–º–ø–æ—Ä—Ç –∞–≥–µ–Ω—Ç–æ–≤
            if agent_name == "ResearchAgent":
                from AGENTS.research.research_agent import ResearchAgent
                agent = ResearchAgent(gemini_api_key="AIzaSyBerqRh6LgbXMowDY-4IjwGTsN7R1SCsz4")
                if method == "research":
                    task_id = await agent.start_research(
                        query=params.get("query", ""),
                        max_results=params.get("max_results", 3)
                    )
                    await asyncio.sleep(2)
                    status = await agent.get_task_status(task_id)
                    return status.get("results", {})
                    
            elif agent_name == "ComposerAgent":
                from AGENTS.composer.composer_agent import ComposerAgent
                agent = ComposerAgent()
                if method == "compose":
                    task_id = await agent.compose_document(
                        template_name=params.get("template", "generic"),
                        data=params.get("data", {})
                    )
                    await asyncio.sleep(1)
                    status = agent.tasks.get(task_id, {})
                    return {"document": status.get("result", "")}
                    
            elif agent_name == "ReviewerAgent":
                from AGENTS.reviewer.reviewer_agent import ReviewerAgent
                agent = ReviewerAgent()
                if method == "validate":
                    # –°–Ω–∞—á–∞–ª–∞ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
                    doc_content = str(params.get("document", ""))
                    temp_doc = Path(f"/tmp/review_{uuid.uuid4()}.md")
                    temp_doc.write_text(doc_content)
                    
                    task_id = await agent.validate_document(str(temp_doc))
                    await asyncio.sleep(2)
                    status = await agent.get_task_status(task_id)
                    
                    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                    temp_doc.unlink()
                    
                    return status.get("results", {})
                    
            elif agent_name == "PublisherAgent":
                from AGENTS.publisher.publisher_agent import PublisherAgent
                agent = PublisherAgent()
                if method == "publish":
                    doc_content = str(params.get("document", ""))
                    temp_doc = Path(f"/tmp/publish_{uuid.uuid4()}.md")
                    temp_doc.write_text(doc_content)
                    
                    task_id = await agent.publish(
                        document_path=str(temp_doc),
                        channels=params.get("channels", ["local"])
                    )
                    await asyncio.sleep(1)
                    status = await agent.get_task_status(task_id)
                    
                    return status.get("results", {})
            
            # –ï—Å–ª–∏ –∞–≥–µ–Ω—Ç –∏–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω
            return {
                "error": f"Unknown agent or method: {agent_name}.{method}",
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"Error calling {agent_name}.{method}: {e}")
            return {
                "error": str(e),
                "agent": agent_name,
                "method": method,
                "timestamp": datetime.now().isoformat()
            }
    
    async def send_message(self, message: Message):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—á–µ—Ä–µ–¥—å"""
        await self.message_queue.put(message)
        logger.info(f"Message sent: {message.sender} -> {message.receiver}")
    
    async def process_messages(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –æ—á–µ—Ä–µ–¥–∏"""
        while True:
            try:
                message = await self.message_queue.get()
                await self._handle_message(message)
            except Exception as e:
                logger.error(f"Error processing message: {e}")
    
    async def _handle_message(self, message: Message):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        logger.info(f"Handling message: {message.type.value} from {message.sender}")
        
        # –õ–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if message.type == MessageType.REQUEST:
            # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω—É–∂–Ω–æ–º—É –∞–≥–µ–Ω—Ç—É
            pass
        elif message.type == MessageType.EVENT:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ
            pass
    
    async def get_workflow_status(self, workflow_id: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å workflow"""
        if workflow_id not in self.workflows:
            return {"error": "Workflow not found"}
        
        return self.workflows[workflow_id]
    
    async def get_agent_status(self, agent_name: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
        if agent_name not in self.agents_registry:
            return {"error": "Agent not found"}
        
        return self.agents_registry[agent_name]

if __name__ == "__main__":
    async def test_integrator():
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º IntegratorAgent"""
        agent = IntegratorAgent()
        
        print("üîó –¢–ï–°–¢–ò–†–£–ï–ú INTEGRATORAGENT\n")
        
        # –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π pipeline
        print("üìã –¢–µ—Å—Ç 1: –ü–æ–ª–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç–Ω—ã–π pipeline")
        
        workflow_id = await agent.orchestrate_workflow(
            workflow_type="full_document_pipeline",
            context={
                "topic": "Multi-Agent Systems Architecture",
                "template": "architecture"
            }
        )
        
        # –ñ–¥—ë–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        await asyncio.sleep(3)
        
        status = await agent.get_workflow_status(workflow_id)
        print(f"–°—Ç–∞—Ç—É—Å: {status['status']}")
        print(f"–®–∞–≥–∏: {status.get('steps', [])}")
        
        # –¢–µ—Å—Ç 2: Research and Compose
        print("\nüìã –¢–µ—Å—Ç 2: Research and Compose workflow")
        
        workflow_id2 = await agent.orchestrate_workflow(
            workflow_type="research_and_compose",
            context={
                "query": "Best practices for API design"
            }
        )
        
        await asyncio.sleep(2)
        
        status2 = await agent.get_workflow_status(workflow_id2)
        print(f"–°—Ç–∞—Ç—É—Å: {status2['status']}")
        
        print("\n‚úÖ IntegratorAgent —Ä–∞–±–æ—Ç–∞–µ—Ç\!")
    
    asyncio.run(test_integrator())