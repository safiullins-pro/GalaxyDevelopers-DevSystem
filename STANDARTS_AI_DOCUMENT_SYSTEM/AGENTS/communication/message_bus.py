#!/usr/bin/env python3
"""
MessageBus - –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
–û–ë–ï–°–ü–ï–ß–ò–í–ê–ï–¢: –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏—é, –æ—á–µ—Ä–µ–¥–∏, –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å
–ê–≤—Ç–æ—Ä: GALAXYDEVELOPMENT
"""

import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, List, Optional, Any, Callable
from pathlib import Path
import redis
from dataclasses import dataclass, asdict
from enum import Enum

class MessageType(Enum):
    """–¢–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–∏—Å—Ç–µ–º–µ"""
    COMMAND = "command"          # –ö–æ–º–∞–Ω–¥–∞ –∞–≥–µ–Ω—Ç—É
    EVENT = "event"              # –°–æ–±—ã—Ç–∏–µ —Å–∏—Å—Ç–µ–º—ã
    RESULT = "result"            # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    ERROR = "error"              # –û—à–∏–±–∫–∞
    HEARTBEAT = "heartbeat"      # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    NOTIFICATION = "notification" # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    METRICS = "metrics"          # –ú–µ—Ç—Ä–∏–∫–∏
    AUDIT = "audit"              # –ê—É–¥–∏—Ç –¥–µ–π—Å—Ç–≤–∏–π

class MessagePriority(Enum):
    """–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    CRITICAL = 1  # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π
    HIGH = 2      # –í—ã—Å–æ–∫–∏–π
    NORMAL = 3    # –û–±—ã—á–Ω—ã–π
    LOW = 4       # –ù–∏–∑–∫–∏–π

@dataclass
class Message:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    id: str
    type: MessageType
    sender: str
    recipient: str  # –∏–ª–∏ "broadcast" –¥–ª—è –≤—Å–µ—Ö
    payload: Dict[str, Any]
    timestamp: str
    priority: MessagePriority = MessagePriority.NORMAL
    correlation_id: Optional[str] = None  # –î–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç
    ttl: Optional[int] = None  # Time to live –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    
    def to_json(self) -> str:
        """–°–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤ JSON"""
        data = asdict(self)
        data['type'] = self.type.value
        data['priority'] = self.priority.value
        return json.dumps(data, ensure_ascii=False)
    
    @classmethod
    def from_json(cls, json_str: str) -> 'Message':
        """–î–µ—Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–∑ JSON"""
        data = json.loads(json_str)
        data['type'] = MessageType(data['type'])
        data['priority'] = MessagePriority(data['priority'])
        return cls(**data)

class MessageBus:
    """–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —à–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self, redis_host='localhost', redis_port=6379, redis_db=0):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —à–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.redis_client = redis.Redis(
            host=redis_host,
            port=redis_port,
            db=redis_db,
            decode_responses=True
        )
        self.pubsub = self.redis_client.pubsub()
        self.subscribers: Dict[str, List[Callable]] = {}
        self.running = False
        self.listener_task = None
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–µ—Ä—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ—Å—Ç–∏
        self.base_dir = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem")
        self.events_dir = self.base_dir / "08_EVENTS"
        self.audit_dir = self.base_dir / "09_AUDIT"
        self.events_dir.mkdir(exist_ok=True)
        self.audit_dir.mkdir(exist_ok=True)
        
        print("üöå MessageBus initialized with Redis")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ —à–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if not self.running:
            self.running = True
            self.listener_task = asyncio.create_task(self._listen_messages())
            print("‚úÖ MessageBus started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if self.running:
            self.running = False
            if self.listener_task:
                self.listener_task.cancel()
            print("üõë MessageBus stopped")
    
    async def publish(self, message: Message):
        """–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º ID –µ—Å–ª–∏ –Ω–µ—Ç
            if not message.id:
                message.id = str(uuid.uuid4())
            
            # –î–æ–±–∞–≤–ª—è–µ–º timestamp
            if not message.timestamp:
                message.timestamp = datetime.now().isoformat()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Redis
            channel = f"agent:{message.recipient}" if message.recipient != "broadcast" else "broadcast"
            
            # –ü—É–±–ª–∏–∫—É–µ–º –≤ –∫–∞–Ω–∞–ª
            self.redis_client.publish(channel, message.to_json())
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É
            queue_key = f"queue:{message.recipient}:{message.priority.value}"
            self.redis_client.lpush(queue_key, message.to_json())
            
            # TTL –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω
            if message.ttl:
                self.redis_client.expire(queue_key, message.ttl)
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            await self._log_event(message)
            
            # –ê—É–¥–∏—Ç –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            if message.type == MessageType.AUDIT or message.priority == MessagePriority.CRITICAL:
                await self._audit_message(message)
            
            print(f"üì§ Published: {message.type.value} from {message.sender} to {message.recipient}")
            
        except Exception as e:
            print(f"‚ùå Error publishing message: {e}")
            raise
    
    async def subscribe(self, agent_id: str, handler: Callable):
        """–ü–æ–¥–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        channel = f"agent:{agent_id}"
        
        if channel not in self.subscribers:
            self.subscribers[channel] = []
            self.pubsub.subscribe(channel, "broadcast")
        
        self.subscribers[channel].append(handler)
        print(f"üì• {agent_id} subscribed to messages")
    
    async def unsubscribe(self, agent_id: str, handler: Callable):
        """–û—Ç–ø–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –æ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"""
        channel = f"agent:{agent_id}"
        
        if channel in self.subscribers:
            if handler in self.subscribers[channel]:
                self.subscribers[channel].remove(handler)
            
            if not self.subscribers[channel]:
                del self.subscribers[channel]
                self.pubsub.unsubscribe(channel)
        
        print(f"üì§ {agent_id} unsubscribed from messages")
    
    async def get_pending_messages(self, agent_id: str, priority: Optional[MessagePriority] = None) -> List[Message]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞"""
        messages = []
        
        if priority:
            # –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
            queue_key = f"queue:{agent_id}:{priority.value}"
            raw_messages = self.redis_client.lrange(queue_key, 0, -1)
        else:
            # –í—Å–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã (–æ—Ç –≤—ã—Å–æ–∫–æ–≥–æ –∫ –Ω–∏–∑–∫–æ–º—É)
            for p in MessagePriority:
                queue_key = f"queue:{agent_id}:{p.value}"
                raw_messages = self.redis_client.lrange(queue_key, 0, -1)
                
                for raw_msg in raw_messages:
                    messages.append(Message.from_json(raw_msg))
                
                # –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è
                self.redis_client.delete(queue_key)
        
        return messages
    
    async def _listen_messages(self):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            while self.running:
                message = self.pubsub.get_message(timeout=1.0)
                
                if message and message['type'] == 'message':
                    channel = message['channel']
                    data = message['data']
                    
                    # –ü–∞—Ä—Å–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    msg = Message.from_json(data)
                    
                    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
                    if channel in self.subscribers:
                        for handler in self.subscribers[channel]:
                            try:
                                await handler(msg)
                            except Exception as e:
                                print(f"‚ùå Handler error: {e}")
                
                await asyncio.sleep(0.01)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞
                
        except asyncio.CancelledError:
            pass
        except Exception as e:
            print(f"‚ùå Listener error: {e}")
    
    async def _log_event(self, message: Message):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"""
        event_file = self.events_dir / f"events_{datetime.now().strftime('%Y%m%d')}.jsonl"
        
        event = {
            "timestamp": message.timestamp,
            "message_id": message.id,
            "type": message.type.value,
            "sender": message.sender,
            "recipient": message.recipient,
            "priority": message.priority.value,
            "correlation_id": message.correlation_id
        }
        
        with open(event_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(event, ensure_ascii=False) + '\n')
    
    async def _audit_message(self, message: Message):
        """–ê—É–¥–∏—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        audit_file = self.audit_dir / f"audit_{datetime.now().strftime('%Y%m%d')}.jsonl"
        
        audit_record = {
            "timestamp": message.timestamp,
            "message_id": message.id,
            "type": message.type.value,
            "sender": message.sender,
            "recipient": message.recipient,
            "priority": message.priority.value,
            "payload": message.payload,
            "correlation_id": message.correlation_id
        }
        
        with open(audit_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(audit_record, ensure_ascii=False) + '\n')
    
    async def broadcast(self, sender: str, message_type: MessageType, payload: Dict[str, Any]):
        """–®–∏—Ä–æ–∫–æ–≤–µ—â–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º"""
        message = Message(
            id=str(uuid.uuid4()),
            type=message_type,
            sender=sender,
            recipient="broadcast",
            payload=payload,
            timestamp=datetime.now().isoformat(),
            priority=MessagePriority.NORMAL
        )
        
        await self.publish(message)
    
    async def send_command(self, sender: str, recipient: str, command: str, params: Dict[str, Any], priority: MessagePriority = MessagePriority.NORMAL) -> str:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∞–≥–µ–Ω—Ç—É"""
        correlation_id = str(uuid.uuid4())
        
        message = Message(
            id=str(uuid.uuid4()),
            type=MessageType.COMMAND,
            sender=sender,
            recipient=recipient,
            payload={
                "command": command,
                "params": params
            },
            timestamp=datetime.now().isoformat(),
            priority=priority,
            correlation_id=correlation_id
        )
        
        await self.publish(message)
        return correlation_id
    
    async def send_result(self, sender: str, recipient: str, correlation_id: str, result: Any, success: bool = True):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        message = Message(
            id=str(uuid.uuid4()),
            type=MessageType.RESULT if success else MessageType.ERROR,
            sender=sender,
            recipient=recipient,
            payload={
                "result": result,
                "success": success
            },
            timestamp=datetime.now().isoformat(),
            priority=MessagePriority.NORMAL,
            correlation_id=correlation_id
        )
        
        await self.publish(message)
    
    def get_metrics(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ —à–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
        metrics = {
            "timestamp": datetime.now().isoformat(),
            "subscribers": len(self.subscribers),
            "channels": list(self.subscribers.keys()),
            "redis_info": self.redis_client.info()
        }
        
        # –†–∞–∑–º–µ—Ä—ã –æ—á–µ—Ä–µ–¥–µ–π
        queue_sizes = {}
        for key in self.redis_client.keys("queue:*"):
            queue_sizes[key] = self.redis_client.llen(key)
        
        metrics["queue_sizes"] = queue_sizes
        
        return metrics


# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
async def test_message_bus():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —à–∏–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    # –°–æ–∑–¥–∞–µ–º —à–∏–Ω—É
    bus = MessageBus()
    await bus.start()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–≥–µ–Ω—Ç–∞
    async def agent_handler(message: Message):
        print(f"üì® Agent received: {message.type.value} - {message.payload}")
    
    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è
    await bus.subscribe("TestAgent", agent_handler)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    correlation_id = await bus.send_command(
        sender="Orchestrator",
        recipient="TestAgent",
        command="process_document",
        params={"document_id": "DOC_001"},
        priority=MessagePriority.HIGH
    )
    
    # Broadcast —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bus.broadcast(
        sender="System",
        message_type=MessageType.NOTIFICATION,
        payload={"message": "System maintenance in 5 minutes"}
    )
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await asyncio.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏
    metrics = bus.get_metrics()
    print(f"üìä Metrics: {metrics}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await bus.stop()


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
    asyncio.run(test_message_bus())