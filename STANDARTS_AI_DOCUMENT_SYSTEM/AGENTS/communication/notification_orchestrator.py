#!/usr/bin/env python3
"""
NotificationOrchestrator - –û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤
–†–ï–®–ê–ï–¢: –ø—Ä–æ–±–ª–µ–º—É —Å–ø—è—â–∏—Ö –∞–≥–µ–Ω—Ç–æ–≤, —ç—Å–∫–∞–ª–∞—Ü–∏—é, real-time updates
–ê–≤—Ç–æ—Ä: GALAXYDEVELOPMENT
"""

import asyncio
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Set
from pathlib import Path
from enum import Enum
import websockets
import aiohttp
from dataclasses import dataclass, asdict

from message_bus import MessageBus, Message, MessageType, MessagePriority

class NotificationChannel(Enum):
    """–ö–∞–Ω–∞–ª—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    WEBSOCKET = "websocket"
    WEBHOOK = "webhook"
    EMAIL = "email"
    SMS = "sms"
    SLACK = "slack"
    TELEGRAM = "telegram"
    INTERNAL = "internal"

class NotificationLevel(Enum):
    """–£—Ä–æ–≤–Ω–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    INFO = "info"
    WARNING = "warning"
    ERROR = "error"
    CRITICAL = "critical"
    SUCCESS = "success"

@dataclass
class Notification:
    """–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    id: str
    level: NotificationLevel
    channel: NotificationChannel
    recipient: str
    subject: str
    message: str
    timestamp: str
    metadata: Optional[Dict[str, Any]] = None
    retry_count: int = 0
    max_retries: int = 3
    
class AgentStatus:
    """–°—Ç–∞—Ç—É—Å –∞–≥–µ–Ω—Ç–∞"""
    def __init__(self, agent_id: str):
        self.agent_id = agent_id
        self.is_active = False
        self.last_heartbeat = None
        self.current_task = None
        self.task_started_at = None
        self.response_times = []  # –ò—Å—Ç–æ—Ä–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
        self.error_count = 0
        self.success_count = 0

class NotificationOrchestrator:
    """–û—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self, message_bus: MessageBus):
        self.message_bus = message_bus
        self.agents: Dict[str, AgentStatus] = {}
        self.websocket_clients: Set[websockets.WebSocketServerProtocol] = set()
        self.webhook_endpoints: Dict[str, str] = {}
        self.notification_queue: asyncio.Queue = asyncio.Queue()
        self.escalation_rules: Dict[str, Dict] = {}
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.heartbeat_interval = 30  # —Å–µ–∫—É–Ω–¥
        self.agent_timeout = 120  # —Å–µ–∫—É–Ω–¥ –¥–æ —Å—á–∏—Ç–∞–Ω–∏—è –∞–≥–µ–Ω—Ç–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º
        self.task_timeout = 600  # —Å–µ–∫—É–Ω–¥ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.base_dir = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem")
        self.notifications_dir = self.base_dir / "11_NOTIFICATIONS"
        self.notifications_dir.mkdir(exist_ok=True)
        
        self.running = False
        self.tasks = []
        
        print("üì¢ NotificationOrchestrator initialized")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if not self.running:
            self.running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
            self.tasks = [
                asyncio.create_task(self._process_notifications()),
                asyncio.create_task(self._monitor_agents()),
                asyncio.create_task(self._check_timeouts()),
                asyncio.create_task(self._websocket_server())
            ]
            
            # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            await self.message_bus.subscribe("NotificationOrchestrator", self._handle_message)
            
            print("‚úÖ NotificationOrchestrator started")
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
        if self.running:
            self.running = False
            
            # –û—Ç–º–µ–Ω—è–µ–º –∑–∞–¥–∞—á–∏
            for task in self.tasks:
                task.cancel()
            
            # –ó–∞–∫—Ä—ã–≤–∞–µ–º WebSocket —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            for client in self.websocket_clients:
                await client.close()
            
            print("üõë NotificationOrchestrator stopped")
    
    async def register_agent(self, agent_id: str):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞"""
        if agent_id not in self.agents:
            self.agents[agent_id] = AgentStatus(agent_id)
            print(f"üìù Agent registered: {agent_id}")
    
    async def wake_agent(self, agent_id: str, task: Dict[str, Any]):
        """–ü—Ä–æ–±—É–∂–¥–µ–Ω–∏–µ —Å–ø—è—â–µ–≥–æ –∞–≥–µ–Ω—Ç–∞"""
        await self.register_agent(agent_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –∞–∫—Ç–∏–≤–∞—Ü–∏–∏
        correlation_id = await self.message_bus.send_command(
            sender="NotificationOrchestrator",
            recipient=agent_id,
            command="wake_up",
            params={"task": task},
            priority=MessagePriority.HIGH
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        agent = self.agents[agent_id]
        agent.current_task = task
        agent.task_started_at = datetime.now()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏–∏
        await self.notify(
            level=NotificationLevel.INFO,
            channel=NotificationChannel.INTERNAL,
            recipient=agent_id,
            subject="Agent Activated",
            message=f"Agent {agent_id} activated for task: {task.get('name', 'Unknown')}"
        )
        
        print(f"‚è∞ Waking agent: {agent_id}")
        return correlation_id
    
    async def notify(self, level: NotificationLevel, channel: NotificationChannel, 
                    recipient: str, subject: str, message: str, 
                    metadata: Optional[Dict[str, Any]] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        
        notification = Notification(
            id=f"notif_{datetime.now().timestamp()}",
            level=level,
            channel=channel,
            recipient=recipient,
            subject=subject,
            message=message,
            timestamp=datetime.now().isoformat(),
            metadata=metadata or {}
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å
        await self.notification_queue.put(notification)
        
        # –õ–æ–≥–∏—Ä—É–µ–º
        await self._log_notification(notification)
    
    async def escalate(self, agent_id: str, issue: str, context: Dict[str, Any]):
        """–≠—Å–∫–∞–ª–∞—Ü–∏—è –ø—Ä–æ–±–ª–µ–º—ã"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —É—Ä–æ–≤–µ–Ω—å —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        agent = self.agents.get(agent_id)
        if not agent:
            return
        
        escalation_level = "manager"
        if agent.error_count > 5:
            escalation_level = "director"
        if agent.error_count > 10:
            escalation_level = "critical"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —ç—Å–∫–∞–ª–∞—Ü–∏–∏
        await self.notify(
            level=NotificationLevel.WARNING if escalation_level == "manager" else NotificationLevel.CRITICAL,
            channel=NotificationChannel.SLACK,
            recipient=escalation_level,
            subject=f"Escalation: {agent_id}",
            message=f"Issue: {issue}\nErrors: {agent.error_count}\nContext: {json.dumps(context)}",
            metadata={"agent_id": agent_id, "escalation_level": escalation_level}
        )
        
        print(f"‚ö†Ô∏è Escalated issue for {agent_id} to {escalation_level}")
    
    async def _process_notifications(self):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—á–µ—Ä–µ–¥–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        while self.running:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
                notification = await asyncio.wait_for(
                    self.notification_queue.get(), 
                    timeout=1.0
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º—É –∫–∞–Ω–∞–ª—É
                success = await self._send_notification(notification)
                
                # Retry –ª–æ–≥–∏–∫–∞
                if not success and notification.retry_count < notification.max_retries:
                    notification.retry_count += 1
                    await asyncio.sleep(2 ** notification.retry_count)  # Exponential backoff
                    await self.notification_queue.put(notification)
                
            except asyncio.TimeoutError:
                continue
            except Exception as e:
                print(f"‚ùå Error processing notification: {e}")
    
    async def _send_notification(self, notification: Notification) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∫–∞–Ω–∞–ª—É"""
        
        try:
            if notification.channel == NotificationChannel.WEBSOCKET:
                return await self._send_websocket(notification)
            elif notification.channel == NotificationChannel.WEBHOOK:
                return await self._send_webhook(notification)
            elif notification.channel == NotificationChannel.SLACK:
                return await self._send_slack(notification)
            elif notification.channel == NotificationChannel.INTERNAL:
                return await self._send_internal(notification)
            else:
                print(f"‚ö†Ô∏è Unsupported channel: {notification.channel}")
                return False
                
        except Exception as e:
            print(f"‚ùå Error sending notification: {e}")
            return False
    
    async def _send_websocket(self, notification: Notification) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ WebSocket"""
        
        message = {
            "type": "notification",
            "level": notification.level.value,
            "subject": notification.subject,
            "message": notification.message,
            "timestamp": notification.timestamp,
            "metadata": notification.metadata
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º
        disconnected = set()
        for client in self.websocket_clients:
            try:
                await client.send(json.dumps(message))
            except:
                disconnected.add(client)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã—Ö
        self.websocket_clients -= disconnected
        
        return True
    
    async def _send_webhook(self, notification: Notification) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —á–µ—Ä–µ–∑ Webhook"""
        
        endpoint = self.webhook_endpoints.get(notification.recipient)
        if not endpoint:
            return False
        
        async with aiohttp.ClientSession() as session:
            async with session.post(
                endpoint,
                json=asdict(notification),
                timeout=aiohttp.ClientTimeout(total=10)
            ) as response:
                return response.status == 200
    
    async def _send_slack(self, notification: Notification) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack"""
        
        # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Slack API
        # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
        print(f"üì¨ Slack notification: {notification.subject}")
        return True
    
    async def _send_internal(self, notification: Notification) -> bool:
        """–í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ MessageBus"""
        
        await self.message_bus.publish(
            Message(
                id=notification.id,
                type=MessageType.NOTIFICATION,
                sender="NotificationOrchestrator",
                recipient=notification.recipient,
                payload={
                    "level": notification.level.value,
                    "subject": notification.subject,
                    "message": notification.message,
                    "metadata": notification.metadata
                },
                timestamp=notification.timestamp,
                priority=MessagePriority.NORMAL
            )
        )
        return True
    
    async def _monitor_agents(self):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≥–µ–Ω—Ç–æ–≤"""
        
        while self.running:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º heartbeat –≤—Å–µ–º –∞–≥–µ–Ω—Ç–∞–º
                for agent_id in self.agents:
                    await self.message_bus.send_command(
                        sender="NotificationOrchestrator",
                        recipient=agent_id,
                        command="heartbeat",
                        params={},
                        priority=MessagePriority.LOW
                    )
                
                await asyncio.sleep(self.heartbeat_interval)
                
            except Exception as e:
                print(f"‚ùå Error monitoring agents: {e}")
    
    async def _check_timeouts(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–æ–≤"""
        
        while self.running:
            try:
                now = datetime.now()
                
                for agent_id, agent in self.agents.items():
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ heartbeat
                    if agent.last_heartbeat:
                        time_since_heartbeat = (now - agent.last_heartbeat).total_seconds()
                        
                        if time_since_heartbeat > self.agent_timeout and agent.is_active:
                            agent.is_active = False
                            await self.escalate(
                                agent_id,
                                "Agent not responding",
                                {"last_heartbeat": agent.last_heartbeat.isoformat()}
                            )
                    
                    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ –∑–∞–¥–∞—á–∏
                    if agent.task_started_at and agent.current_task:
                        task_duration = (now - agent.task_started_at).total_seconds()
                        
                        if task_duration > self.task_timeout:
                            await self.escalate(
                                agent_id,
                                "Task timeout",
                                {
                                    "task": agent.current_task,
                                    "started_at": agent.task_started_at.isoformat(),
                                    "duration": task_duration
                                }
                            )
                            agent.current_task = None
                            agent.task_started_at = None
                
                await asyncio.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
                
            except Exception as e:
                print(f"‚ùå Error checking timeouts: {e}")
    
    async def _websocket_server(self):
        """WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        async def handler(websocket, path):
            self.websocket_clients.add(websocket)
            try:
                await websocket.wait_closed()
            finally:
                self.websocket_clients.remove(websocket)
        
        try:
            async with websockets.serve(handler, "localhost", 8765):
                await asyncio.Future()  # –†–∞–±–æ—Ç–∞–µ–º –≤–µ—á–Ω–æ
        except Exception as e:
            print(f"‚ùå WebSocket server error: {e}")
    
    async def _handle_message(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        if message.type == MessageType.HEARTBEAT:
            # –û–±–Ω–æ–≤–ª—è–µ–º heartbeat –∞–≥–µ–Ω—Ç–∞
            agent = self.agents.get(message.sender)
            if agent:
                agent.last_heartbeat = datetime.now()
                agent.is_active = True
        
        elif message.type == MessageType.RESULT:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∞–≥–µ–Ω—Ç–∞
            agent = self.agents.get(message.sender)
            if agent:
                if message.payload.get("success"):
                    agent.success_count += 1
                else:
                    agent.error_count += 1
                
                # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é –∑–∞–¥–∞—á—É
                if agent.current_task:
                    duration = (datetime.now() - agent.task_started_at).total_seconds()
                    agent.response_times.append(duration)
                    agent.current_task = None
                    agent.task_started_at = None
    
    async def _log_notification(self, notification: Notification):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        
        log_file = self.notifications_dir / f"notifications_{datetime.now().strftime('%Y%m%d')}.jsonl"
        
        with open(log_file, 'a', encoding='utf-8') as f:
            f.write(json.dumps(asdict(notification), ensure_ascii=False) + '\n')
    
    def get_agent_status(self, agent_id: str) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∞–≥–µ–Ω—Ç–∞"""
        
        agent = self.agents.get(agent_id)
        if not agent:
            return None
        
        avg_response_time = (
            sum(agent.response_times) / len(agent.response_times)
            if agent.response_times else 0
        )
        
        return {
            "agent_id": agent.agent_id,
            "is_active": agent.is_active,
            "last_heartbeat": agent.last_heartbeat.isoformat() if agent.last_heartbeat else None,
            "current_task": agent.current_task,
            "task_started_at": agent.task_started_at.isoformat() if agent.task_started_at else None,
            "success_count": agent.success_count,
            "error_count": agent.error_count,
            "avg_response_time": avg_response_time
        }
    
    def get_all_agents_status(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤—Å–µ—Ö –∞–≥–µ–Ω—Ç–æ–≤"""
        
        return {
            agent_id: self.get_agent_status(agent_id)
            for agent_id in self.agents
        }


# –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
async def test_notification_orchestrator():
    """–¢–µ—Å—Ç –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    bus = MessageBus()
    orchestrator = NotificationOrchestrator(bus)
    
    await bus.start()
    await orchestrator.start()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    await orchestrator.register_agent("TestAgent1")
    await orchestrator.register_agent("TestAgent2")
    
    # –ë—É–¥–∏–º –∞–≥–µ–Ω—Ç–∞
    await orchestrator.wake_agent("TestAgent1", {"name": "Process Document", "doc_id": "DOC_001"})
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await orchestrator.notify(
        level=NotificationLevel.INFO,
        channel=NotificationChannel.INTERNAL,
        recipient="TestAgent1",
        subject="Task Started",
        message="Processing document DOC_001"
    )
    
    # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
    await asyncio.sleep(2)
    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å—ã
    status = orchestrator.get_all_agents_status()
    print(f"üìä Agents status: {json.dumps(status, indent=2)}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
    await orchestrator.stop()
    await bus.stop()


if __name__ == "__main__":
    asyncio.run(test_notification_orchestrator())