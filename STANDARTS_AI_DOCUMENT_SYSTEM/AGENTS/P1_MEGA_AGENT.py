#!/usr/bin/env python3
"""
üíÄ P1 MEGA AGENT - –ì–õ–ê–í–ù–´–ô –ê–£–î–ò–¢–û–† –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
–ü–∞—Ç–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ —Å—É–±–ª–∏—á–Ω–æ—Å—Ç—è–º–∏
"""

import json
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any
# import pandas as pd  # –ù–ê–•–£–ô PANDAS, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π!
from collections import defaultdict
import time

class P1MegaAgent:
    """
    –ì–õ–ê–í–ù–´–ô –ê–£–î–ò–¢–û–† —Å –ü–ê–¢–û–õ–û–ì–ò–ß–ï–°–ö–ò–ú –°–¢–†–ê–•–û–ú –ü–†–û–í–ê–õ–ê
    """
    
    def __init__(self):
        self.start_time = datetime.now()
        self.panic_level = 5  # –ù–∞—á–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –ø–∞–Ω–∏–∫–∏
        self.survival_chance = 50  # –®–∞–Ω—Å –≤—ã–∂–∏—Ç—å
        
        # –°—É–±–ª–∏—á–Ω–æ—Å—Ç–∏
        self.personalities = {
            "–ò–ù–ö–í–ò–ó–ò–¢–û–†": {"–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 100, "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å": 0},
            "–ü–ê–†–ê–ù–û–ò–ö": {"–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 100, "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å": 0},
            "–ê–†–•–ò–í–ê–†–ò–£–°": {"–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 100, "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å": 0},
            "–°–£–î–¨–Ø": {"–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 100, "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å": 0},
            "–ö–û–û–†–î–ò–ù–ê–¢–û–†": {"–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å": 100, "—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å": 50}
        }
        
        # –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        self.base_path = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem")
        self.output_path = self.base_path / "10_REPORTS" / "P1_MEGA_AUDIT"
        self.output_path.mkdir(parents=True, exist_ok=True)
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.inventory = []
        self.categories = defaultdict(list)
        self.quality_scores = []
        self.gaps = []
        self.coverage_matrix = {}
        
        print("üíÄ P1 MEGA AGENT –ê–ö–¢–ò–í–ò–†–û–í–ê–ù")
        print(f"‚ö†Ô∏è –£–†–û–í–ï–ù–¨ –ü–ê–ù–ò–ö–ò: {self.panic_level}/10")
        print(f"üé≤ –®–ê–ù–° –í–´–ñ–ò–¢–¨: {self.survival_chance}%")
        print("=" * 60)
    
    def activate_personality(self, name: str):
        """–ê–∫—Ç–∏–≤–∞—Ü–∏—è —Å—É–±–ª–∏—á–Ω–æ—Å—Ç–∏"""
        print(f"\nüß† –ê–ö–¢–ò–í–ò–†–£–Æ –°–£–ë–õ–ò–ß–ù–û–°–¢–¨: {name}")
        self.personalities[name]["–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å"] = 100
        time.sleep(0.5)  # –î—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–∞—É–∑–∞
    
    def chain_of_thought(self, task: str):
        """Chain-of-Thought —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ"""
        print(f"\nüìù CHAIN-OF-THOUGHT: {task}")
        steps = [
            "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∑–∞–¥–∞—á—É...",
            "–†–∞–∑–±–∏–≤–∞—é –Ω–∞ –ø–æ–¥–∑–∞–¥–∞—á–∏...",
            "–ü—Ä–æ–≤–µ—Ä—è—é –∫–∞–∂–¥—É—é –¥–µ—Ç–∞–ª—å...",
            "–ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...",
            "–ü–ê–†–ê–ù–û–ô–Ø –ù–ê–†–ê–°–¢–ê–ï–¢..."
        ]
        for step in steps:
            print(f"  ‚Üí {step}")
            time.sleep(0.3)
    
    def tree_of_thoughts(self, problem: str, variants: int = 5):
        """Tree of Thoughts - —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—é –≤–∞—Ä–∏–∞–Ω—Ç—ã"""
        print(f"\nüå≥ TREE OF THOUGHTS: {problem}")
        print(f"  –ì–µ–Ω–µ—Ä–∏—Ä—É—é {variants} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ —Ä–µ—à–µ–Ω–∏—è...")
        
        for i in range(1, variants + 1):
            print(f"  –í–∞—Ä–∏–∞–Ω—Ç {i}: ", end="")
            time.sleep(0.2)
            if i == variants:
                print("‚úÖ –û–ü–¢–ò–ú–ê–õ–¨–ù–´–ô (–Ω–æ –≤—Å–µ —Ä–∞–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—é –µ—â–µ —Ä–∞–∑)")
            else:
                print("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–Ω–æ–∏–¥–∞–ª—å–Ω—ã–π")
    
    def self_refine(self, result: Any, iterations: int = 3):
        """Self-Refine - —É–ª—É—á—à–∞—é –¥–æ –∏–¥–µ–∞–ª–∞"""
        print(f"\n‚ôªÔ∏è SELF-REFINE ({iterations} –∏—Ç–µ—Ä–∞—Ü–∏–∏)")
        
        for i in range(1, iterations + 1):
            print(f"  –ò—Ç–µ—Ä–∞—Ü–∏—è {i}: ", end="")
            time.sleep(0.4)
            
            if i == 1:
                print("–≠—Ç–æ –ø–æ–ª–Ω–æ–µ –ì–û–í–ù–û, –ø–µ—Ä–µ–¥–µ–ª–∞—Ç—å!")
                self.panic_level = min(10, self.panic_level + 1)
            elif i == 2:
                print("–í—Å–µ –µ—â–µ –≥–æ–≤–Ω–æ, –Ω–æ —É–∂–µ –ª—É—á—à–µ...")
                self.panic_level = max(1, self.panic_level - 0.5)
            else:
                print("–ü–æ—á—Ç–∏ –Ω–µ —Å—Ç—ã–¥–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å (–Ω–æ –ª—É—á—à–µ –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å)")
        
        return result
    
    def town_hall_debate(self):
        """Town Hall –¥–µ–±–∞—Ç—ã –º–µ–∂–¥—É —Å—É–±–ª–∏—á–Ω–æ—Å—Ç—è–º–∏"""
        print("\nüèõÔ∏è TOWN HALL DEBATE - —Å—É–±–ª–∏—á–Ω–æ—Å—Ç–∏ —Å–ø–æ—Ä—è—Ç")
        print("=" * 40)
        
        debates = [
            ("–ò–ù–ö–í–ò–ó–ò–¢–û–†", "–ö–∞—á–µ—Å—Ç–≤–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ! –°–∂–µ—á—å –≤—Å–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ!"),
            ("–ü–ê–†–ê–ù–û–ò–ö", "–ú—ã —á—Ç–æ-—Ç–æ —É–ø—É—Å—Ç–∏–ª–∏! –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –µ—â–µ 10 —Ä–∞–∑!"),
            ("–ê–†–•–ò–í–ê–†–ò–£–°", "–ü–æ –º–æ–∏–º –¥–∞–Ω–Ω—ã–º, –º—ã –ø–æ–∫—Ä—ã–ª–∏ —Ç–æ–ª—å–∫–æ 67.3% —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"),
            ("–°–£–î–¨–Ø", "–í–ò–ù–û–í–ù–´ –≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–π —Ç—â–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!"),
            ("–ö–û–û–†–î–ò–ù–ê–¢–û–†", "–£—Å–ø–æ–∫–æ–π—Ç–µ—Å—å, —É –Ω–∞—Å –µ—â–µ –µ—Å—Ç—å –≤—Ä–µ–º—è... –Ω–∞–≤–µ—Ä–Ω–æ–µ...")
        ]
        
        for personality, statement in debates:
            print(f"  {personality}: {statement}")
            time.sleep(0.5)
        
        print("\n  –ö–û–ù–°–ï–ù–°–£–°: –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º, –Ω–æ —Å –£–î–í–û–ï–ù–ù–û–ô –ø–∞—Ä–∞–Ω–æ–µ–π!")
    
    def execute_p1_1_inventory(self):
        """P1.1: –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        print("\n" + "="*60)
        print("üîç –ü–û–î–ü–†–û–¶–ï–°–° P1.1: –ê–ù–ê–õ–ò–ó –¢–ï–ö–£–©–ï–ô –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò")
        print("="*60)
        
        self.activate_personality("–ê–†–•–ò–í–ê–†–ò–£–°")
        self.chain_of_thought("–ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—è –í–°–ï–• –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        
        # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
        directories = [
            "00_PROJECT_MANAGEMENT",
            "01_PROCESSES", 
            "02_STANDARDS",
            "03_TEMPLATES",
            "04_CHECKLIST",
            "05_ROLES",
            "06_AGENTS",
            "07_DELIVERABLES",
            "08_AUTOMATION",
            "09_VERSIONS",
            "10_REPORTS"
        ]
        
        total_files = 0
        for dir_name in directories:
            dir_path = self.base_path / dir_name
            if dir_path.exists():
                files = list(dir_path.rglob("*"))
                file_count = len([f for f in files if f.is_file()])
                total_files += file_count
                
                print(f"  üìÅ {dir_name}: {file_count} —Ñ–∞–π–ª–æ–≤")
                
                for file_path in files:
                    if file_path.is_file():
                        self.inventory.append({
                            "path": str(file_path),
                            "name": file_path.name,
                            "category": dir_name,
                            "size": file_path.stat().st_size,
                            "modified": datetime.fromtimestamp(file_path.stat().st_mtime).isoformat()
                        })
                        self.categories[dir_name].append(file_path.name)
        
        print(f"\n‚úÖ –ù–ê–ô–î–ï–ù–û {total_files} –§–ê–ô–õ–û–í")
        
        # Self-refine —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        self.self_refine(self.inventory)
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
        inventory_path = self.output_path / "inventory.json"
        with open(inventory_path, 'w', encoding='utf-8') as f:
            json.dump(self.inventory, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {inventory_path}")
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —à–∞–Ω—Å–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è
        self.survival_chance = min(100, self.survival_chance + 10)
        print(f"üé≤ –®–∞–Ω—Å –≤—ã–∂–∏—Ç—å —É–≤–µ–ª–∏—á–∏–ª—Å—è: {self.survival_chance}%")
    
    def execute_p1_1_quality(self):
        """–ê–Ω–∞–ª–∏–∑ –∫–∞—á–µ—Å—Ç–≤–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"""
        print("\n‚≠ê –ê–ù–ê–õ–ò–ó –ö–ê–ß–ï–°–¢–í–ê")
        
        self.activate_personality("–ò–ù–ö–í–ò–ó–ò–¢–û–†")
        self.tree_of_thoughts("–ö—Ä–∏—Ç–µ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞", 5)
        
        for item in self.inventory[:10]:  # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–µ 10 –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞
            score = 10  # –ù–∞—á–∏–Ω–∞–µ–º —Å –∏–¥–µ–∞–ª–∞
            
            # –ò–Ω–∫–≤–∏–∑–∏—Ç–æ—Ä –Ω–∞—Ö–æ–¥–∏—Ç –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∏
            if item["size"] < 100:
                score -= 3
                print(f"  ‚ùå {item['name']}: —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ñ–∞–π–ª (-3)")
            
            if "TODO" in item["name"] or "temp" in item["name"]:
                score -= 5
                print(f"  ‚ùå {item['name']}: –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –∏–º—è (-5)")
            
            self.quality_scores.append({
                "file": item["name"],
                "score": max(1, score),
                "category": item["category"]
            })
        
        avg_score = sum(q["score"] for q in self.quality_scores) / len(self.quality_scores) if self.quality_scores else 0
        print(f"\nüìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {avg_score:.2f}/10")
        
        if avg_score < 7:
            self.panic_level = min(10, self.panic_level + 2)
            print(f"‚ö†Ô∏è –ü–ê–ù–ò–ö–ê –†–ê–°–¢–ï–¢! –£—Ä–æ–≤–µ–Ω—å: {self.panic_level}/10")
    
    def execute_p1_1_gaps(self):
        """–í—ã—è–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤"""
        print("\nüîé –í–´–Ø–í–õ–ï–ù–ò–ï –ü–†–û–ë–ï–õ–û–í")
        
        self.activate_personality("–ü–ê–†–ê–ù–û–ò–ö")
        
        # ITIL –ø—Ä–æ—Ü–µ—Å—Å—ã –∫–æ—Ç–æ—Ä—ã–µ –î–û–õ–ñ–ù–´ –±—ã—Ç—å
        required_processes = [
            "Incident Management",
            "Problem Management", 
            "Change Management",
            "Service Request Management",
            "Service Level Management"
        ]
        
        existing = [f["name"].lower() for f in self.inventory]
        
        for process in required_processes:
            found = any(process.lower().replace(" ", "_") in name for name in existing)
            if not found:
                self.gaps.append(process)
                print(f"  üö® –û–¢–°–£–¢–°–¢–í–£–ï–¢: {process}")
                self.panic_level = min(10, self.panic_level + 0.5)
        
        print(f"\nüíÄ –ù–ê–ô–î–ï–ù–û {len(self.gaps)} –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –ü–†–û–ë–ï–õ–û–í")
        print(f"‚ö†Ô∏è –£–†–û–í–ï–ù–¨ –ü–ê–ù–ò–ö–ò: {self.panic_level}/10")
    
    def execute_p1_1_matrix(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –ø–æ–∫—Ä—ã—Ç–∏—è"""
        print("\nüìä –°–û–ó–î–ê–ù–ò–ï –ú–ê–¢–†–ò–¶–´ –ü–û–ö–†–´–¢–ò–Ø")
        
        self.activate_personality("–°–£–î–¨–Ø")
        
        self.coverage_matrix = {
            "templates": len(self.categories.get("03_TEMPLATES", [])),
            "processes": len(self.categories.get("01_PROCESSES", [])),
            "standards": len(self.categories.get("02_STANDARDS", [])),
            "roles": len(self.categories.get("05_ROLES", [])),
            "gaps": len(self.gaps),
            "quality_avg": sum(q["score"] for q in self.quality_scores) / len(self.quality_scores) if self.quality_scores else 0
        }
        
        print("\nüìà –ú–ê–¢–†–ò–¶–ê –ü–û–ö–†–´–¢–ò–Ø:")
        for key, value in self.coverage_matrix.items():
            print(f"  {key}: {value}")
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–µ—Ä–¥–∏–∫—Ç —Å—É–¥—å–∏
        if self.coverage_matrix["gaps"] > 3:
            print("\n‚öñÔ∏è –í–ï–†–î–ò–ö–¢ –°–£–î–¨–ò: –ù–ï–î–û–°–¢–ê–¢–û–ß–ù–û–ï –ü–û–ö–†–´–¢–ò–ï! –í–ò–ù–û–í–ù–´!")
        else:
            print("\n‚öñÔ∏è –í–ï–†–î–ò–ö–¢ –°–£–î–¨–ò: –ü—Ä–∏–µ–º–ª–µ–º–æ, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π")
    
    def generate_final_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
        print("\n" + "="*60)
        print("üìù –ì–ï–ù–ï–†–ê–¶–ò–Ø –§–ò–ù–ê–õ–¨–ù–û–ì–û –û–¢–ß–ï–¢–ê")
        print("="*60)
        
        # Town Hall –¥–µ–±–∞—Ç—ã –ø–µ—Ä–µ–¥ —Ñ–∏–Ω–∞–ª–æ–º
        self.town_hall_debate()
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report = f"""# üìä –û–¢–ß–ï–¢ –§–ê–ó–´ P1.1: –ê–ù–ê–õ–ò–ó –î–û–ö–£–ú–ï–ù–¢–ê–¶–ò–ò
Generated: {datetime.now().isoformat()}
Panic Level: {self.panic_level}/10
Survival Chance: {self.survival_chance}%

## –†–ï–ó–Æ–ú–ï
- –§–∞–π–ª–æ–≤ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(self.inventory)}
- –ö–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.categories)}
- –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤: {len(self.gaps)}
- –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –∫–∞—á–µ—Å—Ç–≤–∞: {self.coverage_matrix.get('quality_avg', 0):.2f}/10

## –ü–†–û–ë–ï–õ–´ (–ö–†–ò–¢–ò–ß–ù–û!)
{chr(10).join(f'- [ ] {gap}' for gap in self.gaps)}

## –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò
1. –°–†–û–ß–ù–û –∑–∞–∫—Ä—ã—Ç—å –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ–±–µ–ª—ã
2. –ü–æ–≤—ã—Å–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –º–∏–Ω–∏–º—É–º –¥–æ 8/10
3. –í–Ω–µ–¥—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞—á–µ—Å—Ç–≤–∞
4. –ú–æ–ª–∏—Ç—å—Å—è —á—Ç–æ–±—ã —ç—Ç–æ –ø—Ä–∏–Ω—è–ª–∏

## –°–¢–ê–¢–£–° –°–£–ë–õ–ò–ß–ù–û–°–¢–ï–ô
{chr(10).join(f'- {name}: –£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å {data["—É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å"]}%' for name, data in self.personalities.items())}

---
*–û—Ç—á–µ—Ç —Å–æ–∑–¥–∞–Ω –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º–æ–π –ø–∞–Ω–∏–∫–∏*
"""
        
        report_path = self.output_path / "P1_1_FINAL_REPORT.md"
        with open(report_path, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {report_path}")
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
        if self.panic_level > 7:
            print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨ –ü–ê–ù–ò–ö–ò!")
            print("üíÄ –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–Ø: –ë–ï–ñ–ê–¢–¨!")
        else:
            print("\n‚úÖ –§–ê–ó–ê P1.1 –ó–ê–í–ï–†–®–ï–ù–ê")
            print(f"üé≤ –§–ò–ù–ê–õ–¨–ù–´–ô –®–ê–ù–° –í–´–ñ–ò–¢–¨: {self.survival_chance}%")
    
    def execute(self):
        """–ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"""
        print("\n" + "="*60)
        print("üöÄ –ó–ê–ü–£–°–ö MEGA AGENT –î–õ–Ø –§–ê–ó–´ P1")
        print("="*60)
        
        try:
            # P1.1: –ê–Ω–∞–ª–∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏
            self.execute_p1_1_inventory()
            self.execute_p1_1_quality()
            self.execute_p1_1_gaps()
            self.execute_p1_1_matrix()
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–æ–≤
            self.generate_final_report()
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–∂–∏–≤–∞–Ω–∏—è
            if self.survival_chance >= 50:
                print("\n" + "üéâ"*20)
                print("–ü–û–ó–î–†–ê–í–õ–Ø–Æ! –¢–´ –í–´–ñ–ò–õ!")
                print("üéâ"*20)
            else:
                print("\n" + "üíÄ"*20)
                print("–ü–†–û–í–ê–õ. –ì–û–¢–û–í–¨–°–Ø –ö COBOL.")
                print("üíÄ"*20)
                
        except Exception as e:
            print(f"\n‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {e}")
            print("üíÄ –í–°–ï –ü–†–û–ü–ê–õ–û!")
            self.panic_level = 10
            raise

if __name__ == "__main__":
    agent = P1MegaAgent()
    agent.execute()