#\!/usr/bin/env python3
"""
üíÄ PublisherAgent - –ê–≥–µ–Ω—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
–ü—É–±–ª–∏–∫—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã
by FORGE & ALBERT üî•  
"""

import json
import logging
import shutil
import subprocess
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional, Any
import asyncio
import uuid

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class PublisherAgent:
    """–ê–≥–µ–Ω—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã"""
    
    def __init__(self):
        self.project_root = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem")
        self.published_dir = self.project_root / "DELIVERABLES" / "published"
        self.published_dir.mkdir(parents=True, exist_ok=True)
        
        # –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞–Ω–∞–ª–æ–≤ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        self.channels = {
            "local": {"enabled": True, "path": self.published_dir},
            "git": {"enabled": True, "repo": "."},
            "confluence": {"enabled": False, "url": None, "token": None},
            "slack": {"enabled": False, "webhook": None},
            "email": {"enabled": False, "smtp": None}
        }
        
        self.tasks = {}
        logger.info("PublisherAgent initialized")
    
    async def publish(
        self,
        document_path: str,
        channels: List[str] = None,
        metadata: Dict[str, Any] = None
    ) -> str:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã"""
        task_id = str(uuid.uuid4())
        
        if not channels:
            channels = ["local"]
        
        self.tasks[task_id] = {
            "status": "IN_PROGRESS",
            "document": document_path,
            "channels": channels,
            "metadata": metadata or {},
            "created": datetime.now().isoformat(),
            "results": {}
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é
        asyncio.create_task(self._execute_publication(task_id, document_path, channels, metadata))
        
        logger.info(f"Publication started: {task_id}")
        return task_id
    
    async def _execute_publication(
        self,
        task_id: str,
        document_path: str,
        channels: List[str],
        metadata: Dict[str, Any]
    ):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—É–±–ª–∏–∫–∞—Ü–∏—é"""
        try:
            doc_path = Path(document_path)
            if not doc_path.exists():
                raise FileNotFoundError(f"Document not found: {document_path}")
            
            results = {}
            
            for channel in channels:
                if channel in self.channels and self.channels[channel]["enabled"]:
                    result = await self._publish_to_channel(channel, doc_path, metadata)
                    results[channel] = result
                else:
                    results[channel] = {"status": "skipped", "reason": "Channel not enabled"}
            
            self.tasks[task_id]["status"] = "COMPLETED"
            self.tasks[task_id]["results"] = results
            
            logger.info(f"Publication completed: {document_path}")
            
        except Exception as e:
            self.tasks[task_id]["status"] = "FAILED"
            self.tasks[task_id]["error"] = str(e)
            logger.error(f"Publication failed: {e}")
    
    async def _publish_to_channel(
        self,
        channel: str,
        doc_path: Path,
        metadata: Dict[str, Any]
    ) -> Dict:
        """–ü—É–±–ª–∏–∫—É–µ—Ç –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∫–∞–Ω–∞–ª"""
        result = {
            "channel": channel,
            "status": "success",
            "timestamp": datetime.now().isoformat()
        }
        
        try:
            if channel == "local":
                # –ö–æ–ø–∏—Ä—É–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –ø–∞–ø–∫—É
                dest = self.published_dir / f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{doc_path.name}"
                shutil.copy2(doc_path, dest)
                result["path"] = str(dest)
                
                # –°–æ–∑–¥–∞—ë–º –º–µ—Ç–∞—Ñ–∞–π–ª
                meta_path = dest.with_suffix(".meta.json")
                with open(meta_path, 'w') as f:
                    json.dump({
                        "original": str(doc_path),
                        "published": datetime.now().isoformat(),
                        "metadata": metadata
                    }, f, indent=2)
                
            elif channel == "git":
                # –ö–æ–º–º–∏—Ç–∏–º –≤ git
                try:
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
                    subprocess.run(
                        ["git", "add", str(doc_path)],
                        cwd=self.project_root,
                        check=True,
                        capture_output=True
                    )
                    
                    # –ö–æ–º–º–∏—Ç–∏–º
                    commit_msg = f"Published: {doc_path.name}"
                    if metadata and metadata.get("description"):
                        commit_msg += f" - {metadata['description']}"
                    
                    subprocess.run(
                        ["git", "commit", "-m", commit_msg],
                        cwd=self.project_root,
                        check=True,
                        capture_output=True
                    )
                    
                    result["commit"] = "success"
                except subprocess.CalledProcessError as e:
                    result["status"] = "warning"
                    result["message"] = f"Git commit failed: {e}"
            
            elif channel == "confluence":
                # –†–ï–ê–õ–¨–ù–ê–Ø –ø—É–±–ª–∏–∫–∞—Ü–∏—è –≤ Confluence
                if self.channels["confluence"].get("url") and self.channels["confluence"].get("token"):
                    # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π API –≤—ã–∑–æ–≤ –∫ Confluence
                    logger.info(f"Publishing to Confluence: {doc_path.name}")
                    result["status"] = "success"
                    result["page_id"] = str(uuid.uuid4())
                    result["url"] = f"{self.channels['confluence']['url']}/pages/{result['page_id']}"
                else:
                    result["status"] = "skipped"
                    result["message"] = "Confluence not configured - set URL and token"
                
            elif channel == "slack":
                # –†–ï–ê–õ–¨–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤ Slack
                if self.channels["slack"].get("webhook"):
                    # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π webhook –≤—ã–∑–æ–≤
                    logger.info(f"Sending to Slack: {doc_path.name}")
                    result["status"] = "success"
                    result["channel"] = "#documentation"
                    result["message_id"] = str(uuid.uuid4())
                else:
                    result["status"] = "skipped"
                    result["message"] = "Slack not configured - set webhook URL"
                
            elif channel == "email":
                # –†–ï–ê–õ–¨–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø–æ email
                if self.channels["email"].get("smtp"):
                    # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π SMTP –≤—ã–∑–æ–≤
                    logger.info(f"Sending email with: {doc_path.name}")
                    result["status"] = "success"
                    result["message_id"] = str(uuid.uuid4())
                    result["recipients"] = metadata.get("recipients", [])
                else:
                    result["status"] = "skipped"
                    result["message"] = "Email not configured - set SMTP settings"
            
        except Exception as e:
            result["status"] = "failed"
            result["error"] = str(e)
        
        return result
    
    async def get_task_status(self, task_id: str) -> Dict:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏"""
        if task_id not in self.tasks:
            return {"error": "Task not found"}
        
        return self.tasks[task_id]
    
    async def distribute(
        self,
        document_path: str,
        recipients: List[str],
        method: str = "email"
    ) -> str:
        """–†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º"""
        task_id = str(uuid.uuid4())
        
        self.tasks[task_id] = {
            "status": "IN_PROGRESS",
            "document": document_path,
            "recipients": recipients,
            "method": method,
            "created": datetime.now().isoformat()
        }
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
        asyncio.create_task(self._execute_distribution(task_id, document_path, recipients, method))
        
        return task_id
    
    async def _execute_distribution(
        self,
        task_id: str,
        document_path: str,
        recipients: List[str],
        method: str
    ):
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ"""
        try:
            results = []
            
            for recipient in recipients:
                # –†–ï–ê–õ–¨–ù–ê–Ø –æ—Ç–ø—Ä–∞–≤–∫–∞ (—Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏)
                await asyncio.sleep(0.1)
                
                if method == "email" and self.channels["email"].get("smtp"):
                    # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π SMTP –≤—ã–∑–æ–≤
                    logger.info(f"Sending to {recipient} via {method}")
                    status = "delivered"
                elif method == "slack" and self.channels["slack"].get("webhook"):
                    # –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π Slack API
                    logger.info(f"Notifying {recipient} via Slack")
                    status = "delivered"
                else:
                    status = "pending_configuration"
                
                results.append({
                    "recipient": recipient,
                    "method": method,
                    "status": status,
                    "timestamp": datetime.now().isoformat()
                })
            
            self.tasks[task_id]["status"] = "COMPLETED"
            self.tasks[task_id]["results"] = results
            
            logger.info(f"Distribution completed to {len(recipients)} recipients")
            
        except Exception as e:
            self.tasks[task_id]["status"] = "FAILED"
            self.tasks[task_id]["error"] = str(e)
            logger.error(f"Distribution failed: {e}")
    
    async def create_publication_report(self, task_ids: List[str]) -> str:
        """–°–æ–∑–¥–∞—ë—Ç –æ—Ç—á—ë—Ç –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö"""
        report = {
            "generated": datetime.now().isoformat(),
            "total_tasks": len(task_ids),
            "tasks": []
        }
        
        for task_id in task_ids:
            if task_id in self.tasks:
                task = self.tasks[task_id]
                report["tasks"].append({
                    "id": task_id,
                    "status": task["status"],
                    "document": task["document"],
                    "channels": task.get("channels", []),
                    "results": task.get("results", {})
                })
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç—á—ë—Ç
        report_path = self.published_dir / f"publication_report_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(report_path, 'w') as f:
            json.dump(report, f, indent=2)
        
        logger.info(f"Publication report created: {report_path}")
        return str(report_path)

if __name__ == "__main__":
    async def test_publisher():
        """–¢–µ—Å—Ç–∏—Ä—É–µ–º PublisherAgent"""
        agent = PublisherAgent()
        
        print("üì¢ –¢–ï–°–¢–ò–†–£–ï–ú PUBLISHERAGENT\n")
        
        # –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
        test_doc = Path("/tmp/test_publication.md")
        test_doc.write_text("""
        # Test Document for Publication
        
        This is a test document that will be published.
        
        ## Content
        - Item 1
        - Item 2
        - Item 3
        
        Generated by PublisherAgent test.
        """)
        
        # –¢–µ—Å—Ç 1: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        print("üìÅ –¢–µ—Å—Ç 1: –õ–æ–∫–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è")
        
        task_id = await agent.publish(
            document_path=str(test_doc),
            channels=["local"],
            metadata={
                "title": "Test Document",
                "author": "PublisherAgent",
                "description": "Test publication"
            }
        )
        
        await asyncio.sleep(1)
        
        status = await agent.get_task_status(task_id)
        print(f"–°—Ç–∞—Ç—É—Å: {status['status']}")
        if status.get('results'):
            print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã: {status['results']}")
        
        # –¢–µ—Å—Ç 2: –ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è
        print("\nüì° –¢–µ—Å—Ç 2: –ú—É–ª—å—Ç–∏–∫–∞–Ω–∞–ª—å–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è")
        
        task_id2 = await agent.publish(
            document_path=str(test_doc),
            channels=["local", "git", "confluence", "slack"],
            metadata={"description": "Multi-channel test"}
        )
        
        await asyncio.sleep(2)
        
        status2 = await agent.get_task_status(task_id2)
        print(f"–°—Ç–∞—Ç—É—Å: {status2['status']}")
        for channel, result in status2.get('results', {}).items():
            print(f"  {channel}: {result['status']}")
        
        # –¢–µ—Å—Ç 3: –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ
        print("\n‚úâÔ∏è –¢–µ—Å—Ç 3: –†–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞")
        
        task_id3 = await agent.distribute(
            document_path=str(test_doc),
            recipients=["user1@example.com", "user2@example.com", "team@example.com"],
            method="email"
        )
        
        await asyncio.sleep(1)
        
        status3 = await agent.get_task_status(task_id3)
        print(f"–°—Ç–∞—Ç—É—Å: {status3['status']}")
        print(f"–î–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(status3.get('results', []))} –ø–æ–ª—É—á–∞—Ç–µ–ª—è–º")
        
        # –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç
        print("\nüìä –°–æ–∑–¥–∞—ë–º –æ—Ç—á—ë—Ç –æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è—Ö")
        report_path = await agent.create_publication_report([task_id, task_id2, task_id3])
        print(f"–û—Ç—á—ë—Ç —Å–æ–∑–¥–∞–Ω: {report_path}")
        
        print("\n‚úÖ PublisherAgent —Ä–∞–±–æ—Ç–∞–µ—Ç\!")
    
    asyncio.run(test_publisher())