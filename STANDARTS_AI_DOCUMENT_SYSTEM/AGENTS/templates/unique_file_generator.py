#!/usr/bin/env python3
"""
UniqueFileGenerator - –ò–°–ü–†–ê–í–õ–Ø–ï–¢ –ü–†–û–ë–õ–ï–ú–£ –û–î–ò–ù–ê–ö–û–í–´–• –ò–ú–ï–ù –§–ê–ô–õ–û–í
–ì–ï–ù–ï–†–ò–†–£–ï–¢ –£–ù–ò–ö–ê–õ–¨–ù–´–ï –ò–ú–ï–ù–ê –ü–û –ü–†–û–¶–ï–°–°–ê–ú: P1.1, P1.2, P2.1 –∏ —Ç.–¥.
–ê–≤—Ç–æ—Ä: GALAXYDEVELOPMENT
–í–µ—Ä—Å–∏—è: 1.0.0
"""

import json
from pathlib import Path
from typing import Dict, List

class UniqueFileGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å–∞–º"""
    
    def __init__(self):
        self.base_dir = Path("/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem")
        self.process_counter = {}  # phase_id -> counter
        
    def generate_process_filename(self, process_id: str, process_name: str, deliverable: str, format_type: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ –ø–æ –ø—Ä–æ—Ü–µ—Å—Å—É"""
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
        clean_name = self._clean_name(process_name)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        extension = self._get_extension(format_type, deliverable)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–º—è: P1.1_analysis_current_docs.xlsx
        filename = f"{process_id}_{clean_name}.{extension}"
        
        return filename
    
    def _clean_name(self, name: str) -> str:
        """–û—á–∏—Å—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞"""
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        translations = {
            "–ê–Ω–∞–ª–∏–∑": "analysis",
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è": "technical", 
            "–†–µ–≤–∏–∑–∏—è": "revision",
            "–ö–æ–º–∞–Ω–¥–∞": "team",
            "–û—Ü–µ–Ω–∫–∞": "assessment",
            "–ó—Ä–µ–ª–æ—Å—Ç–∏": "maturity",
            "–ü—Ä–æ—Ü–µ—Å—Å–æ–≤": "processes",
            "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è": "requirements",
            "–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ": "planning",
            "–î–∏–∑–∞–π–Ω": "design",
            "–ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞": "architecture",
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö": "database",
            "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è": "integration",
            "–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å": "security",
            "–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ": "testing",
            "–†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ": "deployment",
            "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥": "monitoring",
            "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è": "documentation",
            "–û–±—É—á–µ–Ω–∏–µ": "training",
            "–ê—É–¥–∏—Ç": "audit",
            "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ": "compliance",
            "–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å": "performance",
            "–ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ": "scaling",
            "–†–µ–ª–∏–∑": "release"
        }
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥—ã
        result = name
        for ru, en in translations.items():
            result = result.replace(ru, en)
        
        # –û—á–∏—Å—Ç–∫–∞ –æ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤
        result = result.lower()
        result = result.replace(" ", "_")
        result = result.replace("-", "_")
        result = "".join(c for c in result if c.isalnum() or c == "_")
        
        # –£–¥–∞–ª—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è
        while "__" in result:
            result = result.replace("__", "_")
            
        return result.strip("_")
    
    def _get_extension(self, format_type: str, deliverable: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è —Ñ–∞–π–ª–∞"""
        
        if format_type:
            return format_type
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ deliverable
        if ".xlsx" in deliverable:
            return "xlsx"
        elif ".sql" in deliverable:
            return "sql"
        elif ".md" in deliverable:
            return "md"
        elif ".pdf" in deliverable:
            return "pdf"
        elif ".json" in deliverable:
            return "json"
        else:
            return "txt"
    
    def rename_all_templates(self):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —à–∞–±–ª–æ–Ω–æ–≤ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏"""
        
        print("üöÄ –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –í–°–ï–• –®–ê–ë–õ–û–ù–û–í")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        config_path = self.base_dir / " ToDo" / "9d7e2139-7cfe-4512-99c0-70b4247b038f.jsonl  ‚Äî  _Users_safiullins_pro_.claude_projects_-Volumes-Z7S-development-GalaxyAnalitics---------AppsScript-AnaliticsSystem.json"
        
        if not config_path.exists():
            print("‚ùå Project config not found!")
            return
        
        with open(config_path, 'r', encoding='utf-8') as f:
            project_config = json.load(f)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥—ã–π –ø—Ä–æ—Ü–µ—Å—Å
        for phase in project_config.get("phases", []):
            phase_id = phase.get("phase_id")
            
            for process in phase.get("microprocesses", []):
                process_id = process.get("id")
                process_name = process.get("name", "unknown")
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º deliverables
                for deliverable in process.get("deliverables", []):
                    old_name = deliverable  # deliverable —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                    format_type = self._get_extension("", old_name).replace(".", "")
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–º—è
                    new_filename = self.generate_process_filename(
                        process_id, process_name, old_name, format_type
                    )
                    
                    print(f"üìù {process_id}: {old_name} ‚Üí {new_filename}")
                    
                    # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π template —Ñ–∞–π–ª
                    self._rename_template_file(old_name, new_filename, format_type)
        
        print("‚úÖ –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û!")
    
    def _rename_template_file(self, old_name: str, new_filename: str, format_type: str):
        """–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ template —Ñ–∞–π–ª–∞"""
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫—É –ø–æ —Ñ–æ—Ä–º–∞—Ç—É
        format_folders = {
            "xlsx": "XLSX",
            "sql": "SQL", 
            "md": "MD",
            "pdf": "PDF",
            "json": "JSON"
        }
        
        folder_name = format_folders.get(format_type, "OTHER")
        templates_dir = self.base_dir / "03_TEMPLATES" / folder_name
        
        if not templates_dir.exists():
            return
        
        # –ò—â–µ–º —Ñ–∞–π–ª—ã –ø–æ –ø–∞—Ç—Ç–µ—Ä–Ω—É
        old_pattern = old_name.replace(".", "_").replace(" ", "_").lower()
        
        for template_file in templates_dir.glob("*template.json"):
            if old_pattern in template_file.stem.lower():
                # –ù–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
                new_template_name = f"{new_filename.replace('.' + format_type, '')}_template.json"
                new_path = templates_dir / new_template_name
                
                # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º
                template_file.rename(new_path)
                print(f"   üìÅ {template_file.name} ‚Üí {new_template_name}")
                break
    
    def create_filename_mapping(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ JSON –º–∞–ø–ø–∏–Ω–≥–∞ —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
        
        mapping = {
            "file_mapping": {},
            "process_files": {},
            "statistics": {
                "total_processes": 0,
                "files_renamed": 0
            }
        }
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞
        config_path = self.base_dir / " ToDo" / "9d7e2139-7cfe-4512-99c0-70b4247b038f.jsonl  ‚Äî  _Users_safiullins_pro_.claude_projects_-Volumes-Z7S-development-GalaxyAnalitics---------AppsScript-AnaliticsSystem.json"
        
        if config_path.exists():
            with open(config_path, 'r', encoding='utf-8') as f:
                project_config = json.load(f)
            
            for phase in project_config.get("phases", []):
                for process in phase.get("microprocesses", []):
                    process_id = process.get("id")
                    process_name = process.get("name", "")
                    
                    mapping["process_files"][process_id] = {
                        "process_name": process_name,
                        "files": []
                    }
                    
                    for deliverable in process.get("deliverables", []):
                        old_name = deliverable  # deliverable —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞
                        format_type = self._get_extension("", old_name).replace(".", "")
                        
                        new_filename = self.generate_process_filename(
                            process_id, process_name, old_name, format_type
                        )
                        
                        mapping["file_mapping"][old_name] = new_filename
                        mapping["process_files"][process_id]["files"].append({
                            "old_name": old_name,
                            "new_name": new_filename,
                            "format": format_type
                        })
                        
                        mapping["statistics"]["files_renamed"] += 1
                    
                    mapping["statistics"]["total_processes"] += 1
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–∞–ø–ø–∏–Ω–≥
        mapping_file = self.base_dir / "00_PROJECT_MANAGEMENT" / "FILENAME_MAPPING.json"
        mapping_file.parent.mkdir(exist_ok=True)
        
        with open(mapping_file, 'w', encoding='utf-8') as f:
            json.dump(mapping, f, indent=2, ensure_ascii=False)
        
        print(f"üíæ Filename mapping saved to: {mapping_file}")
        return mapping


def main():
    """–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∏–º–µ–Ω —Ñ–∞–π–ª–æ–≤"""
    
    print("üî• FIXING DUPLICATE FILENAMES PROBLEM!")
    
    generator = UniqueFileGenerator()
    
    # –°–æ–∑–¥–∞–µ–º –º–∞–ø–ø–∏–Ω–≥
    mapping = generator.create_filename_mapping()
    
    print(f"üìä STATISTICS:")
    print(f"   Total processes: {mapping['statistics']['total_processes']}")
    print(f"   Files to rename: {mapping['statistics']['files_renamed']}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –Ω–æ–≤—ã—Ö –∏–º–µ–Ω
    print(f"\nüí° EXAMPLES OF NEW FILENAMES:")
    for process_id, info in list(mapping["process_files"].items())[:5]:
        print(f"   {process_id} ({info['process_name']}):")
        for file_info in info["files"]:
            print(f"      - {file_info['old_name']} ‚Üí {file_info['new_name']}")
    
    # –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª—ã
    print(f"\nüöÄ RENAMING FILES...")
    generator.rename_all_templates()
    
    print(f"‚úÖ PROBLEM SOLVED!")


if __name__ == "__main__":
    main()