import { createClient } from 'redis';
import { exec } from 'child_process';

const REDIS_HOST = process.env.REDIS_HOST || 'localhost';
const REDIS_PORT = parseInt(process.env.REDIS_PORT || '6379', 10);
const AGENT_ID = 'ai_code_auditor';

// --- –û—Å–Ω–æ–≤–Ω—ã–µ –∫–∞–Ω–∞–ª—ã Redis ---
const CHANNELS = {
    FILE_CHANGES: 'file_changes',
    AGENT_PING: 'agent_ping',
    AGENT_PONG: 'agent_pong',
    ANALYSIS_RESULTS: 'analysis_results',
    BLOCKING_REQUESTS: 'blocking_requests'
};

class AiCodeAuditorAgent {
    private redisClient: any;
    private subscriber: any;
    private lastHeartbeat: number = 0;
    private heartbeatInterval: number = 30 * 1000; // 30 —Å–µ–∫—É–Ω–¥

    constructor() {
        this.redisClient = createClient({
            socket: {
                host: REDIS_HOST,
                port: REDIS_PORT,
            }
        });

        this.subscriber = this.redisClient.duplicate();

        this.redisClient.on('error', (err: Error) => console.error('Redis Client Error', err));
        this.subscriber.on('error', (err: Error) => console.error('Redis Subscriber Error', err));
    }

    public async start(): Promise<void> {
        console.log(`ü§ñ ${AGENT_ID} –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...`);
        await this.connect();
        await this.subscribeToChannels();
        this.setupHeartbeat();
        console.log(`‚úÖ ${AGENT_ID} –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –∫–∞–Ω–∞–ª—ã.`);
    }

    private async connect(): Promise<void> {
        try {
            await this.redisClient.connect();
            await this.subscriber.connect();
            console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.');
        } catch (err) {
            console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis:', err);
            process.exit(1);
        }
    }

    private async subscribeToChannels(): Promise<void> {
        console.log(`–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª—ã: ${CHANNELS.FILE_CHANGES}, ${CHANNELS.AGENT_PING}`);
        await this.subscriber.subscribe(CHANNELS.FILE_CHANGES, (message: string) => this.handleFileChange(message));
        await this.subscriber.subscribe(CHANNELS.AGENT_PING, (message: string) => this.handlePing(message));
    }

    private async handleFileChange(message: string): Promise<void> {
        try {
            const event = JSON.parse(message);
            console.log(`
üìÑ –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞: ${event.file_path}`);
            
            // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ –¢–ó –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏–∑ ChromaDB (—ç–º—É–ª—è—Ü–∏—è)
            const requirements = await this.getRequirementsFromChromaDB(event.file_path);
            console.log('   - –ü–æ–ª—É—á–µ–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–∑ ChromaDB.');

            // 2. –ê–Ω–∞–ª–∏–∑ –∫–æ–¥–∞ —Å –ø–æ–º–æ—â—å—é AI
            console.log('   - –ó–∞–ø—É—Å–∫ AI –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–¥–∞...');
            const analysisResult = await this.analyzeCode(event.file_content, requirements);
            console.log(`   - –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¢–ó: ${analysisResult.tzComplianceScore * 100}%, –ö–∞—á–µ—Å—Ç–≤–æ: ${analysisResult.qualityScore * 100}%`);

            // 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ PostgreSQL (—ç–º—É–ª—è—Ü–∏—è)
            await this.saveResultToPostgres(event.id, analysisResult);
            console.log('   - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ PostgreSQL.');

            // 4. –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            await this.redisClient.publish(CHANNELS.ANALYSIS_RESULTS, JSON.stringify(analysisResult));

            // 5. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∫–æ–º–º–∏—Ç–∞ –ø—Ä–∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è—Ö
            if (analysisResult.tzComplianceScore < 0.8 || analysisResult.qualityScore < 0.7) {
                console.error(`   - üö´ –û–ë–ù–ê–†–£–ñ–ï–ù–´ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –ù–ê–†–£–®–ï–ù–ò–Ø!`);
                await this.requestCommitBlock(event.commit_id);
            }

        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', err);
        }
    }

    private async handlePing(message: string): Promise<void> {
        try {
            const pingData = JSON.parse(message);
            if (pingData.agent_id === AGENT_ID) {
                console.log('‚ù§Ô∏è –ü–æ–ª—É—á–µ–Ω ping, –æ—Ç–≤–µ—á–∞—é pong...');
                const pongMessage = JSON.stringify({ agent_id: AGENT_ID, status: 'alive', timestamp: new Date().toISOString() });
                await this.redisClient.lPush(CHANNELS.AGENT_PONG, pongMessage);
            }
        } catch (err) {
            console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ping:', err);
        }
    }

    private async getRequirementsFromChromaDB(filePath: string): Promise<any> {
        // –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∫ ChromaDB
        return new Promise(resolve => setTimeout(() => resolve({
            related_ticket: 'JIRA-123',
            acceptance_criteria: ['Function must return a number', 'Must handle null input'],
        }), 200));
    }

    private async analyzeCode(code: string, requirements: any): Promise<any> {
        // –≠–º—É–ª—è—Ü–∏—è –≤—ã–∑–æ–≤–∞ AI (OpenAI/Anthropic/Llama)
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç HTTP-–∑–∞–ø—Ä–æ—Å –∫ –º–æ–¥–µ–ª–∏
        return new Promise(resolve => setTimeout(() => {
            const violations = [];
            if (code.length < 50) violations.push('Code is too short');
            
            resolve({
                tzComplianceScore: code.includes('return') ? 0.9 : 0.5,
                qualityScore: 0.85,
                securityScore: 0.95,
                violations: violations,
                recommendations: ['Add more comments'],
                analyzedAt: new Date().toISOString()
            });
        }, 1000));
    }

    private async saveResultToPostgres(eventId: number, result: any): Promise<void> {
        // –≠–º—É–ª—è—Ü–∏—è –∑–∞–ø–∏—Å–∏ –≤ PostgreSQL
        console.log(`   - (–≠–º—É–ª—è—Ü–∏—è) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è file_event_id: ${eventId}`);
        return Promise.resolve();
    }

    private async requestCommitBlock(commitId: string): Promise<void> {
        const blockMessage = JSON.stringify({ commit_id: commitId, reason: 'AI Auditor found critical issues.' });
        await this.redisClient.publish(CHANNELS.BLOCKING_REQUESTS, blockMessage);
        console.log(`   - –û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É –∫–æ–º–º–∏—Ç–∞ ${commitId}`);
    }

    private setupHeartbeat(): void {
        setInterval(async () => {
            const now = Date.now();
            if (now - this.lastHeartbeat > this.heartbeatInterval) {
                const heartbeatMessage = JSON.stringify({ agent_id: AGENT_ID, timestamp: new Date().toISOString() });
                await this.redisClient.hSet('agents:health', AGENT_ID, heartbeatMessage);
                this.lastHeartbeat = now;
                console.log('‚ù§Ô∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω heartbeat');
            }
        }, this.heartbeatInterval);
    }
}

const agent = new AiCodeAuditorAgent();
agent.start();
