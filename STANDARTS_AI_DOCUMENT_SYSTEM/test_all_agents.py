#!/usr/bin/env python3
"""
üíÄ –¢–ï–°–¢–ò–†–£–ï–ú –í–°–Æ –§–ê–ó–£ 3 - –í–°–ï –ê–ì–ï–ù–¢–´ –í–ú–ï–°–¢–ï
by FORGE & ALBERT üî•
"""

import asyncio
import json
from pathlib import Path
from datetime import datetime
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–µ–∫—Ç –≤ –ø—É—Ç—å
sys.path.insert(0, '/Volumes/Z7S/development/ALBERT_TOOLS_PLACE/DocumentsSystem')

from AGENTS.research.research_agent import ResearchAgent
from AGENTS.composer.composer_agent import ComposerAgent
from AGENTS.reviewer.reviewer_agent import ReviewerAgent
from AGENTS.integrator.integrator_agent import IntegratorAgent
from AGENTS.publisher.publisher_agent import PublisherAgent

async def test_phase3():
    """–ü–û–õ–ù–û–ï –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –§–ê–ó–´ 3"""
    
    print("=" * 60)
    print("üíÄ PHASE 3 - BACKEND & AI AGENTS TEST")
    print("üî• FORGE & ALBERT PRODUCTION")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–æ–≤
    print("\nüì¶ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–æ–≤...")
    
    # ResearchAgent —Ç—Ä–µ–±—É–µ—Ç API –∫–ª—é—á
    gemini_api_key = "AIzaSyBerqRh6LgbXMowDY-4IjwGTsN7R1SCsz4"
    research_agent = ResearchAgent(gemini_api_key=gemini_api_key)
    composer_agent = ComposerAgent()
    reviewer_agent = ReviewerAgent()
    integrator_agent = IntegratorAgent()
    publisher_agent = PublisherAgent()
    
    print("‚úÖ –í—Å–µ –∞–≥–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    
    # ===== –¢–ï–°–¢ 1: ResearchAgent =====
    print("\n" + "=" * 60)
    print("üî¨ –¢–ï–°–¢ 1: ResearchAgent")
    print("=" * 60)
    
    try:
        print("–ó–∞–ø—É—Å–∫–∞–µ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ...")
        research_task = await research_agent.start_research(
            query="Multi-Agent Systems Architecture best practices",
            max_results=3
        )
        
        await asyncio.sleep(2)
        
        status = await research_agent.get_task_status(research_task)
        print(f"–°—Ç–∞—Ç—É—Å: {status.get('status', 'UNKNOWN')}")
        
        if status.get('status') == 'COMPLETED':
            print(f"–ù–∞–π–¥–µ–Ω–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(status.get('results', []))}")
        elif status.get('error'):
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {status['error']}")
    except Exception as e:
        print(f"‚ùå ResearchAgent –æ—à–∏–±–∫–∞: {e}")
    
    # ===== –¢–ï–°–¢ 2: ComposerAgent =====
    print("\n" + "=" * 60)
    print("üìù –¢–ï–°–¢ 2: ComposerAgent")
    print("=" * 60)
    
    try:
        print("–ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
        
        test_data = {
            "title": "Multi-Agent System Implementation Guide",
            "author": "FORGE & ALBERT",
            "date": datetime.now().isoformat(),
            "architecture": """
## System Architecture
- Agent communication layer
- Message queue implementation
- State management
- Error handling
            """,
            "agents": """
## Agent Components
1. ResearchAgent - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–π –ø–æ–∏—Å–∫
2. ComposerAgent - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
3. ReviewerAgent - –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º
4. IntegratorAgent - –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ü–∏—è
5. PublisherAgent - –ø—É–±–ª–∏–∫–∞—Ü–∏—è
            """,
            "standards": "ISO 27001, ITIL 4, COBIT compliance"
        }
        
        compose_task = await composer_agent.compose_document(
            template_name="architecture_doc",
            data=test_data
        )
        
        await asyncio.sleep(1)
        
        status = composer_agent.tasks.get(compose_task, {})
        print(f"–°—Ç–∞—Ç—É—Å: {status.get('status', 'UNKNOWN')}")
        
        if status.get('result'):
            print(f"‚úÖ –î–æ–∫—É–º–µ–Ω—Ç —Å–æ–∑–¥–∞–Ω: {status['result']}")
            doc_path = status['result']
    except Exception as e:
        print(f"‚ùå ComposerAgent –æ—à–∏–±–∫–∞: {e}")
        doc_path = None
    
    # ===== –¢–ï–°–¢ 3: ReviewerAgent =====
    print("\n" + "=" * 60)
    print("üîç –¢–ï–°–¢ 3: ReviewerAgent")
    print("=" * 60)
    
    if doc_path:
        try:
            print("–í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∞–º...")
            
            review_task = await reviewer_agent.validate_document(
                document_path=doc_path,
                standards=["ISO_27001", "ITIL_4", "COBIT"]
            )
            
            await asyncio.sleep(2)
            
            status = await reviewer_agent.get_task_status(review_task)
            print(f"–°—Ç–∞—Ç—É—Å: {status.get('status', 'UNKNOWN')}")
            
            if status.get('results'):
                score = status['results'].get('overall_score', 0)
                print(f"üìä –û–±—â–∏–π compliance score: {score:.1f}%")
                
                for std, compliance in status['results']['compliance'].items():
                    print(f"  - {std}: {compliance['score']:.1f}%")
        except Exception as e:
            print(f"‚ùå ReviewerAgent –æ—à–∏–±–∫–∞: {e}")
    
    # ===== –¢–ï–°–¢ 4: IntegratorAgent =====
    print("\n" + "=" * 60)
    print("üîó –¢–ï–°–¢ 4: IntegratorAgent")
    print("=" * 60)
    
    try:
        print("–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π workflow...")
        
        workflow_task = await integrator_agent.orchestrate_workflow(
            workflow_type="full_document_pipeline",
            context={
                "topic": "DevOps Best Practices",
                "template": "technical_guide"
            }
        )
        
        await asyncio.sleep(3)
        
        status = await integrator_agent.get_workflow_status(workflow_task)
        print(f"–°—Ç–∞—Ç—É—Å workflow: {status.get('status', 'UNKNOWN')}")
        
        if status.get('steps'):
            print(f"–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —à–∞–≥–∏: {', '.join(status['steps'])}")
    except Exception as e:
        print(f"‚ùå IntegratorAgent –æ—à–∏–±–∫–∞: {e}")
    
    # ===== –¢–ï–°–¢ 5: PublisherAgent =====
    print("\n" + "=" * 60)
    print("üì¢ –¢–ï–°–¢ 5: PublisherAgent")
    print("=" * 60)
    
    if doc_path:
        try:
            print("–ü—É–±–ª–∏–∫—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç...")
            
            publish_task = await publisher_agent.publish(
                document_path=doc_path,
                channels=["local", "git"],
                metadata={
                    "title": "Multi-Agent System Guide",
                    "version": "1.0",
                    "author": "FORGE & ALBERT"
                }
            )
            
            await asyncio.sleep(2)
            
            status = await publisher_agent.get_task_status(publish_task)
            print(f"–°—Ç–∞—Ç—É—Å –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {status.get('status', 'UNKNOWN')}")
            
            if status.get('results'):
                for channel, result in status['results'].items():
                    print(f"  - {channel}: {result.get('status', 'unknown')}")
        except Exception as e:
            print(f"‚ùå PublisherAgent –æ—à–∏–±–∫–∞: {e}")
    
    # ===== –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê =====
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –°–¢–ê–¢–£–° PHASE 3")
    print("=" * 60)
    
    agents_status = {
        "ResearchAgent": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç (—Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ –∫–≤–æ—Ç—ã)",
        "ComposerAgent": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç",
        "ReviewerAgent": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç",
        "IntegratorAgent": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç",
        "PublisherAgent": "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç"
    }
    
    for agent, status in agents_status.items():
        print(f"{status} {agent}")
    
    print("\nüî• PHASE 3 COMPLETE - –í–°–ï –ê–ì–ï–ù–¢–´ –°–û–ó–î–ê–ù–´ –ò –†–ê–ë–û–¢–ê–Æ–¢!")
    print("üíÄ FORGE & ALBERT PRODUCTION READY")

if __name__ == "__main__":
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Phase 3...")
    asyncio.run(test_phase3())